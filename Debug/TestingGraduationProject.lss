
TestingGraduationProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00005e72  00005f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000fe  008000fe  00005fa4  2**0
                  ALLOC
  3 .debug_aranges 00000588  00000000  00000000  00005fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000adc  00000000  00000000  0000652c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000041d5  00000000  00000000  00007008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000187a  00000000  00000000  0000b1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005281  00000000  00000000  0000ca57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000890  00000000  00000000  00011cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001176  00000000  00000000  00012568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  000136de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00011526  00000000  00000000  00013eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  000253d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 2b 	call	0x577a	; 0x577a <main>
      8a:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 2f 	jmp	0x5e04	; 0x5e04 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 2f 	jmp	0x5e3c	; 0x5e3c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
#include "UART_priv.h"
#include "UART_interface.h"
#include "UART_cfg.h"

void UART_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 USCRC_val =0u;
     b50:	19 82       	std	Y+1, r1	; 0x01
  SET_BIT(USCRB,USCRB_RXEN);
     b52:	aa e2       	ldi	r26, 0x2A	; 42
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 61       	ori	r24, 0x10	; 16
     b5e:	8c 93       	st	X, r24
  SET_BIT(USCRB,USCRB_TXEN);
     b60:	aa e2       	ldi	r26, 0x2A	; 42
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ea e2       	ldi	r30, 0x2A	; 42
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 60       	ori	r24, 0x08	; 8
     b6c:	8c 93       	st	X, r24

  /*aSYNC*/
  CLEAR_BIT(USCRC,USCRC_UMSEL);
     b6e:	a0 e4       	ldi	r26, 0x40	; 64
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e0 e4       	ldi	r30, 0x40	; 64
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	8f 7b       	andi	r24, 0xBF	; 191
     b7a:	8c 93       	st	X, r24


  /*character size mode*/
  CLEAR_BIT(USCRB,USCRB_UCSZ2);
     b7c:	aa e2       	ldi	r26, 0x2A	; 42
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ea e2       	ldi	r30, 0x2A	; 42
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8b 7f       	andi	r24, 0xFB	; 251
     b88:	8c 93       	st	X, r24
  SET_BIT(USCRC,USCRC_UCSZ1);
     b8a:	a0 e4       	ldi	r26, 0x40	; 64
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e0 e4       	ldi	r30, 0x40	; 64
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	84 60       	ori	r24, 0x04	; 4
     b96:	8c 93       	st	X, r24
  SET_BIT(USCRC,USCRC_UCSZ0);
     b98:	a0 e4       	ldi	r26, 0x40	; 64
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e0 e4       	ldi	r30, 0x40	; 64
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	8c 93       	st	X, r24



  /*parity disable*/

  CLEAR_BIT(USCRC,USCRC_UPM0);
     ba6:	a0 e4       	ldi	r26, 0x40	; 64
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e0 e4       	ldi	r30, 0x40	; 64
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	8f 7e       	andi	r24, 0xEF	; 239
     bb2:	8c 93       	st	X, r24
  CLEAR_BIT(USCRC,USCRC_UPM1);
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 e4       	ldi	r30, 0x40	; 64
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 7d       	andi	r24, 0xDF	; 223
     bc0:	8c 93       	st	X, r24


  /*Stop bit mode 1 bit*/
  CLEAR_BIT(USCRC,USCRC_USBS);
     bc2:	a0 e4       	ldi	r26, 0x40	; 64
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	87 7f       	andi	r24, 0xF7	; 247
     bce:	8c 93       	st	X, r24


  /*register select */
SET_BIT(USCRC,USCRC_URSEL);
     bd0:	a0 e4       	ldi	r26, 0x40	; 64
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e0 e4       	ldi	r30, 0x40	; 64
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	8c 93       	st	X, r24
USCRC= USCRC_val;
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	80 83       	st	Z, r24
/*NORMAL SPEED MODE*/
CLEAR_BIT(USCRA,USCRA_U2X);
     be6:	ab e2       	ldi	r26, 0x2B	; 43
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8d 7f       	andi	r24, 0xFD	; 253
     bf2:	8c 93       	st	X, r24
/*BAUD RATE 9600*/
UBRRL =103U;
     bf4:	e9 e2       	ldi	r30, 0x29	; 41
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	87 e6       	ldi	r24, 0x67	; 103
     bfa:	80 83       	st	Z, r24
}
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <UART_transmit>:
void UART_transmit(uint8 copy_data)
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	0f 92       	push	r0
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(USCRA,USCRA_UDRE)) == 0);
     c10:	eb e2       	ldi	r30, 0x2B	; 43
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 95       	swap	r24
     c18:	86 95       	lsr	r24
     c1a:	87 70       	andi	r24, 0x07	; 7
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	a1 f3       	breq	.-24     	; 0xc10 <UART_transmit+0xc>
	UDR = copy_data;
     c28:	ec e2       	ldi	r30, 0x2C	; 44
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	80 83       	st	Z, r24
}
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <UART_receive>:
uint8 UART_receive(void)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(USCRA,USCRA_RXC)==0);
     c40:	eb e2       	ldi	r30, 0x2B	; 43
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	88 23       	and	r24, r24
     c48:	dc f7       	brge	.-10     	; 0xc40 <UART_receive+0x8>
	return UDR;
     c4a:	ec e2       	ldi	r30, 0x2C	; 44
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
}
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <UART_transmit_string>:

void UART_transmit_string(char *string)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <UART_transmit_string+0x6>
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	0a c0       	rjmp	.+20     	; 0xc7a <UART_transmit_string+0x24>
	for(;*string != '\0'; string++)
	{
		UART_transmit(*string);
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	80 81       	ld	r24, Z
     c6c:	0e 94 02 06 	call	0xc04	; 0xc04 <UART_transmit>
	return UDR;
}

void UART_transmit_string(char *string)
{
	for(;*string != '\0'; string++)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	89 f7       	brne	.-30     	; 0xc66 <UART_transmit_string+0x10>
	{
		UART_transmit(*string);
	}
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <UART_receiveString>:
void UART_receiveString(char *string)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <UART_receiveString+0x6>
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		UART_receive();
     c9c:	0e 94 1c 06 	call	0xc38	; 0xc38 <UART_receive>
	}while(*string != '\0');
     ca0:	e9 81       	ldd	r30, Y+1	; 0x01
     ca2:	fa 81       	ldd	r31, Y+2	; 0x02
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	c9 f7       	brne	.-14     	; 0xc9c <UART_receiveString+0xe>

}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <TIMER0_initNormal>:
#include "TIMER_Interface.h"

/*		TIMER0 FUNCTIONS	*/

StdReturnType TIMER0_initNormal(uint8 copy_TIMER0_cmpOutMode)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <TIMER0_initNormal+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <TIMER0_initNormal+0x8>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	CLEAR_BIT(TCCR0,TCCR0_WGM00);
     cc6:	a3 e5       	ldi	r26, 0x53	; 83
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8f 7b       	andi	r24, 0xBF	; 191
     cd2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR0_WGM01);
     cd4:	a3 e5       	ldi	r26, 0x53	; 83
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e3 e5       	ldi	r30, 0x53	; 83
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	87 7f       	andi	r24, 0xF7	; 247
     ce0:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER0_cmpOutMode)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3c 83       	std	Y+4, r19	; 0x04
     cea:	2b 83       	std	Y+3, r18	; 0x03
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	91 05       	cpc	r25, r1
     cf4:	29 f1       	breq	.+74     	; 0xd40 <TIMER0_initNormal+0x8c>
     cf6:	2b 81       	ldd	r18, Y+3	; 0x03
     cf8:	3c 81       	ldd	r19, Y+4	; 0x04
     cfa:	23 30       	cpi	r18, 0x03	; 3
     cfc:	31 05       	cpc	r19, r1
     cfe:	34 f4       	brge	.+12     	; 0xd0c <TIMER0_initNormal+0x58>
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	91 05       	cpc	r25, r1
     d08:	61 f0       	breq	.+24     	; 0xd22 <TIMER0_initNormal+0x6e>
     d0a:	47 c0       	rjmp	.+142    	; 0xd9a <TIMER0_initNormal+0xe6>
     d0c:	2b 81       	ldd	r18, Y+3	; 0x03
     d0e:	3c 81       	ldd	r19, Y+4	; 0x04
     d10:	23 30       	cpi	r18, 0x03	; 3
     d12:	31 05       	cpc	r19, r1
     d14:	21 f1       	breq	.+72     	; 0xd5e <TIMER0_initNormal+0xaa>
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	84 30       	cpi	r24, 0x04	; 4
     d1c:	91 05       	cpc	r25, r1
     d1e:	71 f1       	breq	.+92     	; 0xd7c <TIMER0_initNormal+0xc8>
     d20:	3c c0       	rjmp	.+120    	; 0xd9a <TIMER0_initNormal+0xe6>
	{
	case T0_OC_DISCONNECTED:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     d30:	a3 e5       	ldi	r26, 0x53	; 83
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e3 e5       	ldi	r30, 0x53	; 83
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8f 7d       	andi	r24, 0xDF	; 223
     d3c:	8c 93       	st	X, r24
     d3e:	2e c0       	rjmp	.+92     	; 0xd9c <TIMER0_initNormal+0xe8>
		break;
	case T0_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR0,TCCR0_COM00);
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 61       	ori	r24, 0x10	; 16
     d4c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 7d       	andi	r24, 0xDF	; 223
     d5a:	8c 93       	st	X, r24
     d5c:	1f c0       	rjmp	.+62     	; 0xd9c <TIMER0_initNormal+0xe8>
		break;
	case T0_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     d5e:	a3 e5       	ldi	r26, 0x53	; 83
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e3 e5       	ldi	r30, 0x53	; 83
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8f 7e       	andi	r24, 0xEF	; 239
     d6a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     d6c:	a3 e5       	ldi	r26, 0x53	; 83
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e3 e5       	ldi	r30, 0x53	; 83
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 62       	ori	r24, 0x20	; 32
     d78:	8c 93       	st	X, r24
     d7a:	10 c0       	rjmp	.+32     	; 0xd9c <TIMER0_initNormal+0xe8>
		break;
	case T0_OC_SET_ON_CMP:
		SET_BIT(TCCR0,TCCR0_COM00);
     d7c:	a3 e5       	ldi	r26, 0x53	; 83
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 61       	ori	r24, 0x10	; 16
     d88:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 62       	ori	r24, 0x20	; 32
     d96:	8c 93       	st	X, r24
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <TIMER0_initNormal+0xe8>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
     d9a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	SET_BIT(TCCR0,TCCR0_FOC0);
     d9c:	a3 e5       	ldi	r26, 0x53	; 83
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e3 e5       	ldi	r30, 0x53	; 83
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 68       	ori	r24, 0x80	; 128
     da8:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTB,PIN3,OUTPUT);
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	return local_errorSignal;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <TIMER0_initCTC>:

StdReturnType TIMER0_initCTC(uint8 copy_TIMER0_limit, uint8 copy_TIMER0_cmpOutMode)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <TIMER0_initCTC+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <TIMER0_initCTC+0x8>
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	CLEAR_BIT(TCCR0,TCCR0_WGM00);
     dda:	a3 e5       	ldi	r26, 0x53	; 83
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	8f 7b       	andi	r24, 0xBF	; 191
     de6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     de8:	a3 e5       	ldi	r26, 0x53	; 83
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e3 e5       	ldi	r30, 0x53	; 83
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	88 60       	ori	r24, 0x08	; 8
     df4:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER0_cmpOutMode)
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	3d 83       	std	Y+5, r19	; 0x05
     dfe:	2c 83       	std	Y+4, r18	; 0x04
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	91 05       	cpc	r25, r1
     e08:	29 f1       	breq	.+74     	; 0xe54 <TIMER0_initCTC+0x90>
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	23 30       	cpi	r18, 0x03	; 3
     e10:	31 05       	cpc	r19, r1
     e12:	34 f4       	brge	.+12     	; 0xe20 <TIMER0_initCTC+0x5c>
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	9d 81       	ldd	r25, Y+5	; 0x05
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	61 f0       	breq	.+24     	; 0xe36 <TIMER0_initCTC+0x72>
     e1e:	47 c0       	rjmp	.+142    	; 0xeae <TIMER0_initCTC+0xea>
     e20:	2c 81       	ldd	r18, Y+4	; 0x04
     e22:	3d 81       	ldd	r19, Y+5	; 0x05
     e24:	23 30       	cpi	r18, 0x03	; 3
     e26:	31 05       	cpc	r19, r1
     e28:	21 f1       	breq	.+72     	; 0xe72 <TIMER0_initCTC+0xae>
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	91 05       	cpc	r25, r1
     e32:	71 f1       	breq	.+92     	; 0xe90 <TIMER0_initCTC+0xcc>
     e34:	3c c0       	rjmp	.+120    	; 0xeae <TIMER0_initCTC+0xea>
	{
	case T0_OC_DISCONNECTED:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	8c 93       	st	X, r24
     e52:	2e c0       	rjmp	.+92     	; 0xeb0 <TIMER0_initCTC+0xec>
		break;
	case T0_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR0,TCCR0_COM00);
     e54:	a3 e5       	ldi	r26, 0x53	; 83
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e3 e5       	ldi	r30, 0x53	; 83
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     e62:	a3 e5       	ldi	r26, 0x53	; 83
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e3 e5       	ldi	r30, 0x53	; 83
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 7d       	andi	r24, 0xDF	; 223
     e6e:	8c 93       	st	X, r24
     e70:	1f c0       	rjmp	.+62     	; 0xeb0 <TIMER0_initCTC+0xec>
		break;
	case T0_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     e72:	a3 e5       	ldi	r26, 0x53	; 83
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e3 e5       	ldi	r30, 0x53	; 83
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 7e       	andi	r24, 0xEF	; 239
     e7e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     e80:	a3 e5       	ldi	r26, 0x53	; 83
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e3 e5       	ldi	r30, 0x53	; 83
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	8c 93       	st	X, r24
     e8e:	10 c0       	rjmp	.+32     	; 0xeb0 <TIMER0_initCTC+0xec>
		break;
	case T0_OC_SET_ON_CMP:
		SET_BIT(TCCR0,TCCR0_COM00);
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 61       	ori	r24, 0x10	; 16
     e9c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	8c 93       	st	X, r24
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <TIMER0_initCTC+0xec>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
     eae:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR0 = copy_TIMER0_limit;
     eb0:	ec e5       	ldi	r30, 0x5C	; 92
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	SET_BIT(TCCR0,TCCR0_FOC0);
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 68       	ori	r24, 0x80	; 128
     ec4:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTB,PIN3,OUTPUT);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	63 e0       	ldi	r22, 0x03	; 3
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TIMER0_initFastPWM>:

StdReturnType TIMER0_initFastPWM(uint8 copy_TIMER0_cmp, uint8 copy_TIMER0_cmpOutMode)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <TIMER0_initFastPWM+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <TIMER0_initFastPWM+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	SET_BIT(TCCR0,TCCR0_WGM00);
     ef8:	a3 e5       	ldi	r26, 0x53	; 83
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e3 e5       	ldi	r30, 0x53	; 83
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     f06:	a3 e5       	ldi	r26, 0x53	; 83
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e3 e5       	ldi	r30, 0x53	; 83
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 60       	ori	r24, 0x08	; 8
     f12:	8c 93       	st	X, r24


	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER0_cmpOutMode)
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	91 05       	cpc	r25, r1
     f26:	c9 f0       	breq	.+50     	; 0xf5a <TIMER0_initFastPWM+0x78>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	24 30       	cpi	r18, 0x04	; 4
     f2e:	31 05       	cpc	r19, r1
     f30:	19 f1       	breq	.+70     	; 0xf78 <TIMER0_initFastPWM+0x96>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	69 f5       	brne	.+90     	; 0xf96 <TIMER0_initFastPWM+0xb4>
	{
	case T0_OC_DISCONNECTED:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     f3c:	a3 e5       	ldi	r26, 0x53	; 83
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e3 e5       	ldi	r30, 0x53	; 83
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8f 7e       	andi	r24, 0xEF	; 239
     f48:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
     f4a:	a3 e5       	ldi	r26, 0x53	; 83
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e3 e5       	ldi	r30, 0x53	; 83
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8f 7d       	andi	r24, 0xDF	; 223
     f56:	8c 93       	st	X, r24
     f58:	1f c0       	rjmp	.+62     	; 0xf98 <TIMER0_initFastPWM+0xb6>
		break;
	case T0_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
     f5a:	a3 e5       	ldi	r26, 0x53	; 83
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 e5       	ldi	r30, 0x53	; 83
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8f 7e       	andi	r24, 0xEF	; 239
     f66:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     f68:	a3 e5       	ldi	r26, 0x53	; 83
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e3 e5       	ldi	r30, 0x53	; 83
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 62       	ori	r24, 0x20	; 32
     f74:	8c 93       	st	X, r24
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <TIMER0_initFastPWM+0xb6>
		break;
	case T0_OC_SET_ON_CMP:
		SET_BIT(TCCR0,TCCR0_COM00);
     f78:	a3 e5       	ldi	r26, 0x53	; 83
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e3 e5       	ldi	r30, 0x53	; 83
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 61       	ori	r24, 0x10	; 16
     f84:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     f86:	a3 e5       	ldi	r26, 0x53	; 83
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e3 e5       	ldi	r30, 0x53	; 83
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 62       	ori	r24, 0x20	; 32
     f92:	8c 93       	st	X, r24
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <TIMER0_initFastPWM+0xb6>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
     f96:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR0 = copy_TIMER0_cmp;
     f98:	ec e5       	ldi	r30, 0x5C	; 92
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	CLEAR_BIT(TCCR0,TCCR0_FOC0);
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8f 77       	andi	r24, 0x7F	; 127
     fac:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTB,PIN3,OUTPUT);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	63 e0       	ldi	r22, 0x03	; 3
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <TIMER0_initPCPWM>:

StdReturnType TIMER0_initPCPWM(uint8 copy_TIMER0_cmp, uint8 copy_TIMER0_cmpOutMode)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <TIMER0_initPCPWM+0x6>
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <TIMER0_initPCPWM+0x8>
     fd2:	0f 92       	push	r0
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	8a 83       	std	Y+2, r24	; 0x02
     fda:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	SET_BIT(TCCR0,TCCR0_WGM00);
     fe0:	a3 e5       	ldi	r26, 0x53	; 83
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e3 e5       	ldi	r30, 0x53	; 83
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR0_WGM01);
     fee:	a3 e5       	ldi	r26, 0x53	; 83
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e3 e5       	ldi	r30, 0x53	; 83
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	87 7f       	andi	r24, 0xF7	; 247
     ffa:	8c 93       	st	X, r24



	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER0_cmpOutMode)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3d 83       	std	Y+5, r19	; 0x05
    1004:	2c 83       	std	Y+4, r18	; 0x04
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	c9 f0       	breq	.+50     	; 0x1042 <TIMER0_initPCPWM+0x78>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	24 30       	cpi	r18, 0x04	; 4
    1016:	31 05       	cpc	r19, r1
    1018:	19 f1       	breq	.+70     	; 0x1060 <TIMER0_initPCPWM+0x96>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	69 f5       	brne	.+90     	; 0x107e <TIMER0_initPCPWM+0xb4>
	{
	case T0_OC_DISCONNECTED:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1024:	a3 e5       	ldi	r26, 0x53	; 83
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e3 e5       	ldi	r30, 0x53	; 83
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8f 7e       	andi	r24, 0xEF	; 239
    1030:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_COM01);
    1032:	a3 e5       	ldi	r26, 0x53	; 83
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e3 e5       	ldi	r30, 0x53	; 83
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7d       	andi	r24, 0xDF	; 223
    103e:	8c 93       	st	X, r24
    1040:	1f c0       	rjmp	.+62     	; 0x1080 <TIMER0_initPCPWM+0xb6>
		break;
	case T0_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR0,TCCR0_COM00);
    1042:	a3 e5       	ldi	r26, 0x53	; 83
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e3 e5       	ldi	r30, 0x53	; 83
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 7e       	andi	r24, 0xEF	; 239
    104e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1050:	a3 e5       	ldi	r26, 0x53	; 83
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e3 e5       	ldi	r30, 0x53	; 83
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 62       	ori	r24, 0x20	; 32
    105c:	8c 93       	st	X, r24
    105e:	10 c0       	rjmp	.+32     	; 0x1080 <TIMER0_initPCPWM+0xb6>
		break;
	case T0_OC_SET_ON_CMP:
		SET_BIT(TCCR0,TCCR0_COM00);
    1060:	a3 e5       	ldi	r26, 0x53	; 83
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e3 e5       	ldi	r30, 0x53	; 83
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 61       	ori	r24, 0x10	; 16
    106c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    106e:	a3 e5       	ldi	r26, 0x53	; 83
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e3 e5       	ldi	r30, 0x53	; 83
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 62       	ori	r24, 0x20	; 32
    107a:	8c 93       	st	X, r24
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <TIMER0_initPCPWM+0xb6>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    107e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR0 = copy_TIMER0_cmp;
    1080:	ec e5       	ldi	r30, 0x5C	; 92
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	CLEAR_BIT(TCCR0,TCCR0_FOC0);
    1088:	a3 e5       	ldi	r26, 0x53	; 83
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e3 e5       	ldi	r30, 0x53	; 83
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8f 77       	andi	r24, 0x7F	; 127
    1094:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTB,PIN3,OUTPUT);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	63 e0       	ldi	r22, 0x03	; 3
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TIMER0_readValue>:

StdReturnType TIMER0_readValue(uint8 *copy_TIMER0_ptr)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <TIMER0_readValue+0x6>
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	9b 83       	std	Y+3, r25	; 0x03
    10c0:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	89 83       	std	Y+1, r24	; 0x01

		if (copy_TIMER0_ptr == NULL)
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <TIMER0_readValue+0x20>
		{
			local_errorSignal = NOT_OK_STAT;
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <TIMER0_readValue+0x2c>
		}
		else
		{
			*copy_TIMER0_ptr = TCNT0;
    10d2:	e2 e5       	ldi	r30, 0x52	; 82
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	ea 81       	ldd	r30, Y+2	; 0x02
    10da:	fb 81       	ldd	r31, Y+3	; 0x03
    10dc:	80 83       	st	Z, r24
		}

		return local_errorSignal;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TIMER0_startTimer>:

StdReturnType TIMER0_startTimer(uint8 copy_TIMER0_preScaling)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <TIMER0_startTimer+0x6>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01
	if (copy_TIMER0_preScaling < 6)
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	86 30       	cpi	r24, 0x06	; 6
    1100:	80 f4       	brcc	.+32     	; 0x1122 <TIMER0_startTimer+0x36>
	{
		TCCR0 &= 0xF8;
    1102:	a3 e5       	ldi	r26, 0x53	; 83
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e3 e5       	ldi	r30, 0x53	; 83
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 7f       	andi	r24, 0xF8	; 248
    110e:	8c 93       	st	X, r24
		TCCR0 |= copy_TIMER0_preScaling;
    1110:	a3 e5       	ldi	r26, 0x53	; 83
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e3 e5       	ldi	r30, 0x53	; 83
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	90 81       	ld	r25, Z
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	89 2b       	or	r24, r25
    111e:	8c 93       	st	X, r24
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <TIMER0_startTimer+0x38>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    1122:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <TIMER0_stopTimer>:

StdReturnType TIMER0_stopTimer(void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	StdReturnType local_errorSignal = OK_STAT;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 &= 0xF8;
    113e:	a3 e5       	ldi	r26, 0x53	; 83
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e3 e5       	ldi	r30, 0x53	; 83
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 7f       	andi	r24, 0xF8	; 248
    114a:	8c 93       	st	X, r24
	TCCR0 |= T0_NO_CLK;
    114c:	a3 e5       	ldi	r26, 0x53	; 83
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e3 e5       	ldi	r30, 0x53	; 83
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8c 93       	st	X, r24

	return local_errorSignal;
    1158:	89 81       	ldd	r24, Y+1	; 0x01
}
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <TIMER1_initNormal>:


/*		TIMER1 FUNCTIONS	*/

StdReturnType TIMER1_initNormal(uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	27 97       	sbiw	r28, 0x07	; 7
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	8a 83       	std	Y+2, r24	; 0x02
    1178:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    117e:	af e4       	ldi	r26, 0x4F	; 79
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ef e4       	ldi	r30, 0x4F	; 79
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8e 7f       	andi	r24, 0xFE	; 254
    118a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    118c:	af e4       	ldi	r26, 0x4F	; 79
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ef e4       	ldi	r30, 0x4F	; 79
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8d 7f       	andi	r24, 0xFD	; 253
    1198:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    119a:	ae e4       	ldi	r26, 0x4E	; 78
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	ee e4       	ldi	r30, 0x4E	; 78
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	87 7f       	andi	r24, 0xF7	; 247
    11a6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    11a8:	ae e4       	ldi	r26, 0x4E	; 78
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ee e4       	ldi	r30, 0x4E	; 78
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7e       	andi	r24, 0xEF	; 239
    11b4:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3f 83       	std	Y+7, r19	; 0x07
    11be:	2e 83       	std	Y+6, r18	; 0x06
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	91 05       	cpc	r25, r1
    11c8:	29 f1       	breq	.+74     	; 0x1214 <TIMER1_initNormal+0xb2>
    11ca:	2e 81       	ldd	r18, Y+6	; 0x06
    11cc:	3f 81       	ldd	r19, Y+7	; 0x07
    11ce:	23 30       	cpi	r18, 0x03	; 3
    11d0:	31 05       	cpc	r19, r1
    11d2:	34 f4       	brge	.+12     	; 0x11e0 <TIMER1_initNormal+0x7e>
    11d4:	8e 81       	ldd	r24, Y+6	; 0x06
    11d6:	9f 81       	ldd	r25, Y+7	; 0x07
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <TIMER1_initNormal+0x94>
    11de:	47 c0       	rjmp	.+142    	; 0x126e <TIMER1_initNormal+0x10c>
    11e0:	2e 81       	ldd	r18, Y+6	; 0x06
    11e2:	3f 81       	ldd	r19, Y+7	; 0x07
    11e4:	23 30       	cpi	r18, 0x03	; 3
    11e6:	31 05       	cpc	r19, r1
    11e8:	21 f1       	breq	.+72     	; 0x1232 <TIMER1_initNormal+0xd0>
    11ea:	8e 81       	ldd	r24, Y+6	; 0x06
    11ec:	9f 81       	ldd	r25, Y+7	; 0x07
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	91 05       	cpc	r25, r1
    11f2:	71 f1       	breq	.+92     	; 0x1250 <TIMER1_initNormal+0xee>
    11f4:	3c c0       	rjmp	.+120    	; 0x126e <TIMER1_initNormal+0x10c>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    11f6:	af e4       	ldi	r26, 0x4F	; 79
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ef e4       	ldi	r30, 0x4F	; 79
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8f 7b       	andi	r24, 0xBF	; 191
    1202:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1204:	af e4       	ldi	r26, 0x4F	; 79
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ef e4       	ldi	r30, 0x4F	; 79
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8f 77       	andi	r24, 0x7F	; 127
    1210:	8c 93       	st	X, r24
    1212:	2e c0       	rjmp	.+92     	; 0x1270 <TIMER1_initNormal+0x10e>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1214:	af e4       	ldi	r26, 0x4F	; 79
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ef e4       	ldi	r30, 0x4F	; 79
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 64       	ori	r24, 0x40	; 64
    1220:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1222:	af e4       	ldi	r26, 0x4F	; 79
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ef e4       	ldi	r30, 0x4F	; 79
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 77       	andi	r24, 0x7F	; 127
    122e:	8c 93       	st	X, r24
    1230:	1f c0       	rjmp	.+62     	; 0x1270 <TIMER1_initNormal+0x10e>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1232:	af e4       	ldi	r26, 0x4F	; 79
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e4       	ldi	r30, 0x4F	; 79
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 7b       	andi	r24, 0xBF	; 191
    123e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1240:	af e4       	ldi	r26, 0x4F	; 79
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ef e4       	ldi	r30, 0x4F	; 79
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 68       	ori	r24, 0x80	; 128
    124c:	8c 93       	st	X, r24
    124e:	10 c0       	rjmp	.+32     	; 0x1270 <TIMER1_initNormal+0x10e>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1250:	af e4       	ldi	r26, 0x4F	; 79
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ef e4       	ldi	r30, 0x4F	; 79
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 64       	ori	r24, 0x40	; 64
    125c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    125e:	af e4       	ldi	r26, 0x4F	; 79
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ef e4       	ldi	r30, 0x4F	; 79
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 68       	ori	r24, 0x80	; 128
    126a:	8c 93       	st	X, r24
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <TIMER1_initNormal+0x10e>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    126e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	91 05       	cpc	r25, r1
    1282:	29 f1       	breq	.+74     	; 0x12ce <TIMER1_initNormal+0x16c>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	23 30       	cpi	r18, 0x03	; 3
    128a:	31 05       	cpc	r19, r1
    128c:	34 f4       	brge	.+12     	; 0x129a <TIMER1_initNormal+0x138>
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	61 f0       	breq	.+24     	; 0x12b0 <TIMER1_initNormal+0x14e>
    1298:	47 c0       	rjmp	.+142    	; 0x1328 <TIMER1_initNormal+0x1c6>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	23 30       	cpi	r18, 0x03	; 3
    12a0:	31 05       	cpc	r19, r1
    12a2:	21 f1       	breq	.+72     	; 0x12ec <TIMER1_initNormal+0x18a>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	91 05       	cpc	r25, r1
    12ac:	71 f1       	breq	.+92     	; 0x130a <TIMER1_initNormal+0x1a8>
    12ae:	3c c0       	rjmp	.+120    	; 0x1328 <TIMER1_initNormal+0x1c6>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    12b0:	af e4       	ldi	r26, 0x4F	; 79
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ef e4       	ldi	r30, 0x4F	; 79
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 7e       	andi	r24, 0xEF	; 239
    12bc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    12be:	af e4       	ldi	r26, 0x4F	; 79
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ef e4       	ldi	r30, 0x4F	; 79
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	8c 93       	st	X, r24
    12cc:	2e c0       	rjmp	.+92     	; 0x132a <TIMER1_initNormal+0x1c8>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    12ce:	af e4       	ldi	r26, 0x4F	; 79
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e4       	ldi	r30, 0x4F	; 79
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 61       	ori	r24, 0x10	; 16
    12da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    12dc:	af e4       	ldi	r26, 0x4F	; 79
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ef e4       	ldi	r30, 0x4F	; 79
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 7d       	andi	r24, 0xDF	; 223
    12e8:	8c 93       	st	X, r24
    12ea:	1f c0       	rjmp	.+62     	; 0x132a <TIMER1_initNormal+0x1c8>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    12ec:	af e4       	ldi	r26, 0x4F	; 79
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ef e4       	ldi	r30, 0x4F	; 79
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 7e       	andi	r24, 0xEF	; 239
    12f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    12fa:	af e4       	ldi	r26, 0x4F	; 79
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ef e4       	ldi	r30, 0x4F	; 79
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 62       	ori	r24, 0x20	; 32
    1306:	8c 93       	st	X, r24
    1308:	10 c0       	rjmp	.+32     	; 0x132a <TIMER1_initNormal+0x1c8>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    130a:	af e4       	ldi	r26, 0x4F	; 79
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ef e4       	ldi	r30, 0x4F	; 79
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 61       	ori	r24, 0x10	; 16
    1316:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1318:	af e4       	ldi	r26, 0x4F	; 79
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ef e4       	ldi	r30, 0x4F	; 79
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	8c 93       	st	X, r24
    1326:	01 c0       	rjmp	.+2      	; 0x132a <TIMER1_initNormal+0x1c8>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1328:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	SET_BIT(TCCR1A,TCCR1A_FOC1A);
    132a:	af e4       	ldi	r26, 0x4F	; 79
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ef e4       	ldi	r30, 0x4F	; 79
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	88 60       	ori	r24, 0x08	; 8
    1336:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_FOC1B);
    1338:	af e4       	ldi	r26, 0x4F	; 79
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ef e4       	ldi	r30, 0x4F	; 79
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	84 60       	ori	r24, 0x04	; 4
    1344:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	64 e0       	ldi	r22, 0x04	; 4
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	65 e0       	ldi	r22, 0x05	; 5
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	27 96       	adiw	r28, 0x07	; 7
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <TIMER1_initCTC_OCR1A>:

StdReturnType TIMER1_initCTC_OCR1A(uint8 copy_TIMER1_cmpOutModeA, uint16 copy_TIMER1_topLimit)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <TIMER1_initCTC_OCR1A+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <TIMER1_initCTC_OCR1A+0x8>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <TIMER1_initCTC_OCR1A+0xa>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	8a 83       	std	Y+2, r24	; 0x02
    137e:	7c 83       	std	Y+4, r23	; 0x04
    1380:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1386:	af e4       	ldi	r26, 0x4F	; 79
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ef e4       	ldi	r30, 0x4F	; 79
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8e 7f       	andi	r24, 0xFE	; 254
    1392:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1394:	af e4       	ldi	r26, 0x4F	; 79
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef e4       	ldi	r30, 0x4F	; 79
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8d 7f       	andi	r24, 0xFD	; 253
    13a0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    13a2:	ae e4       	ldi	r26, 0x4E	; 78
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ee e4       	ldi	r30, 0x4E	; 78
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 60       	ori	r24, 0x08	; 8
    13ae:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    13b0:	ae e4       	ldi	r26, 0x4E	; 78
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee e4       	ldi	r30, 0x4E	; 78
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8f 7e       	andi	r24, 0xEF	; 239
    13bc:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3e 83       	std	Y+6, r19	; 0x06
    13c6:	2d 83       	std	Y+5, r18	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	91 05       	cpc	r25, r1
    13d0:	29 f1       	breq	.+74     	; 0x141c <TIMER1_initCTC_OCR1A+0xae>
    13d2:	2d 81       	ldd	r18, Y+5	; 0x05
    13d4:	3e 81       	ldd	r19, Y+6	; 0x06
    13d6:	23 30       	cpi	r18, 0x03	; 3
    13d8:	31 05       	cpc	r19, r1
    13da:	34 f4       	brge	.+12     	; 0x13e8 <TIMER1_initCTC_OCR1A+0x7a>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	61 f0       	breq	.+24     	; 0x13fe <TIMER1_initCTC_OCR1A+0x90>
    13e6:	47 c0       	rjmp	.+142    	; 0x1476 <TIMER1_initCTC_OCR1A+0x108>
    13e8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ea:	3e 81       	ldd	r19, Y+6	; 0x06
    13ec:	23 30       	cpi	r18, 0x03	; 3
    13ee:	31 05       	cpc	r19, r1
    13f0:	21 f1       	breq	.+72     	; 0x143a <TIMER1_initCTC_OCR1A+0xcc>
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	91 05       	cpc	r25, r1
    13fa:	71 f1       	breq	.+92     	; 0x1458 <TIMER1_initCTC_OCR1A+0xea>
    13fc:	3c c0       	rjmp	.+120    	; 0x1476 <TIMER1_initCTC_OCR1A+0x108>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    13fe:	af e4       	ldi	r26, 0x4F	; 79
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ef e4       	ldi	r30, 0x4F	; 79
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8f 7b       	andi	r24, 0xBF	; 191
    140a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    140c:	af e4       	ldi	r26, 0x4F	; 79
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ef e4       	ldi	r30, 0x4F	; 79
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 77       	andi	r24, 0x7F	; 127
    1418:	8c 93       	st	X, r24
    141a:	2e c0       	rjmp	.+92     	; 0x1478 <TIMER1_initCTC_OCR1A+0x10a>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    141c:	af e4       	ldi	r26, 0x4F	; 79
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ef e4       	ldi	r30, 0x4F	; 79
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    142a:	af e4       	ldi	r26, 0x4F	; 79
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ef e4       	ldi	r30, 0x4F	; 79
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 77       	andi	r24, 0x7F	; 127
    1436:	8c 93       	st	X, r24
    1438:	1f c0       	rjmp	.+62     	; 0x1478 <TIMER1_initCTC_OCR1A+0x10a>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    143a:	af e4       	ldi	r26, 0x4F	; 79
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ef e4       	ldi	r30, 0x4F	; 79
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8f 7b       	andi	r24, 0xBF	; 191
    1446:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1448:	af e4       	ldi	r26, 0x4F	; 79
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e4       	ldi	r30, 0x4F	; 79
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	8c 93       	st	X, r24
    1456:	10 c0       	rjmp	.+32     	; 0x1478 <TIMER1_initCTC_OCR1A+0x10a>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1458:	af e4       	ldi	r26, 0x4F	; 79
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ef e4       	ldi	r30, 0x4F	; 79
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 64       	ori	r24, 0x40	; 64
    1464:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1466:	af e4       	ldi	r26, 0x4F	; 79
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ef e4       	ldi	r30, 0x4F	; 79
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	80 68       	ori	r24, 0x80	; 128
    1472:	8c 93       	st	X, r24
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <TIMER1_initCTC_OCR1A+0x10a>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1476:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR1A = copy_TIMER1_topLimit;
    1478:	ea e4       	ldi	r30, 0x4A	; 74
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG  */

	SET_BIT(TCCR1A,TCCR1A_FOC1A);
    1484:	af e4       	ldi	r26, 0x4F	; 79
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	88 60       	ori	r24, 0x08	; 8
    1490:	8c 93       	st	X, r24
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	65 e0       	ldi	r22, 0x05	; 5
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	26 96       	adiw	r28, 0x06	; 6
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <TIMER1_initCTC_ICR1>:


StdReturnType TIMER1_initCTC_ICR1(uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB, uint16 copy_TIMER1_topA,  uint16 copy_TIMER1_topB,	uint16 copy_TIMER1_limit)
{
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	2d 97       	sbiw	r28, 0x0d	; 13
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	6b 83       	std	Y+3, r22	; 0x03
    14cc:	5d 83       	std	Y+5, r21	; 0x05
    14ce:	4c 83       	std	Y+4, r20	; 0x04
    14d0:	3f 83       	std	Y+7, r19	; 0x07
    14d2:	2e 83       	std	Y+6, r18	; 0x06
    14d4:	19 87       	std	Y+9, r17	; 0x09
    14d6:	08 87       	std	Y+8, r16	; 0x08
	StdReturnType local_errorSignal = OK_STAT;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    14dc:	af e4       	ldi	r26, 0x4F	; 79
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ef e4       	ldi	r30, 0x4F	; 79
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    14ea:	af e4       	ldi	r26, 0x4F	; 79
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ef e4       	ldi	r30, 0x4F	; 79
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    14f8:	ae e4       	ldi	r26, 0x4E	; 78
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ee e4       	ldi	r30, 0x4E	; 78
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	88 60       	ori	r24, 0x08	; 8
    1504:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 61       	ori	r24, 0x10	; 16
    1512:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 87       	std	Y+13, r19	; 0x0d
    151c:	2c 87       	std	Y+12, r18	; 0x0c
    151e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1520:	9d 85       	ldd	r25, Y+13	; 0x0d
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	91 05       	cpc	r25, r1
    1526:	29 f1       	breq	.+74     	; 0x1572 <TIMER1_initCTC_ICR1+0xc2>
    1528:	2c 85       	ldd	r18, Y+12	; 0x0c
    152a:	3d 85       	ldd	r19, Y+13	; 0x0d
    152c:	23 30       	cpi	r18, 0x03	; 3
    152e:	31 05       	cpc	r19, r1
    1530:	34 f4       	brge	.+12     	; 0x153e <TIMER1_initCTC_ICR1+0x8e>
    1532:	8c 85       	ldd	r24, Y+12	; 0x0c
    1534:	9d 85       	ldd	r25, Y+13	; 0x0d
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	61 f0       	breq	.+24     	; 0x1554 <TIMER1_initCTC_ICR1+0xa4>
    153c:	47 c0       	rjmp	.+142    	; 0x15cc <TIMER1_initCTC_ICR1+0x11c>
    153e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1540:	3d 85       	ldd	r19, Y+13	; 0x0d
    1542:	23 30       	cpi	r18, 0x03	; 3
    1544:	31 05       	cpc	r19, r1
    1546:	21 f1       	breq	.+72     	; 0x1590 <TIMER1_initCTC_ICR1+0xe0>
    1548:	8c 85       	ldd	r24, Y+12	; 0x0c
    154a:	9d 85       	ldd	r25, Y+13	; 0x0d
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	91 05       	cpc	r25, r1
    1550:	71 f1       	breq	.+92     	; 0x15ae <TIMER1_initCTC_ICR1+0xfe>
    1552:	3c c0       	rjmp	.+120    	; 0x15cc <TIMER1_initCTC_ICR1+0x11c>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1554:	af e4       	ldi	r26, 0x4F	; 79
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ef e4       	ldi	r30, 0x4F	; 79
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7b       	andi	r24, 0xBF	; 191
    1560:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1562:	af e4       	ldi	r26, 0x4F	; 79
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ef e4       	ldi	r30, 0x4F	; 79
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8f 77       	andi	r24, 0x7F	; 127
    156e:	8c 93       	st	X, r24
    1570:	2e c0       	rjmp	.+92     	; 0x15ce <TIMER1_initCTC_ICR1+0x11e>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1572:	af e4       	ldi	r26, 0x4F	; 79
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef e4       	ldi	r30, 0x4F	; 79
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	80 64       	ori	r24, 0x40	; 64
    157e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1580:	af e4       	ldi	r26, 0x4F	; 79
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ef e4       	ldi	r30, 0x4F	; 79
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 77       	andi	r24, 0x7F	; 127
    158c:	8c 93       	st	X, r24
    158e:	1f c0       	rjmp	.+62     	; 0x15ce <TIMER1_initCTC_ICR1+0x11e>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1590:	af e4       	ldi	r26, 0x4F	; 79
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ef e4       	ldi	r30, 0x4F	; 79
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 7b       	andi	r24, 0xBF	; 191
    159c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    159e:	af e4       	ldi	r26, 0x4F	; 79
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ef e4       	ldi	r30, 0x4F	; 79
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	8c 93       	st	X, r24
    15ac:	10 c0       	rjmp	.+32     	; 0x15ce <TIMER1_initCTC_ICR1+0x11e>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    15bc:	af e4       	ldi	r26, 0x4F	; 79
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ef e4       	ldi	r30, 0x4F	; 79
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	8c 93       	st	X, r24
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <TIMER1_initCTC_ICR1+0x11e>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    15cc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3b 87       	std	Y+11, r19	; 0x0b
    15d6:	2a 87       	std	Y+10, r18	; 0x0a
    15d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15da:	9b 85       	ldd	r25, Y+11	; 0x0b
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	91 05       	cpc	r25, r1
    15e0:	29 f1       	breq	.+74     	; 0x162c <TIMER1_initCTC_ICR1+0x17c>
    15e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    15e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    15e6:	23 30       	cpi	r18, 0x03	; 3
    15e8:	31 05       	cpc	r19, r1
    15ea:	34 f4       	brge	.+12     	; 0x15f8 <TIMER1_initCTC_ICR1+0x148>
    15ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	91 05       	cpc	r25, r1
    15f4:	61 f0       	breq	.+24     	; 0x160e <TIMER1_initCTC_ICR1+0x15e>
    15f6:	47 c0       	rjmp	.+142    	; 0x1686 <TIMER1_initCTC_ICR1+0x1d6>
    15f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    15fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    15fc:	23 30       	cpi	r18, 0x03	; 3
    15fe:	31 05       	cpc	r19, r1
    1600:	21 f1       	breq	.+72     	; 0x164a <TIMER1_initCTC_ICR1+0x19a>
    1602:	8a 85       	ldd	r24, Y+10	; 0x0a
    1604:	9b 85       	ldd	r25, Y+11	; 0x0b
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	91 05       	cpc	r25, r1
    160a:	71 f1       	breq	.+92     	; 0x1668 <TIMER1_initCTC_ICR1+0x1b8>
    160c:	3c c0       	rjmp	.+120    	; 0x1686 <TIMER1_initCTC_ICR1+0x1d6>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    160e:	af e4       	ldi	r26, 0x4F	; 79
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e4       	ldi	r30, 0x4F	; 79
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 7e       	andi	r24, 0xEF	; 239
    161a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    161c:	af e4       	ldi	r26, 0x4F	; 79
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ef e4       	ldi	r30, 0x4F	; 79
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8f 7d       	andi	r24, 0xDF	; 223
    1628:	8c 93       	st	X, r24
    162a:	2e c0       	rjmp	.+92     	; 0x1688 <TIMER1_initCTC_ICR1+0x1d8>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    162c:	af e4       	ldi	r26, 0x4F	; 79
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 61       	ori	r24, 0x10	; 16
    1638:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    163a:	af e4       	ldi	r26, 0x4F	; 79
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ef e4       	ldi	r30, 0x4F	; 79
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7d       	andi	r24, 0xDF	; 223
    1646:	8c 93       	st	X, r24
    1648:	1f c0       	rjmp	.+62     	; 0x1688 <TIMER1_initCTC_ICR1+0x1d8>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    164a:	af e4       	ldi	r26, 0x4F	; 79
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ef e4       	ldi	r30, 0x4F	; 79
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 7e       	andi	r24, 0xEF	; 239
    1656:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1658:	af e4       	ldi	r26, 0x4F	; 79
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ef e4       	ldi	r30, 0x4F	; 79
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 62       	ori	r24, 0x20	; 32
    1664:	8c 93       	st	X, r24
    1666:	10 c0       	rjmp	.+32     	; 0x1688 <TIMER1_initCTC_ICR1+0x1d8>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1668:	af e4       	ldi	r26, 0x4F	; 79
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ef e4       	ldi	r30, 0x4F	; 79
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 61       	ori	r24, 0x10	; 16
    1674:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1676:	af e4       	ldi	r26, 0x4F	; 79
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	ef e4       	ldi	r30, 0x4F	; 79
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 62       	ori	r24, 0x20	; 32
    1682:	8c 93       	st	X, r24
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <TIMER1_initCTC_ICR1+0x1d8>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1686:	19 82       	std	Y+1, r1	; 0x01
		break;
	}


	ICR1 = copy_TIMER1_limit;
    1688:	e6 e4       	ldi	r30, 0x46	; 70
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	88 85       	ldd	r24, Y+8	; 0x08
    168e:	99 85       	ldd	r25, Y+9	; 0x09
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
	OCR1A = copy_TIMER1_topA;
    1694:	ea e4       	ldi	r30, 0x4A	; 74
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	9d 81       	ldd	r25, Y+5	; 0x05
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
	OCR1B = copy_TIMER1_topB;
    16a0:	e8 e4       	ldi	r30, 0x48	; 72
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	9f 81       	ldd	r25, Y+7	; 0x07
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG  */

	SET_BIT(TCCR1A,TCCR1A_FOC1A);
    16ac:	af e4       	ldi	r26, 0x4F	; 79
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ef e4       	ldi	r30, 0x4F	; 79
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	88 60       	ori	r24, 0x08	; 8
    16b8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_FOC1B);
    16ba:	af e4       	ldi	r26, 0x4F	; 79
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e4       	ldi	r30, 0x4F	; 79
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	84 60       	ori	r24, 0x04	; 4
    16c6:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	64 e0       	ldi	r22, 0x04	; 4
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	65 e0       	ldi	r22, 0x05	; 5
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16de:	2d 96       	adiw	r28, 0x0d	; 13
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <TIMER1_initFastPWM8bit>:


StdReturnType TIMER1_initFastPWM8bit(uint8 copy_TIMER1_cmpA, uint8 copy_TIMER1_cmpB, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	29 97       	sbiw	r28, 0x09	; 9
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	6b 83       	std	Y+3, r22	; 0x03
    170c:	4c 83       	std	Y+4, r20	; 0x04
    170e:	2d 83       	std	Y+5, r18	; 0x05
	StdReturnType local_errorSignal = OK_STAT;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	SET_BIT(TCCR1A,TCCR1A_WGM10);
    1714:	af e4       	ldi	r26, 0x4F	; 79
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ef e4       	ldi	r30, 0x4F	; 79
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1722:	af e4       	ldi	r26, 0x4F	; 79
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	ef e4       	ldi	r30, 0x4F	; 79
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8d 7f       	andi	r24, 0xFD	; 253
    172e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1730:	ae e4       	ldi	r26, 0x4E	; 78
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e4       	ldi	r30, 0x4E	; 78
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	88 60       	ori	r24, 0x08	; 8
    173c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    173e:	ae e4       	ldi	r26, 0x4E	; 78
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ee e4       	ldi	r30, 0x4E	; 78
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8f 7e       	andi	r24, 0xEF	; 239
    174a:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	39 87       	std	Y+9, r19	; 0x09
    1754:	28 87       	std	Y+8, r18	; 0x08
    1756:	88 85       	ldd	r24, Y+8	; 0x08
    1758:	99 85       	ldd	r25, Y+9	; 0x09
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	91 05       	cpc	r25, r1
    175e:	29 f1       	breq	.+74     	; 0x17aa <TIMER1_initFastPWM8bit+0xb6>
    1760:	28 85       	ldd	r18, Y+8	; 0x08
    1762:	39 85       	ldd	r19, Y+9	; 0x09
    1764:	23 30       	cpi	r18, 0x03	; 3
    1766:	31 05       	cpc	r19, r1
    1768:	34 f4       	brge	.+12     	; 0x1776 <TIMER1_initFastPWM8bit+0x82>
    176a:	88 85       	ldd	r24, Y+8	; 0x08
    176c:	99 85       	ldd	r25, Y+9	; 0x09
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	61 f0       	breq	.+24     	; 0x178c <TIMER1_initFastPWM8bit+0x98>
    1774:	47 c0       	rjmp	.+142    	; 0x1804 <TIMER1_initFastPWM8bit+0x110>
    1776:	28 85       	ldd	r18, Y+8	; 0x08
    1778:	39 85       	ldd	r19, Y+9	; 0x09
    177a:	23 30       	cpi	r18, 0x03	; 3
    177c:	31 05       	cpc	r19, r1
    177e:	21 f1       	breq	.+72     	; 0x17c8 <TIMER1_initFastPWM8bit+0xd4>
    1780:	88 85       	ldd	r24, Y+8	; 0x08
    1782:	99 85       	ldd	r25, Y+9	; 0x09
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	91 05       	cpc	r25, r1
    1788:	71 f1       	breq	.+92     	; 0x17e6 <TIMER1_initFastPWM8bit+0xf2>
    178a:	3c c0       	rjmp	.+120    	; 0x1804 <TIMER1_initFastPWM8bit+0x110>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    178c:	af e4       	ldi	r26, 0x4F	; 79
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ef e4       	ldi	r30, 0x4F	; 79
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8f 7b       	andi	r24, 0xBF	; 191
    1798:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    179a:	af e4       	ldi	r26, 0x4F	; 79
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ef e4       	ldi	r30, 0x4F	; 79
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	8c 93       	st	X, r24
    17a8:	2e c0       	rjmp	.+92     	; 0x1806 <TIMER1_initFastPWM8bit+0x112>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    17aa:	af e4       	ldi	r26, 0x4F	; 79
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ef e4       	ldi	r30, 0x4F	; 79
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    17b8:	af e4       	ldi	r26, 0x4F	; 79
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ef e4       	ldi	r30, 0x4F	; 79
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	8c 93       	st	X, r24
    17c6:	1f c0       	rjmp	.+62     	; 0x1806 <TIMER1_initFastPWM8bit+0x112>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    17c8:	af e4       	ldi	r26, 0x4F	; 79
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ef e4       	ldi	r30, 0x4F	; 79
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8f 7b       	andi	r24, 0xBF	; 191
    17d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    17d6:	af e4       	ldi	r26, 0x4F	; 79
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ef e4       	ldi	r30, 0x4F	; 79
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 68       	ori	r24, 0x80	; 128
    17e2:	8c 93       	st	X, r24
    17e4:	10 c0       	rjmp	.+32     	; 0x1806 <TIMER1_initFastPWM8bit+0x112>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    17e6:	af e4       	ldi	r26, 0x4F	; 79
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	ef e4       	ldi	r30, 0x4F	; 79
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 64       	ori	r24, 0x40	; 64
    17f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    17f4:	af e4       	ldi	r26, 0x4F	; 79
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ef e4       	ldi	r30, 0x4F	; 79
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	80 68       	ori	r24, 0x80	; 128
    1800:	8c 93       	st	X, r24
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <TIMER1_initFastPWM8bit+0x112>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1804:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3f 83       	std	Y+7, r19	; 0x07
    180e:	2e 83       	std	Y+6, r18	; 0x06
    1810:	8e 81       	ldd	r24, Y+6	; 0x06
    1812:	9f 81       	ldd	r25, Y+7	; 0x07
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	91 05       	cpc	r25, r1
    1818:	29 f1       	breq	.+74     	; 0x1864 <TIMER1_initFastPWM8bit+0x170>
    181a:	2e 81       	ldd	r18, Y+6	; 0x06
    181c:	3f 81       	ldd	r19, Y+7	; 0x07
    181e:	23 30       	cpi	r18, 0x03	; 3
    1820:	31 05       	cpc	r19, r1
    1822:	34 f4       	brge	.+12     	; 0x1830 <TIMER1_initFastPWM8bit+0x13c>
    1824:	8e 81       	ldd	r24, Y+6	; 0x06
    1826:	9f 81       	ldd	r25, Y+7	; 0x07
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	91 05       	cpc	r25, r1
    182c:	61 f0       	breq	.+24     	; 0x1846 <TIMER1_initFastPWM8bit+0x152>
    182e:	47 c0       	rjmp	.+142    	; 0x18be <TIMER1_initFastPWM8bit+0x1ca>
    1830:	2e 81       	ldd	r18, Y+6	; 0x06
    1832:	3f 81       	ldd	r19, Y+7	; 0x07
    1834:	23 30       	cpi	r18, 0x03	; 3
    1836:	31 05       	cpc	r19, r1
    1838:	21 f1       	breq	.+72     	; 0x1882 <TIMER1_initFastPWM8bit+0x18e>
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	9f 81       	ldd	r25, Y+7	; 0x07
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	91 05       	cpc	r25, r1
    1842:	71 f1       	breq	.+92     	; 0x18a0 <TIMER1_initFastPWM8bit+0x1ac>
    1844:	3c c0       	rjmp	.+120    	; 0x18be <TIMER1_initFastPWM8bit+0x1ca>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1846:	af e4       	ldi	r26, 0x4F	; 79
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	ef e4       	ldi	r30, 0x4F	; 79
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8f 7e       	andi	r24, 0xEF	; 239
    1852:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1854:	af e4       	ldi	r26, 0x4F	; 79
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ef e4       	ldi	r30, 0x4F	; 79
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 7d       	andi	r24, 0xDF	; 223
    1860:	8c 93       	st	X, r24
    1862:	2e c0       	rjmp	.+92     	; 0x18c0 <TIMER1_initFastPWM8bit+0x1cc>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1864:	af e4       	ldi	r26, 0x4F	; 79
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ef e4       	ldi	r30, 0x4F	; 79
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 61       	ori	r24, 0x10	; 16
    1870:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1872:	af e4       	ldi	r26, 0x4F	; 79
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ef e4       	ldi	r30, 0x4F	; 79
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 7d       	andi	r24, 0xDF	; 223
    187e:	8c 93       	st	X, r24
    1880:	1f c0       	rjmp	.+62     	; 0x18c0 <TIMER1_initFastPWM8bit+0x1cc>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1882:	af e4       	ldi	r26, 0x4F	; 79
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ef e4       	ldi	r30, 0x4F	; 79
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7e       	andi	r24, 0xEF	; 239
    188e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1890:	af e4       	ldi	r26, 0x4F	; 79
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ef e4       	ldi	r30, 0x4F	; 79
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 62       	ori	r24, 0x20	; 32
    189c:	8c 93       	st	X, r24
    189e:	10 c0       	rjmp	.+32     	; 0x18c0 <TIMER1_initFastPWM8bit+0x1cc>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    18a0:	af e4       	ldi	r26, 0x4F	; 79
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ef e4       	ldi	r30, 0x4F	; 79
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 61       	ori	r24, 0x10	; 16
    18ac:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    18ae:	af e4       	ldi	r26, 0x4F	; 79
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ef e4       	ldi	r30, 0x4F	; 79
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 62       	ori	r24, 0x20	; 32
    18ba:	8c 93       	st	X, r24
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <TIMER1_initFastPWM8bit+0x1cc>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    18be:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR1A = copy_TIMER1_cmpA;
    18c0:	ea e4       	ldi	r30, 0x4A	; 74
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
	OCR1B = copy_TIMER1_cmpB;
    18ce:	e8 e4       	ldi	r30, 0x48	; 72
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    18dc:	af e4       	ldi	r26, 0x4F	; 79
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ef e4       	ldi	r30, 0x4F	; 79
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	87 7f       	andi	r24, 0xF7	; 247
    18e8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    18ea:	af e4       	ldi	r26, 0x4F	; 79
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ef e4       	ldi	r30, 0x4F	; 79
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8b 7f       	andi	r24, 0xFB	; 251
    18f6:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	64 e0       	ldi	r22, 0x04	; 4
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	65 e0       	ldi	r22, 0x05	; 5
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    190c:	89 81       	ldd	r24, Y+1	; 0x01
}
    190e:	29 96       	adiw	r28, 0x09	; 9
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <TIMER1_initFastPWM9bit>:


StdReturnType TIMER1_initFastPWM9bit(uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	2b 97       	sbiw	r28, 0x0b	; 11
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	9b 83       	std	Y+3, r25	; 0x03
    1936:	8a 83       	std	Y+2, r24	; 0x02
    1938:	7d 83       	std	Y+5, r23	; 0x05
    193a:	6c 83       	std	Y+4, r22	; 0x04
    193c:	4e 83       	std	Y+6, r20	; 0x06
    193e:	2f 83       	std	Y+7, r18	; 0x07
	StdReturnType local_errorSignal = OK_STAT;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1960:	ae e4       	ldi	r26, 0x4E	; 78
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ee e4       	ldi	r30, 0x4E	; 78
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7e       	andi	r24, 0xEF	; 239
    197a:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    197c:	8e 81       	ldd	r24, Y+6	; 0x06
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3b 87       	std	Y+11, r19	; 0x0b
    1984:	2a 87       	std	Y+10, r18	; 0x0a
    1986:	8a 85       	ldd	r24, Y+10	; 0x0a
    1988:	9b 85       	ldd	r25, Y+11	; 0x0b
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	91 05       	cpc	r25, r1
    198e:	29 f1       	breq	.+74     	; 0x19da <TIMER1_initFastPWM9bit+0xba>
    1990:	2a 85       	ldd	r18, Y+10	; 0x0a
    1992:	3b 85       	ldd	r19, Y+11	; 0x0b
    1994:	23 30       	cpi	r18, 0x03	; 3
    1996:	31 05       	cpc	r19, r1
    1998:	34 f4       	brge	.+12     	; 0x19a6 <TIMER1_initFastPWM9bit+0x86>
    199a:	8a 85       	ldd	r24, Y+10	; 0x0a
    199c:	9b 85       	ldd	r25, Y+11	; 0x0b
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	61 f0       	breq	.+24     	; 0x19bc <TIMER1_initFastPWM9bit+0x9c>
    19a4:	47 c0       	rjmp	.+142    	; 0x1a34 <TIMER1_initFastPWM9bit+0x114>
    19a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    19a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    19aa:	23 30       	cpi	r18, 0x03	; 3
    19ac:	31 05       	cpc	r19, r1
    19ae:	21 f1       	breq	.+72     	; 0x19f8 <TIMER1_initFastPWM9bit+0xd8>
    19b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b4:	84 30       	cpi	r24, 0x04	; 4
    19b6:	91 05       	cpc	r25, r1
    19b8:	71 f1       	breq	.+92     	; 0x1a16 <TIMER1_initFastPWM9bit+0xf6>
    19ba:	3c c0       	rjmp	.+120    	; 0x1a34 <TIMER1_initFastPWM9bit+0x114>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    19bc:	af e4       	ldi	r26, 0x4F	; 79
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e4       	ldi	r30, 0x4F	; 79
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 7b       	andi	r24, 0xBF	; 191
    19c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    19ca:	af e4       	ldi	r26, 0x4F	; 79
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e4       	ldi	r30, 0x4F	; 79
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 77       	andi	r24, 0x7F	; 127
    19d6:	8c 93       	st	X, r24
    19d8:	2e c0       	rjmp	.+92     	; 0x1a36 <TIMER1_initFastPWM9bit+0x116>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    19da:	af e4       	ldi	r26, 0x4F	; 79
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ef e4       	ldi	r30, 0x4F	; 79
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 64       	ori	r24, 0x40	; 64
    19e6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    19e8:	af e4       	ldi	r26, 0x4F	; 79
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ef e4       	ldi	r30, 0x4F	; 79
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 77       	andi	r24, 0x7F	; 127
    19f4:	8c 93       	st	X, r24
    19f6:	1f c0       	rjmp	.+62     	; 0x1a36 <TIMER1_initFastPWM9bit+0x116>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    19f8:	af e4       	ldi	r26, 0x4F	; 79
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ef e4       	ldi	r30, 0x4F	; 79
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7b       	andi	r24, 0xBF	; 191
    1a04:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1a06:	af e4       	ldi	r26, 0x4F	; 79
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ef e4       	ldi	r30, 0x4F	; 79
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 68       	ori	r24, 0x80	; 128
    1a12:	8c 93       	st	X, r24
    1a14:	10 c0       	rjmp	.+32     	; 0x1a36 <TIMER1_initFastPWM9bit+0x116>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1a16:	af e4       	ldi	r26, 0x4F	; 79
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ef e4       	ldi	r30, 0x4F	; 79
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 64       	ori	r24, 0x40	; 64
    1a22:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1a24:	af e4       	ldi	r26, 0x4F	; 79
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ef e4       	ldi	r30, 0x4F	; 79
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	8c 93       	st	X, r24
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <TIMER1_initFastPWM9bit+0x116>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1a34:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    1a36:	8f 81       	ldd	r24, Y+7	; 0x07
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	39 87       	std	Y+9, r19	; 0x09
    1a3e:	28 87       	std	Y+8, r18	; 0x08
    1a40:	88 85       	ldd	r24, Y+8	; 0x08
    1a42:	99 85       	ldd	r25, Y+9	; 0x09
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	91 05       	cpc	r25, r1
    1a48:	29 f1       	breq	.+74     	; 0x1a94 <TIMER1_initFastPWM9bit+0x174>
    1a4a:	28 85       	ldd	r18, Y+8	; 0x08
    1a4c:	39 85       	ldd	r19, Y+9	; 0x09
    1a4e:	23 30       	cpi	r18, 0x03	; 3
    1a50:	31 05       	cpc	r19, r1
    1a52:	34 f4       	brge	.+12     	; 0x1a60 <TIMER1_initFastPWM9bit+0x140>
    1a54:	88 85       	ldd	r24, Y+8	; 0x08
    1a56:	99 85       	ldd	r25, Y+9	; 0x09
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <TIMER1_initFastPWM9bit+0x156>
    1a5e:	47 c0       	rjmp	.+142    	; 0x1aee <TIMER1_initFastPWM9bit+0x1ce>
    1a60:	28 85       	ldd	r18, Y+8	; 0x08
    1a62:	39 85       	ldd	r19, Y+9	; 0x09
    1a64:	23 30       	cpi	r18, 0x03	; 3
    1a66:	31 05       	cpc	r19, r1
    1a68:	21 f1       	breq	.+72     	; 0x1ab2 <TIMER1_initFastPWM9bit+0x192>
    1a6a:	88 85       	ldd	r24, Y+8	; 0x08
    1a6c:	99 85       	ldd	r25, Y+9	; 0x09
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	91 05       	cpc	r25, r1
    1a72:	71 f1       	breq	.+92     	; 0x1ad0 <TIMER1_initFastPWM9bit+0x1b0>
    1a74:	3c c0       	rjmp	.+120    	; 0x1aee <TIMER1_initFastPWM9bit+0x1ce>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1a76:	af e4       	ldi	r26, 0x4F	; 79
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ef e4       	ldi	r30, 0x4F	; 79
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8f 7e       	andi	r24, 0xEF	; 239
    1a82:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1a84:	af e4       	ldi	r26, 0x4F	; 79
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ef e4       	ldi	r30, 0x4F	; 79
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8f 7d       	andi	r24, 0xDF	; 223
    1a90:	8c 93       	st	X, r24
    1a92:	2e c0       	rjmp	.+92     	; 0x1af0 <TIMER1_initFastPWM9bit+0x1d0>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1a94:	af e4       	ldi	r26, 0x4F	; 79
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	ef e4       	ldi	r30, 0x4F	; 79
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 61       	ori	r24, 0x10	; 16
    1aa0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1aa2:	af e4       	ldi	r26, 0x4F	; 79
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ef e4       	ldi	r30, 0x4F	; 79
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8f 7d       	andi	r24, 0xDF	; 223
    1aae:	8c 93       	st	X, r24
    1ab0:	1f c0       	rjmp	.+62     	; 0x1af0 <TIMER1_initFastPWM9bit+0x1d0>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1ab2:	af e4       	ldi	r26, 0x4F	; 79
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ef e4       	ldi	r30, 0x4F	; 79
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 7e       	andi	r24, 0xEF	; 239
    1abe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1ac0:	af e4       	ldi	r26, 0x4F	; 79
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	ef e4       	ldi	r30, 0x4F	; 79
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 62       	ori	r24, 0x20	; 32
    1acc:	8c 93       	st	X, r24
    1ace:	10 c0       	rjmp	.+32     	; 0x1af0 <TIMER1_initFastPWM9bit+0x1d0>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1ad0:	af e4       	ldi	r26, 0x4F	; 79
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ef e4       	ldi	r30, 0x4F	; 79
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 61       	ori	r24, 0x10	; 16
    1adc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1ade:	af e4       	ldi	r26, 0x4F	; 79
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	ef e4       	ldi	r30, 0x4F	; 79
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 62       	ori	r24, 0x20	; 32
    1aea:	8c 93       	st	X, r24
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <TIMER1_initFastPWM9bit+0x1d0>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1aee:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	if ((copy_TIMER1_cmpA <= 0x01FF) && (copy_TIMER1_cmpB <= 0x01FF))
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	9b 81       	ldd	r25, Y+3	; 0x03
    1af4:	22 e0       	ldi	r18, 0x02	; 2
    1af6:	80 30       	cpi	r24, 0x00	; 0
    1af8:	92 07       	cpc	r25, r18
    1afa:	98 f4       	brcc	.+38     	; 0x1b22 <TIMER1_initFastPWM9bit+0x202>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	32 e0       	ldi	r19, 0x02	; 2
    1b02:	80 30       	cpi	r24, 0x00	; 0
    1b04:	93 07       	cpc	r25, r19
    1b06:	68 f4       	brcc	.+26     	; 0x1b22 <TIMER1_initFastPWM9bit+0x202>
	{
		OCR1A = copy_TIMER1_cmpA;
    1b08:	ea e4       	ldi	r30, 0x4A	; 74
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    1b14:	e8 e4       	ldi	r30, 0x48	; 72
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <TIMER1_initFastPWM9bit+0x204>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    1b24:	af e4       	ldi	r26, 0x4F	; 79
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ef e4       	ldi	r30, 0x4F	; 79
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	87 7f       	andi	r24, 0xF7	; 247
    1b30:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    1b32:	af e4       	ldi	r26, 0x4F	; 79
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ef e4       	ldi	r30, 0x4F	; 79
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8b 7f       	andi	r24, 0xFB	; 251
    1b3e:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	65 e0       	ldi	r22, 0x05	; 5
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	2b 96       	adiw	r28, 0x0b	; 11
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <TIMER1_initFastPWM10bit>:


StdReturnType TIMER1_initFastPWM10bit(uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	2b 97       	sbiw	r28, 0x0b	; 11
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	9b 83       	std	Y+3, r25	; 0x03
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
    1b80:	7d 83       	std	Y+5, r23	; 0x05
    1b82:	6c 83       	std	Y+4, r22	; 0x04
    1b84:	4e 83       	std	Y+6, r20	; 0x06
    1b86:	2f 83       	std	Y+7, r18	; 0x07
	StdReturnType local_errorSignal = OK_STAT;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	SET_BIT(TCCR1A,TCCR1A_WGM10);
    1b8c:	af e4       	ldi	r26, 0x4F	; 79
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ef e4       	ldi	r30, 0x4F	; 79
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	81 60       	ori	r24, 0x01	; 1
    1b98:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1b9a:	af e4       	ldi	r26, 0x4F	; 79
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ef e4       	ldi	r30, 0x4F	; 79
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	82 60       	ori	r24, 0x02	; 2
    1ba6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ba8:	ae e4       	ldi	r26, 0x4E	; 78
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ee e4       	ldi	r30, 0x4E	; 78
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 60       	ori	r24, 0x08	; 8
    1bb4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    1bb6:	ae e4       	ldi	r26, 0x4E	; 78
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ee e4       	ldi	r30, 0x4E	; 78
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8f 7e       	andi	r24, 0xEF	; 239
    1bc2:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    1bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	3b 87       	std	Y+11, r19	; 0x0b
    1bcc:	2a 87       	std	Y+10, r18	; 0x0a
    1bce:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	29 f1       	breq	.+74     	; 0x1c22 <TIMER1_initFastPWM10bit+0xba>
    1bd8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bda:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bdc:	23 30       	cpi	r18, 0x03	; 3
    1bde:	31 05       	cpc	r19, r1
    1be0:	34 f4       	brge	.+12     	; 0x1bee <TIMER1_initFastPWM10bit+0x86>
    1be2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	91 05       	cpc	r25, r1
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <TIMER1_initFastPWM10bit+0x9c>
    1bec:	47 c0       	rjmp	.+142    	; 0x1c7c <TIMER1_initFastPWM10bit+0x114>
    1bee:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bf0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bf2:	23 30       	cpi	r18, 0x03	; 3
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	21 f1       	breq	.+72     	; 0x1c40 <TIMER1_initFastPWM10bit+0xd8>
    1bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	91 05       	cpc	r25, r1
    1c00:	71 f1       	breq	.+92     	; 0x1c5e <TIMER1_initFastPWM10bit+0xf6>
    1c02:	3c c0       	rjmp	.+120    	; 0x1c7c <TIMER1_initFastPWM10bit+0x114>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1c04:	af e4       	ldi	r26, 0x4F	; 79
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	ef e4       	ldi	r30, 0x4F	; 79
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7b       	andi	r24, 0xBF	; 191
    1c10:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1c12:	af e4       	ldi	r26, 0x4F	; 79
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ef e4       	ldi	r30, 0x4F	; 79
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 77       	andi	r24, 0x7F	; 127
    1c1e:	8c 93       	st	X, r24
    1c20:	2e c0       	rjmp	.+92     	; 0x1c7e <TIMER1_initFastPWM10bit+0x116>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1c22:	af e4       	ldi	r26, 0x4F	; 79
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ef e4       	ldi	r30, 0x4F	; 79
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 64       	ori	r24, 0x40	; 64
    1c2e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1c30:	af e4       	ldi	r26, 0x4F	; 79
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ef e4       	ldi	r30, 0x4F	; 79
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 77       	andi	r24, 0x7F	; 127
    1c3c:	8c 93       	st	X, r24
    1c3e:	1f c0       	rjmp	.+62     	; 0x1c7e <TIMER1_initFastPWM10bit+0x116>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1c40:	af e4       	ldi	r26, 0x4F	; 79
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ef e4       	ldi	r30, 0x4F	; 79
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8f 7b       	andi	r24, 0xBF	; 191
    1c4c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1c4e:	af e4       	ldi	r26, 0x4F	; 79
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ef e4       	ldi	r30, 0x4F	; 79
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 68       	ori	r24, 0x80	; 128
    1c5a:	8c 93       	st	X, r24
    1c5c:	10 c0       	rjmp	.+32     	; 0x1c7e <TIMER1_initFastPWM10bit+0x116>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1c5e:	af e4       	ldi	r26, 0x4F	; 79
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	ef e4       	ldi	r30, 0x4F	; 79
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 64       	ori	r24, 0x40	; 64
    1c6a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1c6c:	af e4       	ldi	r26, 0x4F	; 79
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	ef e4       	ldi	r30, 0x4F	; 79
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	80 68       	ori	r24, 0x80	; 128
    1c78:	8c 93       	st	X, r24
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <TIMER1_initFastPWM10bit+0x116>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1c7c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	39 87       	std	Y+9, r19	; 0x09
    1c86:	28 87       	std	Y+8, r18	; 0x08
    1c88:	88 85       	ldd	r24, Y+8	; 0x08
    1c8a:	99 85       	ldd	r25, Y+9	; 0x09
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	91 05       	cpc	r25, r1
    1c90:	29 f1       	breq	.+74     	; 0x1cdc <TIMER1_initFastPWM10bit+0x174>
    1c92:	28 85       	ldd	r18, Y+8	; 0x08
    1c94:	39 85       	ldd	r19, Y+9	; 0x09
    1c96:	23 30       	cpi	r18, 0x03	; 3
    1c98:	31 05       	cpc	r19, r1
    1c9a:	34 f4       	brge	.+12     	; 0x1ca8 <TIMER1_initFastPWM10bit+0x140>
    1c9c:	88 85       	ldd	r24, Y+8	; 0x08
    1c9e:	99 85       	ldd	r25, Y+9	; 0x09
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	61 f0       	breq	.+24     	; 0x1cbe <TIMER1_initFastPWM10bit+0x156>
    1ca6:	47 c0       	rjmp	.+142    	; 0x1d36 <TIMER1_initFastPWM10bit+0x1ce>
    1ca8:	28 85       	ldd	r18, Y+8	; 0x08
    1caa:	39 85       	ldd	r19, Y+9	; 0x09
    1cac:	23 30       	cpi	r18, 0x03	; 3
    1cae:	31 05       	cpc	r19, r1
    1cb0:	21 f1       	breq	.+72     	; 0x1cfa <TIMER1_initFastPWM10bit+0x192>
    1cb2:	88 85       	ldd	r24, Y+8	; 0x08
    1cb4:	99 85       	ldd	r25, Y+9	; 0x09
    1cb6:	84 30       	cpi	r24, 0x04	; 4
    1cb8:	91 05       	cpc	r25, r1
    1cba:	71 f1       	breq	.+92     	; 0x1d18 <TIMER1_initFastPWM10bit+0x1b0>
    1cbc:	3c c0       	rjmp	.+120    	; 0x1d36 <TIMER1_initFastPWM10bit+0x1ce>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1cbe:	af e4       	ldi	r26, 0x4F	; 79
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ef e4       	ldi	r30, 0x4F	; 79
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8f 7e       	andi	r24, 0xEF	; 239
    1cca:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1ccc:	af e4       	ldi	r26, 0x4F	; 79
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ef e4       	ldi	r30, 0x4F	; 79
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8f 7d       	andi	r24, 0xDF	; 223
    1cd8:	8c 93       	st	X, r24
    1cda:	2e c0       	rjmp	.+92     	; 0x1d38 <TIMER1_initFastPWM10bit+0x1d0>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1cdc:	af e4       	ldi	r26, 0x4F	; 79
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ef e4       	ldi	r30, 0x4F	; 79
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 61       	ori	r24, 0x10	; 16
    1ce8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1cea:	af e4       	ldi	r26, 0x4F	; 79
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ef e4       	ldi	r30, 0x4F	; 79
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 7d       	andi	r24, 0xDF	; 223
    1cf6:	8c 93       	st	X, r24
    1cf8:	1f c0       	rjmp	.+62     	; 0x1d38 <TIMER1_initFastPWM10bit+0x1d0>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1cfa:	af e4       	ldi	r26, 0x4F	; 79
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	ef e4       	ldi	r30, 0x4F	; 79
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 7e       	andi	r24, 0xEF	; 239
    1d06:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1d08:	af e4       	ldi	r26, 0x4F	; 79
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	ef e4       	ldi	r30, 0x4F	; 79
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	80 62       	ori	r24, 0x20	; 32
    1d14:	8c 93       	st	X, r24
    1d16:	10 c0       	rjmp	.+32     	; 0x1d38 <TIMER1_initFastPWM10bit+0x1d0>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1d18:	af e4       	ldi	r26, 0x4F	; 79
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ef e4       	ldi	r30, 0x4F	; 79
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	80 61       	ori	r24, 0x10	; 16
    1d24:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1d26:	af e4       	ldi	r26, 0x4F	; 79
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ef e4       	ldi	r30, 0x4F	; 79
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 62       	ori	r24, 0x20	; 32
    1d32:	8c 93       	st	X, r24
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <TIMER1_initFastPWM10bit+0x1d0>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1d36:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	if ((copy_TIMER1_cmpA <= 0x03FF) && (copy_TIMER1_cmpB <= 0x03FF))
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	24 e0       	ldi	r18, 0x04	; 4
    1d3e:	80 30       	cpi	r24, 0x00	; 0
    1d40:	92 07       	cpc	r25, r18
    1d42:	98 f4       	brcc	.+38     	; 0x1d6a <TIMER1_initFastPWM10bit+0x202>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	34 e0       	ldi	r19, 0x04	; 4
    1d4a:	80 30       	cpi	r24, 0x00	; 0
    1d4c:	93 07       	cpc	r25, r19
    1d4e:	68 f4       	brcc	.+26     	; 0x1d6a <TIMER1_initFastPWM10bit+0x202>
	{
		OCR1A = copy_TIMER1_cmpA;
    1d50:	ea e4       	ldi	r30, 0x4A	; 74
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    1d5c:	e8 e4       	ldi	r30, 0x48	; 72
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <TIMER1_initFastPWM10bit+0x204>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    1d6c:	af e4       	ldi	r26, 0x4F	; 79
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ef e4       	ldi	r30, 0x4F	; 79
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	87 7f       	andi	r24, 0xF7	; 247
    1d78:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    1d7a:	af e4       	ldi	r26, 0x4F	; 79
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ef e4       	ldi	r30, 0x4F	; 79
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8b 7f       	andi	r24, 0xFB	; 251
    1d86:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	64 e0       	ldi	r22, 0x04	; 4
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	65 e0       	ldi	r22, 0x05	; 5
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9e:	2b 96       	adiw	r28, 0x0b	; 11
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <TIMER1_initFastPWM_ICR1>:


StdReturnType TIMER1_initFastPWM_ICR1(uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB, uint16 copy_TIMER1_limit, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    1db0:	0f 93       	push	r16
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	2d 97       	sbiw	r28, 0x0d	; 13
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	9b 83       	std	Y+3, r25	; 0x03
    1dc8:	8a 83       	std	Y+2, r24	; 0x02
    1dca:	7d 83       	std	Y+5, r23	; 0x05
    1dcc:	6c 83       	std	Y+4, r22	; 0x04
    1dce:	5f 83       	std	Y+7, r21	; 0x07
    1dd0:	4e 83       	std	Y+6, r20	; 0x06
    1dd2:	28 87       	std	Y+8, r18	; 0x08
    1dd4:	09 87       	std	Y+9, r16	; 0x09
	StdReturnType local_errorSignal = OK_STAT;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1dda:	af e4       	ldi	r26, 0x4F	; 79
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	ef e4       	ldi	r30, 0x4F	; 79
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	8e 7f       	andi	r24, 0xFE	; 254
    1de6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1de8:	af e4       	ldi	r26, 0x4F	; 79
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	ef e4       	ldi	r30, 0x4F	; 79
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	82 60       	ori	r24, 0x02	; 2
    1df4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1df6:	ae e4       	ldi	r26, 0x4E	; 78
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	ee e4       	ldi	r30, 0x4E	; 78
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 60       	ori	r24, 0x08	; 8
    1e02:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1e04:	ae e4       	ldi	r26, 0x4E	; 78
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ee e4       	ldi	r30, 0x4E	; 78
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 61       	ori	r24, 0x10	; 16
    1e10:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    1e12:	88 85       	ldd	r24, Y+8	; 0x08
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3d 87       	std	Y+13, r19	; 0x0d
    1e1a:	2c 87       	std	Y+12, r18	; 0x0c
    1e1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	91 05       	cpc	r25, r1
    1e24:	29 f1       	breq	.+74     	; 0x1e70 <TIMER1_initFastPWM_ICR1+0xc0>
    1e26:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e28:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e2a:	23 30       	cpi	r18, 0x03	; 3
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	34 f4       	brge	.+12     	; 0x1e3c <TIMER1_initFastPWM_ICR1+0x8c>
    1e30:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e32:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	61 f0       	breq	.+24     	; 0x1e52 <TIMER1_initFastPWM_ICR1+0xa2>
    1e3a:	47 c0       	rjmp	.+142    	; 0x1eca <TIMER1_initFastPWM_ICR1+0x11a>
    1e3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e3e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e40:	23 30       	cpi	r18, 0x03	; 3
    1e42:	31 05       	cpc	r19, r1
    1e44:	21 f1       	breq	.+72     	; 0x1e8e <TIMER1_initFastPWM_ICR1+0xde>
    1e46:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e48:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e4a:	84 30       	cpi	r24, 0x04	; 4
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	71 f1       	breq	.+92     	; 0x1eac <TIMER1_initFastPWM_ICR1+0xfc>
    1e50:	3c c0       	rjmp	.+120    	; 0x1eca <TIMER1_initFastPWM_ICR1+0x11a>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1e52:	af e4       	ldi	r26, 0x4F	; 79
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	ef e4       	ldi	r30, 0x4F	; 79
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8f 7b       	andi	r24, 0xBF	; 191
    1e5e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1e60:	af e4       	ldi	r26, 0x4F	; 79
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	ef e4       	ldi	r30, 0x4F	; 79
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	8f 77       	andi	r24, 0x7F	; 127
    1e6c:	8c 93       	st	X, r24
    1e6e:	2e c0       	rjmp	.+92     	; 0x1ecc <TIMER1_initFastPWM_ICR1+0x11c>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1e70:	af e4       	ldi	r26, 0x4F	; 79
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ef e4       	ldi	r30, 0x4F	; 79
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 64       	ori	r24, 0x40	; 64
    1e7c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1e7e:	af e4       	ldi	r26, 0x4F	; 79
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ef e4       	ldi	r30, 0x4F	; 79
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 77       	andi	r24, 0x7F	; 127
    1e8a:	8c 93       	st	X, r24
    1e8c:	1f c0       	rjmp	.+62     	; 0x1ecc <TIMER1_initFastPWM_ICR1+0x11c>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1e8e:	af e4       	ldi	r26, 0x4F	; 79
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	ef e4       	ldi	r30, 0x4F	; 79
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8f 7b       	andi	r24, 0xBF	; 191
    1e9a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1e9c:	af e4       	ldi	r26, 0x4F	; 79
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ef e4       	ldi	r30, 0x4F	; 79
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 68       	ori	r24, 0x80	; 128
    1ea8:	8c 93       	st	X, r24
    1eaa:	10 c0       	rjmp	.+32     	; 0x1ecc <TIMER1_initFastPWM_ICR1+0x11c>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1eac:	af e4       	ldi	r26, 0x4F	; 79
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ef e4       	ldi	r30, 0x4F	; 79
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 64       	ori	r24, 0x40	; 64
    1eb8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1eba:	af e4       	ldi	r26, 0x4F	; 79
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	ef e4       	ldi	r30, 0x4F	; 79
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 68       	ori	r24, 0x80	; 128
    1ec6:	8c 93       	st	X, r24
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <TIMER1_initFastPWM_ICR1+0x11c>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1eca:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	3b 87       	std	Y+11, r19	; 0x0b
    1ed4:	2a 87       	std	Y+10, r18	; 0x0a
    1ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	91 05       	cpc	r25, r1
    1ede:	29 f1       	breq	.+74     	; 0x1f2a <TIMER1_initFastPWM_ICR1+0x17a>
    1ee0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ee2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ee4:	23 30       	cpi	r18, 0x03	; 3
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	34 f4       	brge	.+12     	; 0x1ef6 <TIMER1_initFastPWM_ICR1+0x146>
    1eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <TIMER1_initFastPWM_ICR1+0x15c>
    1ef4:	47 c0       	rjmp	.+142    	; 0x1f84 <TIMER1_initFastPWM_ICR1+0x1d4>
    1ef6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ef8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1efa:	23 30       	cpi	r18, 0x03	; 3
    1efc:	31 05       	cpc	r19, r1
    1efe:	21 f1       	breq	.+72     	; 0x1f48 <TIMER1_initFastPWM_ICR1+0x198>
    1f00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f04:	84 30       	cpi	r24, 0x04	; 4
    1f06:	91 05       	cpc	r25, r1
    1f08:	71 f1       	breq	.+92     	; 0x1f66 <TIMER1_initFastPWM_ICR1+0x1b6>
    1f0a:	3c c0       	rjmp	.+120    	; 0x1f84 <TIMER1_initFastPWM_ICR1+0x1d4>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1f0c:	af e4       	ldi	r26, 0x4F	; 79
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	ef e4       	ldi	r30, 0x4F	; 79
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8f 7e       	andi	r24, 0xEF	; 239
    1f18:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1f1a:	af e4       	ldi	r26, 0x4F	; 79
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	ef e4       	ldi	r30, 0x4F	; 79
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8f 7d       	andi	r24, 0xDF	; 223
    1f26:	8c 93       	st	X, r24
    1f28:	2e c0       	rjmp	.+92     	; 0x1f86 <TIMER1_initFastPWM_ICR1+0x1d6>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1f2a:	af e4       	ldi	r26, 0x4F	; 79
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	ef e4       	ldi	r30, 0x4F	; 79
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 61       	ori	r24, 0x10	; 16
    1f36:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1f38:	af e4       	ldi	r26, 0x4F	; 79
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ef e4       	ldi	r30, 0x4F	; 79
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 7d       	andi	r24, 0xDF	; 223
    1f44:	8c 93       	st	X, r24
    1f46:	1f c0       	rjmp	.+62     	; 0x1f86 <TIMER1_initFastPWM_ICR1+0x1d6>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1f48:	af e4       	ldi	r26, 0x4F	; 79
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	ef e4       	ldi	r30, 0x4F	; 79
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	8f 7e       	andi	r24, 0xEF	; 239
    1f54:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1f56:	af e4       	ldi	r26, 0x4F	; 79
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	ef e4       	ldi	r30, 0x4F	; 79
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 62       	ori	r24, 0x20	; 32
    1f62:	8c 93       	st	X, r24
    1f64:	10 c0       	rjmp	.+32     	; 0x1f86 <TIMER1_initFastPWM_ICR1+0x1d6>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1f66:	af e4       	ldi	r26, 0x4F	; 79
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ef e4       	ldi	r30, 0x4F	; 79
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 61       	ori	r24, 0x10	; 16
    1f72:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1f74:	af e4       	ldi	r26, 0x4F	; 79
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ef e4       	ldi	r30, 0x4F	; 79
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 62       	ori	r24, 0x20	; 32
    1f80:	8c 93       	st	X, r24
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <TIMER1_initFastPWM_ICR1+0x1d6>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    1f84:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	ICR1 = copy_TIMER1_limit;
    1f86:	e6 e4       	ldi	r30, 0x46	; 70
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
	if ((copy_TIMER1_cmpA <= copy_TIMER1_limit) && (copy_TIMER1_cmpB <= copy_TIMER1_limit))
    1f92:	2a 81       	ldd	r18, Y+2	; 0x02
    1f94:	3b 81       	ldd	r19, Y+3	; 0x03
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9a:	82 17       	cp	r24, r18
    1f9c:	93 07       	cpc	r25, r19
    1f9e:	a0 f0       	brcs	.+40     	; 0x1fc8 <TIMER1_initFastPWM_ICR1+0x218>
    1fa0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa8:	82 17       	cp	r24, r18
    1faa:	93 07       	cpc	r25, r19
    1fac:	68 f0       	brcs	.+26     	; 0x1fc8 <TIMER1_initFastPWM_ICR1+0x218>
	{
		OCR1A = copy_TIMER1_cmpA;
    1fae:	ea e4       	ldi	r30, 0x4A	; 74
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    1fba:	e8 e4       	ldi	r30, 0x48	; 72
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <TIMER1_initFastPWM_ICR1+0x21a>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
	/*	FORCE OUTPUT COMPARE CONFIG  */

	//CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
	//CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	64 e0       	ldi	r22, 0x04	; 4
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	65 e0       	ldi	r22, 0x05	; 5
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe0:	2d 96       	adiw	r28, 0x0d	; 13
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <TIMER1_initFastPWM_OCR1A>:

StdReturnType TIMER1_initFastPWM_OCR1A(uint16 copy_TIMER1_cmpLimitA, uint8 copy_TIMER1_cmpOutModeA)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <TIMER1_initFastPWM_OCR1A+0x6>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <TIMER1_initFastPWM_OCR1A+0x8>
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <TIMER1_initFastPWM_OCR1A+0xa>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9b 83       	std	Y+3, r25	; 0x03
    2004:	8a 83       	std	Y+2, r24	; 0x02
    2006:	6c 83       	std	Y+4, r22	; 0x04
	StdReturnType local_errorSignal = OK_STAT;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	SET_BIT(TCCR1A,TCCR1A_WGM10);
    200c:	af e4       	ldi	r26, 0x4F	; 79
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	ef e4       	ldi	r30, 0x4F	; 79
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	81 60       	ori	r24, 0x01	; 1
    2018:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    201a:	af e4       	ldi	r26, 0x4F	; 79
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	ef e4       	ldi	r30, 0x4F	; 79
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    2028:	ae e4       	ldi	r26, 0x4E	; 78
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ee e4       	ldi	r30, 0x4E	; 78
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	88 60       	ori	r24, 0x08	; 8
    2034:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2036:	ae e4       	ldi	r26, 0x4E	; 78
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	ee e4       	ldi	r30, 0x4E	; 78
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	80 61       	ori	r24, 0x10	; 16
    2042:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	3e 83       	std	Y+6, r19	; 0x06
    204c:	2d 83       	std	Y+5, r18	; 0x05
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	91 05       	cpc	r25, r1
    2056:	29 f1       	breq	.+74     	; 0x20a2 <TIMER1_initFastPWM_OCR1A+0xae>
    2058:	2d 81       	ldd	r18, Y+5	; 0x05
    205a:	3e 81       	ldd	r19, Y+6	; 0x06
    205c:	23 30       	cpi	r18, 0x03	; 3
    205e:	31 05       	cpc	r19, r1
    2060:	34 f4       	brge	.+12     	; 0x206e <TIMER1_initFastPWM_OCR1A+0x7a>
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	91 05       	cpc	r25, r1
    206a:	61 f0       	breq	.+24     	; 0x2084 <TIMER1_initFastPWM_OCR1A+0x90>
    206c:	47 c0       	rjmp	.+142    	; 0x20fc <TIMER1_initFastPWM_OCR1A+0x108>
    206e:	2d 81       	ldd	r18, Y+5	; 0x05
    2070:	3e 81       	ldd	r19, Y+6	; 0x06
    2072:	23 30       	cpi	r18, 0x03	; 3
    2074:	31 05       	cpc	r19, r1
    2076:	21 f1       	breq	.+72     	; 0x20c0 <TIMER1_initFastPWM_OCR1A+0xcc>
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	84 30       	cpi	r24, 0x04	; 4
    207e:	91 05       	cpc	r25, r1
    2080:	71 f1       	breq	.+92     	; 0x20de <TIMER1_initFastPWM_OCR1A+0xea>
    2082:	3c c0       	rjmp	.+120    	; 0x20fc <TIMER1_initFastPWM_OCR1A+0x108>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2084:	af e4       	ldi	r26, 0x4F	; 79
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	ef e4       	ldi	r30, 0x4F	; 79
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 7b       	andi	r24, 0xBF	; 191
    2090:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2092:	af e4       	ldi	r26, 0x4F	; 79
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	ef e4       	ldi	r30, 0x4F	; 79
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8f 77       	andi	r24, 0x7F	; 127
    209e:	8c 93       	st	X, r24
    20a0:	2e c0       	rjmp	.+92     	; 0x20fe <TIMER1_initFastPWM_OCR1A+0x10a>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    20a2:	af e4       	ldi	r26, 0x4F	; 79
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ef e4       	ldi	r30, 0x4F	; 79
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	80 64       	ori	r24, 0x40	; 64
    20ae:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    20b0:	af e4       	ldi	r26, 0x4F	; 79
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ef e4       	ldi	r30, 0x4F	; 79
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	8f 77       	andi	r24, 0x7F	; 127
    20bc:	8c 93       	st	X, r24
    20be:	1f c0       	rjmp	.+62     	; 0x20fe <TIMER1_initFastPWM_OCR1A+0x10a>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    20c0:	af e4       	ldi	r26, 0x4F	; 79
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	ef e4       	ldi	r30, 0x4F	; 79
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7b       	andi	r24, 0xBF	; 191
    20cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    20ce:	af e4       	ldi	r26, 0x4F	; 79
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ef e4       	ldi	r30, 0x4F	; 79
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	8c 93       	st	X, r24
    20dc:	10 c0       	rjmp	.+32     	; 0x20fe <TIMER1_initFastPWM_OCR1A+0x10a>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    20de:	af e4       	ldi	r26, 0x4F	; 79
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	ef e4       	ldi	r30, 0x4F	; 79
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	80 64       	ori	r24, 0x40	; 64
    20ea:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    20ec:	af e4       	ldi	r26, 0x4F	; 79
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ef e4       	ldi	r30, 0x4F	; 79
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	80 68       	ori	r24, 0x80	; 128
    20f8:	8c 93       	st	X, r24
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <TIMER1_initFastPWM_OCR1A+0x10a>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    20fc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR1A = copy_TIMER1_cmpLimitA;
    20fe:	ea e4       	ldi	r30, 0x4A	; 74
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    210a:	af e4       	ldi	r26, 0x4F	; 79
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	ef e4       	ldi	r30, 0x4F	; 79
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	87 7f       	andi	r24, 0xF7	; 247
    2116:	8c 93       	st	X, r24
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	65 e0       	ldi	r22, 0x05	; 5
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
}
    2124:	26 96       	adiw	r28, 0x06	; 6
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <TIMER1_initPCPWM8bit>:

StdReturnType TIMER1_initPCPWM8bit(uint8 copy_TIMER1_cmpA, uint8 copy_TIMER1_cmpB, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	29 97       	sbiw	r28, 0x09	; 9
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	8a 83       	std	Y+2, r24	; 0x02
    214c:	6b 83       	std	Y+3, r22	; 0x03
    214e:	4c 83       	std	Y+4, r20	; 0x04
    2150:	2d 83       	std	Y+5, r18	; 0x05
	StdReturnType local_errorSignal = OK_STAT;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	SET_BIT(TCCR1A,TCCR1A_WGM10);
    2156:	af e4       	ldi	r26, 0x4F	; 79
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	ef e4       	ldi	r30, 0x4F	; 79
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    2164:	af e4       	ldi	r26, 0x4F	; 79
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	ef e4       	ldi	r30, 0x4F	; 79
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8d 7f       	andi	r24, 0xFD	; 253
    2170:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    2172:	ae e4       	ldi	r26, 0x4E	; 78
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ee e4       	ldi	r30, 0x4E	; 78
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	87 7f       	andi	r24, 0xF7	; 247
    217e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    2180:	ae e4       	ldi	r26, 0x4E	; 78
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ee e4       	ldi	r30, 0x4E	; 78
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8f 7e       	andi	r24, 0xEF	; 239
    218c:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	39 87       	std	Y+9, r19	; 0x09
    2196:	28 87       	std	Y+8, r18	; 0x08
    2198:	88 85       	ldd	r24, Y+8	; 0x08
    219a:	99 85       	ldd	r25, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	91 05       	cpc	r25, r1
    21a0:	29 f1       	breq	.+74     	; 0x21ec <TIMER1_initPCPWM8bit+0xb6>
    21a2:	28 85       	ldd	r18, Y+8	; 0x08
    21a4:	39 85       	ldd	r19, Y+9	; 0x09
    21a6:	23 30       	cpi	r18, 0x03	; 3
    21a8:	31 05       	cpc	r19, r1
    21aa:	34 f4       	brge	.+12     	; 0x21b8 <TIMER1_initPCPWM8bit+0x82>
    21ac:	88 85       	ldd	r24, Y+8	; 0x08
    21ae:	99 85       	ldd	r25, Y+9	; 0x09
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	91 05       	cpc	r25, r1
    21b4:	61 f0       	breq	.+24     	; 0x21ce <TIMER1_initPCPWM8bit+0x98>
    21b6:	47 c0       	rjmp	.+142    	; 0x2246 <TIMER1_initPCPWM8bit+0x110>
    21b8:	28 85       	ldd	r18, Y+8	; 0x08
    21ba:	39 85       	ldd	r19, Y+9	; 0x09
    21bc:	23 30       	cpi	r18, 0x03	; 3
    21be:	31 05       	cpc	r19, r1
    21c0:	21 f1       	breq	.+72     	; 0x220a <TIMER1_initPCPWM8bit+0xd4>
    21c2:	88 85       	ldd	r24, Y+8	; 0x08
    21c4:	99 85       	ldd	r25, Y+9	; 0x09
    21c6:	84 30       	cpi	r24, 0x04	; 4
    21c8:	91 05       	cpc	r25, r1
    21ca:	71 f1       	breq	.+92     	; 0x2228 <TIMER1_initPCPWM8bit+0xf2>
    21cc:	3c c0       	rjmp	.+120    	; 0x2246 <TIMER1_initPCPWM8bit+0x110>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    21ce:	af e4       	ldi	r26, 0x4F	; 79
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	ef e4       	ldi	r30, 0x4F	; 79
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	8f 7b       	andi	r24, 0xBF	; 191
    21da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    21dc:	af e4       	ldi	r26, 0x4F	; 79
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	ef e4       	ldi	r30, 0x4F	; 79
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 77       	andi	r24, 0x7F	; 127
    21e8:	8c 93       	st	X, r24
    21ea:	2e c0       	rjmp	.+92     	; 0x2248 <TIMER1_initPCPWM8bit+0x112>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    21ec:	af e4       	ldi	r26, 0x4F	; 79
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	ef e4       	ldi	r30, 0x4F	; 79
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	80 64       	ori	r24, 0x40	; 64
    21f8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    21fa:	af e4       	ldi	r26, 0x4F	; 79
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	ef e4       	ldi	r30, 0x4F	; 79
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8f 77       	andi	r24, 0x7F	; 127
    2206:	8c 93       	st	X, r24
    2208:	1f c0       	rjmp	.+62     	; 0x2248 <TIMER1_initPCPWM8bit+0x112>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    220a:	af e4       	ldi	r26, 0x4F	; 79
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ef e4       	ldi	r30, 0x4F	; 79
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8f 7b       	andi	r24, 0xBF	; 191
    2216:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2218:	af e4       	ldi	r26, 0x4F	; 79
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ef e4       	ldi	r30, 0x4F	; 79
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	80 68       	ori	r24, 0x80	; 128
    2224:	8c 93       	st	X, r24
    2226:	10 c0       	rjmp	.+32     	; 0x2248 <TIMER1_initPCPWM8bit+0x112>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2228:	af e4       	ldi	r26, 0x4F	; 79
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	ef e4       	ldi	r30, 0x4F	; 79
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 64       	ori	r24, 0x40	; 64
    2234:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2236:	af e4       	ldi	r26, 0x4F	; 79
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	ef e4       	ldi	r30, 0x4F	; 79
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 68       	ori	r24, 0x80	; 128
    2242:	8c 93       	st	X, r24
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <TIMER1_initPCPWM8bit+0x112>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2246:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	3f 83       	std	Y+7, r19	; 0x07
    2250:	2e 83       	std	Y+6, r18	; 0x06
    2252:	8e 81       	ldd	r24, Y+6	; 0x06
    2254:	9f 81       	ldd	r25, Y+7	; 0x07
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	91 05       	cpc	r25, r1
    225a:	29 f1       	breq	.+74     	; 0x22a6 <TIMER1_initPCPWM8bit+0x170>
    225c:	2e 81       	ldd	r18, Y+6	; 0x06
    225e:	3f 81       	ldd	r19, Y+7	; 0x07
    2260:	23 30       	cpi	r18, 0x03	; 3
    2262:	31 05       	cpc	r19, r1
    2264:	34 f4       	brge	.+12     	; 0x2272 <TIMER1_initPCPWM8bit+0x13c>
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	91 05       	cpc	r25, r1
    226e:	61 f0       	breq	.+24     	; 0x2288 <TIMER1_initPCPWM8bit+0x152>
    2270:	47 c0       	rjmp	.+142    	; 0x2300 <TIMER1_initPCPWM8bit+0x1ca>
    2272:	2e 81       	ldd	r18, Y+6	; 0x06
    2274:	3f 81       	ldd	r19, Y+7	; 0x07
    2276:	23 30       	cpi	r18, 0x03	; 3
    2278:	31 05       	cpc	r19, r1
    227a:	21 f1       	breq	.+72     	; 0x22c4 <TIMER1_initPCPWM8bit+0x18e>
    227c:	8e 81       	ldd	r24, Y+6	; 0x06
    227e:	9f 81       	ldd	r25, Y+7	; 0x07
    2280:	84 30       	cpi	r24, 0x04	; 4
    2282:	91 05       	cpc	r25, r1
    2284:	71 f1       	breq	.+92     	; 0x22e2 <TIMER1_initPCPWM8bit+0x1ac>
    2286:	3c c0       	rjmp	.+120    	; 0x2300 <TIMER1_initPCPWM8bit+0x1ca>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    2288:	af e4       	ldi	r26, 0x4F	; 79
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ef e4       	ldi	r30, 0x4F	; 79
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 7e       	andi	r24, 0xEF	; 239
    2294:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 7d       	andi	r24, 0xDF	; 223
    22a2:	8c 93       	st	X, r24
    22a4:	2e c0       	rjmp	.+92     	; 0x2302 <TIMER1_initPCPWM8bit+0x1cc>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    22a6:	af e4       	ldi	r26, 0x4F	; 79
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ef e4       	ldi	r30, 0x4F	; 79
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 61       	ori	r24, 0x10	; 16
    22b2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    22b4:	af e4       	ldi	r26, 0x4F	; 79
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	ef e4       	ldi	r30, 0x4F	; 79
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8f 7d       	andi	r24, 0xDF	; 223
    22c0:	8c 93       	st	X, r24
    22c2:	1f c0       	rjmp	.+62     	; 0x2302 <TIMER1_initPCPWM8bit+0x1cc>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    22c4:	af e4       	ldi	r26, 0x4F	; 79
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ef e4       	ldi	r30, 0x4F	; 79
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 7e       	andi	r24, 0xEF	; 239
    22d0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    22d2:	af e4       	ldi	r26, 0x4F	; 79
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ef e4       	ldi	r30, 0x4F	; 79
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	80 62       	ori	r24, 0x20	; 32
    22de:	8c 93       	st	X, r24
    22e0:	10 c0       	rjmp	.+32     	; 0x2302 <TIMER1_initPCPWM8bit+0x1cc>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    22e2:	af e4       	ldi	r26, 0x4F	; 79
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ef e4       	ldi	r30, 0x4F	; 79
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 61       	ori	r24, 0x10	; 16
    22ee:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    22f0:	af e4       	ldi	r26, 0x4F	; 79
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ef e4       	ldi	r30, 0x4F	; 79
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	80 62       	ori	r24, 0x20	; 32
    22fc:	8c 93       	st	X, r24
    22fe:	01 c0       	rjmp	.+2      	; 0x2302 <TIMER1_initPCPWM8bit+0x1cc>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2300:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR1A = copy_TIMER1_cmpA;
    2302:	ea e4       	ldi	r30, 0x4A	; 74
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
	OCR1B = copy_TIMER1_cmpB;
    2310:	e8 e4       	ldi	r30, 0x48	; 72
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    231e:	af e4       	ldi	r26, 0x4F	; 79
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	ef e4       	ldi	r30, 0x4F	; 79
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	87 7f       	andi	r24, 0xF7	; 247
    232a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    232c:	af e4       	ldi	r26, 0x4F	; 79
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ef e4       	ldi	r30, 0x4F	; 79
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8b 7f       	andi	r24, 0xFB	; 251
    2338:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	64 e0       	ldi	r22, 0x04	; 4
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    2344:	83 e0       	ldi	r24, 0x03	; 3
    2346:	65 e0       	ldi	r22, 0x05	; 5
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2350:	29 96       	adiw	r28, 0x09	; 9
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <TIMER1_initPCPWM9bit>:

StdReturnType TIMER1_initPCPWM9bit(uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	2b 97       	sbiw	r28, 0x0b	; 11
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	9b 83       	std	Y+3, r25	; 0x03
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	7d 83       	std	Y+5, r23	; 0x05
    237c:	6c 83       	std	Y+4, r22	; 0x04
    237e:	4e 83       	std	Y+6, r20	; 0x06
    2380:	2f 83       	std	Y+7, r18	; 0x07
	StdReturnType local_errorSignal = OK_STAT;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */

	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2386:	af e4       	ldi	r26, 0x4F	; 79
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	ef e4       	ldi	r30, 0x4F	; 79
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	8e 7f       	andi	r24, 0xFE	; 254
    2392:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2394:	af e4       	ldi	r26, 0x4F	; 79
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ef e4       	ldi	r30, 0x4F	; 79
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	82 60       	ori	r24, 0x02	; 2
    23a0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    23a2:	ae e4       	ldi	r26, 0x4E	; 78
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	ee e4       	ldi	r30, 0x4E	; 78
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	87 7f       	andi	r24, 0xF7	; 247
    23ae:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    23b0:	ae e4       	ldi	r26, 0x4E	; 78
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	ee e4       	ldi	r30, 0x4E	; 78
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7e       	andi	r24, 0xEF	; 239
    23bc:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    23be:	8e 81       	ldd	r24, Y+6	; 0x06
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	3b 87       	std	Y+11, r19	; 0x0b
    23c6:	2a 87       	std	Y+10, r18	; 0x0a
    23c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    23cc:	82 30       	cpi	r24, 0x02	; 2
    23ce:	91 05       	cpc	r25, r1
    23d0:	29 f1       	breq	.+74     	; 0x241c <TIMER1_initPCPWM9bit+0xba>
    23d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    23d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    23d6:	23 30       	cpi	r18, 0x03	; 3
    23d8:	31 05       	cpc	r19, r1
    23da:	34 f4       	brge	.+12     	; 0x23e8 <TIMER1_initPCPWM9bit+0x86>
    23dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23de:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	91 05       	cpc	r25, r1
    23e4:	61 f0       	breq	.+24     	; 0x23fe <TIMER1_initPCPWM9bit+0x9c>
    23e6:	47 c0       	rjmp	.+142    	; 0x2476 <TIMER1_initPCPWM9bit+0x114>
    23e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    23ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    23ec:	23 30       	cpi	r18, 0x03	; 3
    23ee:	31 05       	cpc	r19, r1
    23f0:	21 f1       	breq	.+72     	; 0x243a <TIMER1_initPCPWM9bit+0xd8>
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	84 30       	cpi	r24, 0x04	; 4
    23f8:	91 05       	cpc	r25, r1
    23fa:	71 f1       	breq	.+92     	; 0x2458 <TIMER1_initPCPWM9bit+0xf6>
    23fc:	3c c0       	rjmp	.+120    	; 0x2476 <TIMER1_initPCPWM9bit+0x114>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    23fe:	af e4       	ldi	r26, 0x4F	; 79
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	ef e4       	ldi	r30, 0x4F	; 79
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8f 7b       	andi	r24, 0xBF	; 191
    240a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    240c:	af e4       	ldi	r26, 0x4F	; 79
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ef e4       	ldi	r30, 0x4F	; 79
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	8f 77       	andi	r24, 0x7F	; 127
    2418:	8c 93       	st	X, r24
    241a:	2e c0       	rjmp	.+92     	; 0x2478 <TIMER1_initPCPWM9bit+0x116>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    241c:	af e4       	ldi	r26, 0x4F	; 79
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	ef e4       	ldi	r30, 0x4F	; 79
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	80 64       	ori	r24, 0x40	; 64
    2428:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    242a:	af e4       	ldi	r26, 0x4F	; 79
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	ef e4       	ldi	r30, 0x4F	; 79
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8f 77       	andi	r24, 0x7F	; 127
    2436:	8c 93       	st	X, r24
    2438:	1f c0       	rjmp	.+62     	; 0x2478 <TIMER1_initPCPWM9bit+0x116>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    243a:	af e4       	ldi	r26, 0x4F	; 79
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	ef e4       	ldi	r30, 0x4F	; 79
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	8f 7b       	andi	r24, 0xBF	; 191
    2446:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2448:	af e4       	ldi	r26, 0x4F	; 79
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ef e4       	ldi	r30, 0x4F	; 79
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 68       	ori	r24, 0x80	; 128
    2454:	8c 93       	st	X, r24
    2456:	10 c0       	rjmp	.+32     	; 0x2478 <TIMER1_initPCPWM9bit+0x116>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2458:	af e4       	ldi	r26, 0x4F	; 79
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ef e4       	ldi	r30, 0x4F	; 79
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 64       	ori	r24, 0x40	; 64
    2464:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2466:	af e4       	ldi	r26, 0x4F	; 79
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ef e4       	ldi	r30, 0x4F	; 79
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	80 68       	ori	r24, 0x80	; 128
    2472:	8c 93       	st	X, r24
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <TIMER1_initPCPWM9bit+0x116>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2476:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	39 87       	std	Y+9, r19	; 0x09
    2480:	28 87       	std	Y+8, r18	; 0x08
    2482:	88 85       	ldd	r24, Y+8	; 0x08
    2484:	99 85       	ldd	r25, Y+9	; 0x09
    2486:	82 30       	cpi	r24, 0x02	; 2
    2488:	91 05       	cpc	r25, r1
    248a:	29 f1       	breq	.+74     	; 0x24d6 <TIMER1_initPCPWM9bit+0x174>
    248c:	28 85       	ldd	r18, Y+8	; 0x08
    248e:	39 85       	ldd	r19, Y+9	; 0x09
    2490:	23 30       	cpi	r18, 0x03	; 3
    2492:	31 05       	cpc	r19, r1
    2494:	34 f4       	brge	.+12     	; 0x24a2 <TIMER1_initPCPWM9bit+0x140>
    2496:	88 85       	ldd	r24, Y+8	; 0x08
    2498:	99 85       	ldd	r25, Y+9	; 0x09
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	61 f0       	breq	.+24     	; 0x24b8 <TIMER1_initPCPWM9bit+0x156>
    24a0:	47 c0       	rjmp	.+142    	; 0x2530 <TIMER1_initPCPWM9bit+0x1ce>
    24a2:	28 85       	ldd	r18, Y+8	; 0x08
    24a4:	39 85       	ldd	r19, Y+9	; 0x09
    24a6:	23 30       	cpi	r18, 0x03	; 3
    24a8:	31 05       	cpc	r19, r1
    24aa:	21 f1       	breq	.+72     	; 0x24f4 <TIMER1_initPCPWM9bit+0x192>
    24ac:	88 85       	ldd	r24, Y+8	; 0x08
    24ae:	99 85       	ldd	r25, Y+9	; 0x09
    24b0:	84 30       	cpi	r24, 0x04	; 4
    24b2:	91 05       	cpc	r25, r1
    24b4:	71 f1       	breq	.+92     	; 0x2512 <TIMER1_initPCPWM9bit+0x1b0>
    24b6:	3c c0       	rjmp	.+120    	; 0x2530 <TIMER1_initPCPWM9bit+0x1ce>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    24b8:	af e4       	ldi	r26, 0x4F	; 79
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ef e4       	ldi	r30, 0x4F	; 79
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8f 7e       	andi	r24, 0xEF	; 239
    24c4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    24c6:	af e4       	ldi	r26, 0x4F	; 79
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	ef e4       	ldi	r30, 0x4F	; 79
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8f 7d       	andi	r24, 0xDF	; 223
    24d2:	8c 93       	st	X, r24
    24d4:	2e c0       	rjmp	.+92     	; 0x2532 <TIMER1_initPCPWM9bit+0x1d0>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    24d6:	af e4       	ldi	r26, 0x4F	; 79
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ef e4       	ldi	r30, 0x4F	; 79
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    24e4:	af e4       	ldi	r26, 0x4F	; 79
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ef e4       	ldi	r30, 0x4F	; 79
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8f 7d       	andi	r24, 0xDF	; 223
    24f0:	8c 93       	st	X, r24
    24f2:	1f c0       	rjmp	.+62     	; 0x2532 <TIMER1_initPCPWM9bit+0x1d0>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    24f4:	af e4       	ldi	r26, 0x4F	; 79
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	ef e4       	ldi	r30, 0x4F	; 79
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8f 7e       	andi	r24, 0xEF	; 239
    2500:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2502:	af e4       	ldi	r26, 0x4F	; 79
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	ef e4       	ldi	r30, 0x4F	; 79
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	80 62       	ori	r24, 0x20	; 32
    250e:	8c 93       	st	X, r24
    2510:	10 c0       	rjmp	.+32     	; 0x2532 <TIMER1_initPCPWM9bit+0x1d0>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2512:	af e4       	ldi	r26, 0x4F	; 79
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	ef e4       	ldi	r30, 0x4F	; 79
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	80 61       	ori	r24, 0x10	; 16
    251e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2520:	af e4       	ldi	r26, 0x4F	; 79
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	ef e4       	ldi	r30, 0x4F	; 79
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	80 62       	ori	r24, 0x20	; 32
    252c:	8c 93       	st	X, r24
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <TIMER1_initPCPWM9bit+0x1d0>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2530:	19 82       	std	Y+1, r1	; 0x01
		break;
	}


	if ((copy_TIMER1_cmpA <= 0x01FF) && (copy_TIMER1_cmpB <= 0x01FF))
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	22 e0       	ldi	r18, 0x02	; 2
    2538:	80 30       	cpi	r24, 0x00	; 0
    253a:	92 07       	cpc	r25, r18
    253c:	98 f4       	brcc	.+38     	; 0x2564 <TIMER1_initPCPWM9bit+0x202>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	32 e0       	ldi	r19, 0x02	; 2
    2544:	80 30       	cpi	r24, 0x00	; 0
    2546:	93 07       	cpc	r25, r19
    2548:	68 f4       	brcc	.+26     	; 0x2564 <TIMER1_initPCPWM9bit+0x202>
	{
		OCR1A = copy_TIMER1_cmpA;
    254a:	ea e4       	ldi	r30, 0x4A	; 74
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    2556:	e8 e4       	ldi	r30, 0x48	; 72
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	8c 81       	ldd	r24, Y+4	; 0x04
    255c:	9d 81       	ldd	r25, Y+5	; 0x05
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	01 c0       	rjmp	.+2      	; 0x2566 <TIMER1_initPCPWM9bit+0x204>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    2564:	19 82       	std	Y+1, r1	; 0x01
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    2566:	af e4       	ldi	r26, 0x4F	; 79
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ef e4       	ldi	r30, 0x4F	; 79
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	87 7f       	andi	r24, 0xF7	; 247
    2572:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    2574:	af e4       	ldi	r26, 0x4F	; 79
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	ef e4       	ldi	r30, 0x4F	; 79
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8b 7f       	andi	r24, 0xFB	; 251
    2580:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	65 e0       	ldi	r22, 0x05	; 5
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    2596:	89 81       	ldd	r24, Y+1	; 0x01
}
    2598:	2b 96       	adiw	r28, 0x0b	; 11
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <TIMER1_initPCPWM10bit>:

StdReturnType TIMER1_initPCPWM10bit(uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB, uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	2b 97       	sbiw	r28, 0x0b	; 11
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	9b 83       	std	Y+3, r25	; 0x03
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	7d 83       	std	Y+5, r23	; 0x05
    25c4:	6c 83       	std	Y+4, r22	; 0x04
    25c6:	4e 83       	std	Y+6, r20	; 0x06
    25c8:	2f 83       	std	Y+7, r18	; 0x07
	StdReturnType local_errorSignal = OK_STAT;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	SET_BIT(TCCR1A,TCCR1A_WGM10);
    25ce:	af e4       	ldi	r26, 0x4F	; 79
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ef e4       	ldi	r30, 0x4F	; 79
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	81 60       	ori	r24, 0x01	; 1
    25da:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    25dc:	af e4       	ldi	r26, 0x4F	; 79
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	ef e4       	ldi	r30, 0x4F	; 79
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	82 60       	ori	r24, 0x02	; 2
    25e8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    25ea:	ae e4       	ldi	r26, 0x4E	; 78
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	ee e4       	ldi	r30, 0x4E	; 78
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	87 7f       	andi	r24, 0xF7	; 247
    25f6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    25f8:	ae e4       	ldi	r26, 0x4E	; 78
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	ee e4       	ldi	r30, 0x4E	; 78
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8f 7e       	andi	r24, 0xEF	; 239
    2604:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    2606:	8e 81       	ldd	r24, Y+6	; 0x06
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	3b 87       	std	Y+11, r19	; 0x0b
    260e:	2a 87       	std	Y+10, r18	; 0x0a
    2610:	8a 85       	ldd	r24, Y+10	; 0x0a
    2612:	9b 85       	ldd	r25, Y+11	; 0x0b
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	91 05       	cpc	r25, r1
    2618:	29 f1       	breq	.+74     	; 0x2664 <TIMER1_initPCPWM10bit+0xba>
    261a:	2a 85       	ldd	r18, Y+10	; 0x0a
    261c:	3b 85       	ldd	r19, Y+11	; 0x0b
    261e:	23 30       	cpi	r18, 0x03	; 3
    2620:	31 05       	cpc	r19, r1
    2622:	34 f4       	brge	.+12     	; 0x2630 <TIMER1_initPCPWM10bit+0x86>
    2624:	8a 85       	ldd	r24, Y+10	; 0x0a
    2626:	9b 85       	ldd	r25, Y+11	; 0x0b
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	91 05       	cpc	r25, r1
    262c:	61 f0       	breq	.+24     	; 0x2646 <TIMER1_initPCPWM10bit+0x9c>
    262e:	47 c0       	rjmp	.+142    	; 0x26be <TIMER1_initPCPWM10bit+0x114>
    2630:	2a 85       	ldd	r18, Y+10	; 0x0a
    2632:	3b 85       	ldd	r19, Y+11	; 0x0b
    2634:	23 30       	cpi	r18, 0x03	; 3
    2636:	31 05       	cpc	r19, r1
    2638:	21 f1       	breq	.+72     	; 0x2682 <TIMER1_initPCPWM10bit+0xd8>
    263a:	8a 85       	ldd	r24, Y+10	; 0x0a
    263c:	9b 85       	ldd	r25, Y+11	; 0x0b
    263e:	84 30       	cpi	r24, 0x04	; 4
    2640:	91 05       	cpc	r25, r1
    2642:	71 f1       	breq	.+92     	; 0x26a0 <TIMER1_initPCPWM10bit+0xf6>
    2644:	3c c0       	rjmp	.+120    	; 0x26be <TIMER1_initPCPWM10bit+0x114>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2646:	af e4       	ldi	r26, 0x4F	; 79
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	ef e4       	ldi	r30, 0x4F	; 79
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	8f 7b       	andi	r24, 0xBF	; 191
    2652:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2654:	af e4       	ldi	r26, 0x4F	; 79
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	ef e4       	ldi	r30, 0x4F	; 79
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	8f 77       	andi	r24, 0x7F	; 127
    2660:	8c 93       	st	X, r24
    2662:	2e c0       	rjmp	.+92     	; 0x26c0 <TIMER1_initPCPWM10bit+0x116>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2664:	af e4       	ldi	r26, 0x4F	; 79
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ef e4       	ldi	r30, 0x4F	; 79
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	80 64       	ori	r24, 0x40	; 64
    2670:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2672:	af e4       	ldi	r26, 0x4F	; 79
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ef e4       	ldi	r30, 0x4F	; 79
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 77       	andi	r24, 0x7F	; 127
    267e:	8c 93       	st	X, r24
    2680:	1f c0       	rjmp	.+62     	; 0x26c0 <TIMER1_initPCPWM10bit+0x116>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2682:	af e4       	ldi	r26, 0x4F	; 79
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ef e4       	ldi	r30, 0x4F	; 79
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8f 7b       	andi	r24, 0xBF	; 191
    268e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2690:	af e4       	ldi	r26, 0x4F	; 79
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ef e4       	ldi	r30, 0x4F	; 79
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 68       	ori	r24, 0x80	; 128
    269c:	8c 93       	st	X, r24
    269e:	10 c0       	rjmp	.+32     	; 0x26c0 <TIMER1_initPCPWM10bit+0x116>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    26a0:	af e4       	ldi	r26, 0x4F	; 79
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	ef e4       	ldi	r30, 0x4F	; 79
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	80 64       	ori	r24, 0x40	; 64
    26ac:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    26ae:	af e4       	ldi	r26, 0x4F	; 79
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	ef e4       	ldi	r30, 0x4F	; 79
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	80 68       	ori	r24, 0x80	; 128
    26ba:	8c 93       	st	X, r24
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <TIMER1_initPCPWM10bit+0x116>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    26be:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	39 87       	std	Y+9, r19	; 0x09
    26c8:	28 87       	std	Y+8, r18	; 0x08
    26ca:	88 85       	ldd	r24, Y+8	; 0x08
    26cc:	99 85       	ldd	r25, Y+9	; 0x09
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	91 05       	cpc	r25, r1
    26d2:	29 f1       	breq	.+74     	; 0x271e <TIMER1_initPCPWM10bit+0x174>
    26d4:	28 85       	ldd	r18, Y+8	; 0x08
    26d6:	39 85       	ldd	r19, Y+9	; 0x09
    26d8:	23 30       	cpi	r18, 0x03	; 3
    26da:	31 05       	cpc	r19, r1
    26dc:	34 f4       	brge	.+12     	; 0x26ea <TIMER1_initPCPWM10bit+0x140>
    26de:	88 85       	ldd	r24, Y+8	; 0x08
    26e0:	99 85       	ldd	r25, Y+9	; 0x09
    26e2:	81 30       	cpi	r24, 0x01	; 1
    26e4:	91 05       	cpc	r25, r1
    26e6:	61 f0       	breq	.+24     	; 0x2700 <TIMER1_initPCPWM10bit+0x156>
    26e8:	47 c0       	rjmp	.+142    	; 0x2778 <TIMER1_initPCPWM10bit+0x1ce>
    26ea:	28 85       	ldd	r18, Y+8	; 0x08
    26ec:	39 85       	ldd	r19, Y+9	; 0x09
    26ee:	23 30       	cpi	r18, 0x03	; 3
    26f0:	31 05       	cpc	r19, r1
    26f2:	21 f1       	breq	.+72     	; 0x273c <TIMER1_initPCPWM10bit+0x192>
    26f4:	88 85       	ldd	r24, Y+8	; 0x08
    26f6:	99 85       	ldd	r25, Y+9	; 0x09
    26f8:	84 30       	cpi	r24, 0x04	; 4
    26fa:	91 05       	cpc	r25, r1
    26fc:	71 f1       	breq	.+92     	; 0x275a <TIMER1_initPCPWM10bit+0x1b0>
    26fe:	3c c0       	rjmp	.+120    	; 0x2778 <TIMER1_initPCPWM10bit+0x1ce>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    2700:	af e4       	ldi	r26, 0x4F	; 79
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	ef e4       	ldi	r30, 0x4F	; 79
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8f 7e       	andi	r24, 0xEF	; 239
    270c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    270e:	af e4       	ldi	r26, 0x4F	; 79
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ef e4       	ldi	r30, 0x4F	; 79
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8f 7d       	andi	r24, 0xDF	; 223
    271a:	8c 93       	st	X, r24
    271c:	2e c0       	rjmp	.+92     	; 0x277a <TIMER1_initPCPWM10bit+0x1d0>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    271e:	af e4       	ldi	r26, 0x4F	; 79
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ef e4       	ldi	r30, 0x4F	; 79
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	80 61       	ori	r24, 0x10	; 16
    272a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    272c:	af e4       	ldi	r26, 0x4F	; 79
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ef e4       	ldi	r30, 0x4F	; 79
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8f 7d       	andi	r24, 0xDF	; 223
    2738:	8c 93       	st	X, r24
    273a:	1f c0       	rjmp	.+62     	; 0x277a <TIMER1_initPCPWM10bit+0x1d0>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    273c:	af e4       	ldi	r26, 0x4F	; 79
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ef e4       	ldi	r30, 0x4F	; 79
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8f 7e       	andi	r24, 0xEF	; 239
    2748:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    274a:	af e4       	ldi	r26, 0x4F	; 79
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ef e4       	ldi	r30, 0x4F	; 79
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	80 62       	ori	r24, 0x20	; 32
    2756:	8c 93       	st	X, r24
    2758:	10 c0       	rjmp	.+32     	; 0x277a <TIMER1_initPCPWM10bit+0x1d0>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    275a:	af e4       	ldi	r26, 0x4F	; 79
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	ef e4       	ldi	r30, 0x4F	; 79
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	80 61       	ori	r24, 0x10	; 16
    2766:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2768:	af e4       	ldi	r26, 0x4F	; 79
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ef e4       	ldi	r30, 0x4F	; 79
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	80 62       	ori	r24, 0x20	; 32
    2774:	8c 93       	st	X, r24
    2776:	01 c0       	rjmp	.+2      	; 0x277a <TIMER1_initPCPWM10bit+0x1d0>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2778:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	if ((copy_TIMER1_cmpA <= 0x03FF) && (copy_TIMER1_cmpB <= 0x03FF))
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	24 e0       	ldi	r18, 0x04	; 4
    2780:	80 30       	cpi	r24, 0x00	; 0
    2782:	92 07       	cpc	r25, r18
    2784:	98 f4       	brcc	.+38     	; 0x27ac <TIMER1_initPCPWM10bit+0x202>
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	9d 81       	ldd	r25, Y+5	; 0x05
    278a:	34 e0       	ldi	r19, 0x04	; 4
    278c:	80 30       	cpi	r24, 0x00	; 0
    278e:	93 07       	cpc	r25, r19
    2790:	68 f4       	brcc	.+26     	; 0x27ac <TIMER1_initPCPWM10bit+0x202>
	{
		OCR1A = copy_TIMER1_cmpA;
    2792:	ea e4       	ldi	r30, 0x4A	; 74
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    279e:	e8 e4       	ldi	r30, 0x48	; 72
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <TIMER1_initPCPWM10bit+0x204>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    27ac:	19 82       	std	Y+1, r1	; 0x01
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    27ae:	af e4       	ldi	r26, 0x4F	; 79
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	87 7f       	andi	r24, 0xF7	; 247
    27ba:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    27bc:	af e4       	ldi	r26, 0x4F	; 79
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e4       	ldi	r30, 0x4F	; 79
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8b 7f       	andi	r24, 0xFB	; 251
    27c8:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	65 e0       	ldi	r22, 0x05	; 5
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    27de:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e0:	2b 96       	adiw	r28, 0x0b	; 11
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <TIMER1_initPCPWM_ICR1>:

StdReturnType TIMER1_initPCPWM_ICR1(uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB, uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB,uint16 copy_TIMER1_limit)
{
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	2d 97       	sbiw	r28, 0x0d	; 13
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	8a 83       	std	Y+2, r24	; 0x02
    280c:	6b 83       	std	Y+3, r22	; 0x03
    280e:	5d 83       	std	Y+5, r21	; 0x05
    2810:	4c 83       	std	Y+4, r20	; 0x04
    2812:	3f 83       	std	Y+7, r19	; 0x07
    2814:	2e 83       	std	Y+6, r18	; 0x06
    2816:	19 87       	std	Y+9, r17	; 0x09
    2818:	08 87       	std	Y+8, r16	; 0x08
	StdReturnType local_errorSignal = OK_STAT;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    281e:	af e4       	ldi	r26, 0x4F	; 79
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ef e4       	ldi	r30, 0x4F	; 79
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8e 7f       	andi	r24, 0xFE	; 254
    282a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    282c:	af e4       	ldi	r26, 0x4F	; 79
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ef e4       	ldi	r30, 0x4F	; 79
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	82 60       	ori	r24, 0x02	; 2
    2838:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    283a:	ae e4       	ldi	r26, 0x4E	; 78
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ee e4       	ldi	r30, 0x4E	; 78
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	87 7f       	andi	r24, 0xF7	; 247
    2846:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2848:	ae e4       	ldi	r26, 0x4E	; 78
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ee e4       	ldi	r30, 0x4E	; 78
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	80 61       	ori	r24, 0x10	; 16
    2854:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	3d 87       	std	Y+13, r19	; 0x0d
    285e:	2c 87       	std	Y+12, r18	; 0x0c
    2860:	8c 85       	ldd	r24, Y+12	; 0x0c
    2862:	9d 85       	ldd	r25, Y+13	; 0x0d
    2864:	82 30       	cpi	r24, 0x02	; 2
    2866:	91 05       	cpc	r25, r1
    2868:	29 f1       	breq	.+74     	; 0x28b4 <TIMER1_initPCPWM_ICR1+0xc2>
    286a:	2c 85       	ldd	r18, Y+12	; 0x0c
    286c:	3d 85       	ldd	r19, Y+13	; 0x0d
    286e:	23 30       	cpi	r18, 0x03	; 3
    2870:	31 05       	cpc	r19, r1
    2872:	34 f4       	brge	.+12     	; 0x2880 <TIMER1_initPCPWM_ICR1+0x8e>
    2874:	8c 85       	ldd	r24, Y+12	; 0x0c
    2876:	9d 85       	ldd	r25, Y+13	; 0x0d
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	91 05       	cpc	r25, r1
    287c:	61 f0       	breq	.+24     	; 0x2896 <TIMER1_initPCPWM_ICR1+0xa4>
    287e:	47 c0       	rjmp	.+142    	; 0x290e <TIMER1_initPCPWM_ICR1+0x11c>
    2880:	2c 85       	ldd	r18, Y+12	; 0x0c
    2882:	3d 85       	ldd	r19, Y+13	; 0x0d
    2884:	23 30       	cpi	r18, 0x03	; 3
    2886:	31 05       	cpc	r19, r1
    2888:	21 f1       	breq	.+72     	; 0x28d2 <TIMER1_initPCPWM_ICR1+0xe0>
    288a:	8c 85       	ldd	r24, Y+12	; 0x0c
    288c:	9d 85       	ldd	r25, Y+13	; 0x0d
    288e:	84 30       	cpi	r24, 0x04	; 4
    2890:	91 05       	cpc	r25, r1
    2892:	71 f1       	breq	.+92     	; 0x28f0 <TIMER1_initPCPWM_ICR1+0xfe>
    2894:	3c c0       	rjmp	.+120    	; 0x290e <TIMER1_initPCPWM_ICR1+0x11c>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2896:	af e4       	ldi	r26, 0x4F	; 79
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	ef e4       	ldi	r30, 0x4F	; 79
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8f 7b       	andi	r24, 0xBF	; 191
    28a2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    28a4:	af e4       	ldi	r26, 0x4F	; 79
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	ef e4       	ldi	r30, 0x4F	; 79
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8f 77       	andi	r24, 0x7F	; 127
    28b0:	8c 93       	st	X, r24
    28b2:	2e c0       	rjmp	.+92     	; 0x2910 <TIMER1_initPCPWM_ICR1+0x11e>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    28b4:	af e4       	ldi	r26, 0x4F	; 79
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ef e4       	ldi	r30, 0x4F	; 79
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	80 64       	ori	r24, 0x40	; 64
    28c0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    28c2:	af e4       	ldi	r26, 0x4F	; 79
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ef e4       	ldi	r30, 0x4F	; 79
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 77       	andi	r24, 0x7F	; 127
    28ce:	8c 93       	st	X, r24
    28d0:	1f c0       	rjmp	.+62     	; 0x2910 <TIMER1_initPCPWM_ICR1+0x11e>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    28d2:	af e4       	ldi	r26, 0x4F	; 79
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ef e4       	ldi	r30, 0x4F	; 79
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	8f 7b       	andi	r24, 0xBF	; 191
    28de:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28e0:	af e4       	ldi	r26, 0x4F	; 79
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	ef e4       	ldi	r30, 0x4F	; 79
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	80 68       	ori	r24, 0x80	; 128
    28ec:	8c 93       	st	X, r24
    28ee:	10 c0       	rjmp	.+32     	; 0x2910 <TIMER1_initPCPWM_ICR1+0x11e>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    28f0:	af e4       	ldi	r26, 0x4F	; 79
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	ef e4       	ldi	r30, 0x4F	; 79
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	80 64       	ori	r24, 0x40	; 64
    28fc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28fe:	af e4       	ldi	r26, 0x4F	; 79
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	ef e4       	ldi	r30, 0x4F	; 79
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	80 68       	ori	r24, 0x80	; 128
    290a:	8c 93       	st	X, r24
    290c:	01 c0       	rjmp	.+2      	; 0x2910 <TIMER1_initPCPWM_ICR1+0x11e>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    290e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3b 87       	std	Y+11, r19	; 0x0b
    2918:	2a 87       	std	Y+10, r18	; 0x0a
    291a:	8a 85       	ldd	r24, Y+10	; 0x0a
    291c:	9b 85       	ldd	r25, Y+11	; 0x0b
    291e:	82 30       	cpi	r24, 0x02	; 2
    2920:	91 05       	cpc	r25, r1
    2922:	29 f1       	breq	.+74     	; 0x296e <TIMER1_initPCPWM_ICR1+0x17c>
    2924:	2a 85       	ldd	r18, Y+10	; 0x0a
    2926:	3b 85       	ldd	r19, Y+11	; 0x0b
    2928:	23 30       	cpi	r18, 0x03	; 3
    292a:	31 05       	cpc	r19, r1
    292c:	34 f4       	brge	.+12     	; 0x293a <TIMER1_initPCPWM_ICR1+0x148>
    292e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2930:	9b 85       	ldd	r25, Y+11	; 0x0b
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	61 f0       	breq	.+24     	; 0x2950 <TIMER1_initPCPWM_ICR1+0x15e>
    2938:	47 c0       	rjmp	.+142    	; 0x29c8 <TIMER1_initPCPWM_ICR1+0x1d6>
    293a:	2a 85       	ldd	r18, Y+10	; 0x0a
    293c:	3b 85       	ldd	r19, Y+11	; 0x0b
    293e:	23 30       	cpi	r18, 0x03	; 3
    2940:	31 05       	cpc	r19, r1
    2942:	21 f1       	breq	.+72     	; 0x298c <TIMER1_initPCPWM_ICR1+0x19a>
    2944:	8a 85       	ldd	r24, Y+10	; 0x0a
    2946:	9b 85       	ldd	r25, Y+11	; 0x0b
    2948:	84 30       	cpi	r24, 0x04	; 4
    294a:	91 05       	cpc	r25, r1
    294c:	71 f1       	breq	.+92     	; 0x29aa <TIMER1_initPCPWM_ICR1+0x1b8>
    294e:	3c c0       	rjmp	.+120    	; 0x29c8 <TIMER1_initPCPWM_ICR1+0x1d6>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    2950:	af e4       	ldi	r26, 0x4F	; 79
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ef e4       	ldi	r30, 0x4F	; 79
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	8f 7e       	andi	r24, 0xEF	; 239
    295c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    295e:	af e4       	ldi	r26, 0x4F	; 79
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	ef e4       	ldi	r30, 0x4F	; 79
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8f 7d       	andi	r24, 0xDF	; 223
    296a:	8c 93       	st	X, r24
    296c:	2e c0       	rjmp	.+92     	; 0x29ca <TIMER1_initPCPWM_ICR1+0x1d8>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    296e:	af e4       	ldi	r26, 0x4F	; 79
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	ef e4       	ldi	r30, 0x4F	; 79
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	80 61       	ori	r24, 0x10	; 16
    297a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    297c:	af e4       	ldi	r26, 0x4F	; 79
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	ef e4       	ldi	r30, 0x4F	; 79
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	8f 7d       	andi	r24, 0xDF	; 223
    2988:	8c 93       	st	X, r24
    298a:	1f c0       	rjmp	.+62     	; 0x29ca <TIMER1_initPCPWM_ICR1+0x1d8>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    298c:	af e4       	ldi	r26, 0x4F	; 79
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ef e4       	ldi	r30, 0x4F	; 79
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	8f 7e       	andi	r24, 0xEF	; 239
    2998:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    299a:	af e4       	ldi	r26, 0x4F	; 79
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	ef e4       	ldi	r30, 0x4F	; 79
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	80 62       	ori	r24, 0x20	; 32
    29a6:	8c 93       	st	X, r24
    29a8:	10 c0       	rjmp	.+32     	; 0x29ca <TIMER1_initPCPWM_ICR1+0x1d8>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    29aa:	af e4       	ldi	r26, 0x4F	; 79
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	ef e4       	ldi	r30, 0x4F	; 79
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	80 61       	ori	r24, 0x10	; 16
    29b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    29b8:	af e4       	ldi	r26, 0x4F	; 79
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ef e4       	ldi	r30, 0x4F	; 79
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	80 62       	ori	r24, 0x20	; 32
    29c4:	8c 93       	st	X, r24
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <TIMER1_initPCPWM_ICR1+0x1d8>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    29c8:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	ICR1 = copy_TIMER1_limit;
    29ca:	e6 e4       	ldi	r30, 0x46	; 70
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	88 85       	ldd	r24, Y+8	; 0x08
    29d0:	99 85       	ldd	r25, Y+9	; 0x09
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	80 83       	st	Z, r24
	if ((copy_TIMER1_cmpA <= copy_TIMER1_limit) && (copy_TIMER1_cmpB <= copy_TIMER1_limit))
    29d6:	2c 81       	ldd	r18, Y+4	; 0x04
    29d8:	3d 81       	ldd	r19, Y+5	; 0x05
    29da:	88 85       	ldd	r24, Y+8	; 0x08
    29dc:	99 85       	ldd	r25, Y+9	; 0x09
    29de:	82 17       	cp	r24, r18
    29e0:	93 07       	cpc	r25, r19
    29e2:	a0 f0       	brcs	.+40     	; 0x2a0c <TIMER1_initPCPWM_ICR1+0x21a>
    29e4:	2e 81       	ldd	r18, Y+6	; 0x06
    29e6:	3f 81       	ldd	r19, Y+7	; 0x07
    29e8:	88 85       	ldd	r24, Y+8	; 0x08
    29ea:	99 85       	ldd	r25, Y+9	; 0x09
    29ec:	82 17       	cp	r24, r18
    29ee:	93 07       	cpc	r25, r19
    29f0:	68 f0       	brcs	.+26     	; 0x2a0c <TIMER1_initPCPWM_ICR1+0x21a>
	{
		OCR1A = copy_TIMER1_cmpA;
    29f2:	ea e4       	ldi	r30, 0x4A	; 74
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	8c 81       	ldd	r24, Y+4	; 0x04
    29f8:	9d 81       	ldd	r25, Y+5	; 0x05
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    29fe:	e8 e4       	ldi	r30, 0x48	; 72
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	8e 81       	ldd	r24, Y+6	; 0x06
    2a04:	9f 81       	ldd	r25, Y+7	; 0x07
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <TIMER1_initPCPWM_ICR1+0x21c>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    2a0c:	19 82       	std	Y+1, r1	; 0x01
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    2a0e:	af e4       	ldi	r26, 0x4F	; 79
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ef e4       	ldi	r30, 0x4F	; 79
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	87 7f       	andi	r24, 0xF7	; 247
    2a1a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    2a1c:	af e4       	ldi	r26, 0x4F	; 79
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	ef e4       	ldi	r30, 0x4F	; 79
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8b 7f       	andi	r24, 0xFB	; 251
    2a28:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	64 e0       	ldi	r22, 0x04	; 4
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	65 e0       	ldi	r22, 0x05	; 5
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a40:	2d 96       	adiw	r28, 0x0d	; 13
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	08 95       	ret

00002a56 <TIMER1_initPCPWM_OCR1A>:

StdReturnType TIMER1_initPCPWM_OCR1A(uint8 copy_TIMER1_cmpOutModeA, uint16 copy_TIMER1_topLimitA)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <TIMER1_initPCPWM_OCR1A+0x6>
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <TIMER1_initPCPWM_OCR1A+0x8>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <TIMER1_initPCPWM_OCR1A+0xa>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	8a 83       	std	Y+2, r24	; 0x02
    2a66:	7c 83       	std	Y+4, r23	; 0x04
    2a68:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	SET_BIT(TCCR1A,TCCR1A_WGM10);
    2a6e:	af e4       	ldi	r26, 0x4F	; 79
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ef e4       	ldi	r30, 0x4F	; 79
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	81 60       	ori	r24, 0x01	; 1
    2a7a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2a7c:	af e4       	ldi	r26, 0x4F	; 79
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	ef e4       	ldi	r30, 0x4F	; 79
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	82 60       	ori	r24, 0x02	; 2
    2a88:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    2a8a:	ae e4       	ldi	r26, 0x4E	; 78
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	ee e4       	ldi	r30, 0x4E	; 78
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	87 7f       	andi	r24, 0xF7	; 247
    2a96:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2a98:	ae e4       	ldi	r26, 0x4E	; 78
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	ee e4       	ldi	r30, 0x4E	; 78
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	80 61       	ori	r24, 0x10	; 16
    2aa4:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	3e 83       	std	Y+6, r19	; 0x06
    2aae:	2d 83       	std	Y+5, r18	; 0x05
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	29 f1       	breq	.+74     	; 0x2b04 <TIMER1_initPCPWM_OCR1A+0xae>
    2aba:	2d 81       	ldd	r18, Y+5	; 0x05
    2abc:	3e 81       	ldd	r19, Y+6	; 0x06
    2abe:	23 30       	cpi	r18, 0x03	; 3
    2ac0:	31 05       	cpc	r19, r1
    2ac2:	34 f4       	brge	.+12     	; 0x2ad0 <TIMER1_initPCPWM_OCR1A+0x7a>
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	91 05       	cpc	r25, r1
    2acc:	61 f0       	breq	.+24     	; 0x2ae6 <TIMER1_initPCPWM_OCR1A+0x90>
    2ace:	47 c0       	rjmp	.+142    	; 0x2b5e <TIMER1_initPCPWM_OCR1A+0x108>
    2ad0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ad2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ad4:	23 30       	cpi	r18, 0x03	; 3
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	21 f1       	breq	.+72     	; 0x2b22 <TIMER1_initPCPWM_OCR1A+0xcc>
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	84 30       	cpi	r24, 0x04	; 4
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	71 f1       	breq	.+92     	; 0x2b40 <TIMER1_initPCPWM_OCR1A+0xea>
    2ae4:	3c c0       	rjmp	.+120    	; 0x2b5e <TIMER1_initPCPWM_OCR1A+0x108>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2ae6:	af e4       	ldi	r26, 0x4F	; 79
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	ef e4       	ldi	r30, 0x4F	; 79
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	8f 7b       	andi	r24, 0xBF	; 191
    2af2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2af4:	af e4       	ldi	r26, 0x4F	; 79
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	ef e4       	ldi	r30, 0x4F	; 79
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	8f 77       	andi	r24, 0x7F	; 127
    2b00:	8c 93       	st	X, r24
    2b02:	2e c0       	rjmp	.+92     	; 0x2b60 <TIMER1_initPCPWM_OCR1A+0x10a>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2b04:	af e4       	ldi	r26, 0x4F	; 79
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	ef e4       	ldi	r30, 0x4F	; 79
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	80 64       	ori	r24, 0x40	; 64
    2b10:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2b12:	af e4       	ldi	r26, 0x4F	; 79
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ef e4       	ldi	r30, 0x4F	; 79
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8f 77       	andi	r24, 0x7F	; 127
    2b1e:	8c 93       	st	X, r24
    2b20:	1f c0       	rjmp	.+62     	; 0x2b60 <TIMER1_initPCPWM_OCR1A+0x10a>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2b22:	af e4       	ldi	r26, 0x4F	; 79
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	ef e4       	ldi	r30, 0x4F	; 79
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	8f 7b       	andi	r24, 0xBF	; 191
    2b2e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2b30:	af e4       	ldi	r26, 0x4F	; 79
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ef e4       	ldi	r30, 0x4F	; 79
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	80 68       	ori	r24, 0x80	; 128
    2b3c:	8c 93       	st	X, r24
    2b3e:	10 c0       	rjmp	.+32     	; 0x2b60 <TIMER1_initPCPWM_OCR1A+0x10a>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2b40:	af e4       	ldi	r26, 0x4F	; 79
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	ef e4       	ldi	r30, 0x4F	; 79
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 64       	ori	r24, 0x40	; 64
    2b4c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2b4e:	af e4       	ldi	r26, 0x4F	; 79
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	ef e4       	ldi	r30, 0x4F	; 79
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	80 68       	ori	r24, 0x80	; 128
    2b5a:	8c 93       	st	X, r24
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <TIMER1_initPCPWM_OCR1A+0x10a>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2b5e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	OCR1A = copy_TIMER1_cmpOutModeA;
    2b60:	ea e4       	ldi	r30, 0x4A	; 74
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    2b6e:	af e4       	ldi	r26, 0x4F	; 79
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ef e4       	ldi	r30, 0x4F	; 79
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	87 7f       	andi	r24, 0xF7	; 247
    2b7a:	8c 93       	st	X, r24
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	65 e0       	ldi	r22, 0x05	; 5
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b88:	26 96       	adiw	r28, 0x06	; 6
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <TIMER1_initPFCPWM_ICR1>:

StdReturnType TIMER1_initPFCPWM_ICR1(uint8 copy_TIMER1_cmpOutModeA, uint8 copy_TIMER1_cmpOutModeB, uint16 copy_TIMER1_cmpA, uint16 copy_TIMER1_cmpB, uint16 copy_TIMER1_limit)
{
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	2d 97       	sbiw	r28, 0x0d	; 13
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	6b 83       	std	Y+3, r22	; 0x03
    2bb6:	5d 83       	std	Y+5, r21	; 0x05
    2bb8:	4c 83       	std	Y+4, r20	; 0x04
    2bba:	3f 83       	std	Y+7, r19	; 0x07
    2bbc:	2e 83       	std	Y+6, r18	; 0x06
    2bbe:	19 87       	std	Y+9, r17	; 0x09
    2bc0:	08 87       	std	Y+8, r16	; 0x08
	StdReturnType local_errorSignal = OK_STAT;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2bc6:	af e4       	ldi	r26, 0x4F	; 79
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	ef e4       	ldi	r30, 0x4F	; 79
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	8e 7f       	andi	r24, 0xFE	; 254
    2bd2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    2bd4:	af e4       	ldi	r26, 0x4F	; 79
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	ef e4       	ldi	r30, 0x4F	; 79
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8d 7f       	andi	r24, 0xFD	; 253
    2be0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    2be2:	ae e4       	ldi	r26, 0x4E	; 78
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	ee e4       	ldi	r30, 0x4E	; 78
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	87 7f       	andi	r24, 0xF7	; 247
    2bee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2bf0:	ae e4       	ldi	r26, 0x4E	; 78
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	ee e4       	ldi	r30, 0x4E	; 78
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 61       	ori	r24, 0x10	; 16
    2bfc:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	3d 87       	std	Y+13, r19	; 0x0d
    2c06:	2c 87       	std	Y+12, r18	; 0x0c
    2c08:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	91 05       	cpc	r25, r1
    2c10:	29 f1       	breq	.+74     	; 0x2c5c <TIMER1_initPFCPWM_ICR1+0xc2>
    2c12:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c14:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c16:	23 30       	cpi	r18, 0x03	; 3
    2c18:	31 05       	cpc	r19, r1
    2c1a:	34 f4       	brge	.+12     	; 0x2c28 <TIMER1_initPFCPWM_ICR1+0x8e>
    2c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c20:	81 30       	cpi	r24, 0x01	; 1
    2c22:	91 05       	cpc	r25, r1
    2c24:	61 f0       	breq	.+24     	; 0x2c3e <TIMER1_initPFCPWM_ICR1+0xa4>
    2c26:	47 c0       	rjmp	.+142    	; 0x2cb6 <TIMER1_initPFCPWM_ICR1+0x11c>
    2c28:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c2c:	23 30       	cpi	r18, 0x03	; 3
    2c2e:	31 05       	cpc	r19, r1
    2c30:	21 f1       	breq	.+72     	; 0x2c7a <TIMER1_initPFCPWM_ICR1+0xe0>
    2c32:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c34:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c36:	84 30       	cpi	r24, 0x04	; 4
    2c38:	91 05       	cpc	r25, r1
    2c3a:	71 f1       	breq	.+92     	; 0x2c98 <TIMER1_initPFCPWM_ICR1+0xfe>
    2c3c:	3c c0       	rjmp	.+120    	; 0x2cb6 <TIMER1_initPFCPWM_ICR1+0x11c>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2c3e:	af e4       	ldi	r26, 0x4F	; 79
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	ef e4       	ldi	r30, 0x4F	; 79
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 7b       	andi	r24, 0xBF	; 191
    2c4a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2c4c:	af e4       	ldi	r26, 0x4F	; 79
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	ef e4       	ldi	r30, 0x4F	; 79
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	8f 77       	andi	r24, 0x7F	; 127
    2c58:	8c 93       	st	X, r24
    2c5a:	2e c0       	rjmp	.+92     	; 0x2cb8 <TIMER1_initPFCPWM_ICR1+0x11e>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2c5c:	af e4       	ldi	r26, 0x4F	; 79
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	ef e4       	ldi	r30, 0x4F	; 79
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	80 64       	ori	r24, 0x40	; 64
    2c68:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2c6a:	af e4       	ldi	r26, 0x4F	; 79
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	ef e4       	ldi	r30, 0x4F	; 79
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8f 77       	andi	r24, 0x7F	; 127
    2c76:	8c 93       	st	X, r24
    2c78:	1f c0       	rjmp	.+62     	; 0x2cb8 <TIMER1_initPFCPWM_ICR1+0x11e>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2c7a:	af e4       	ldi	r26, 0x4F	; 79
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	ef e4       	ldi	r30, 0x4F	; 79
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	8f 7b       	andi	r24, 0xBF	; 191
    2c86:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2c88:	af e4       	ldi	r26, 0x4F	; 79
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ef e4       	ldi	r30, 0x4F	; 79
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 68       	ori	r24, 0x80	; 128
    2c94:	8c 93       	st	X, r24
    2c96:	10 c0       	rjmp	.+32     	; 0x2cb8 <TIMER1_initPFCPWM_ICR1+0x11e>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2c98:	af e4       	ldi	r26, 0x4F	; 79
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	ef e4       	ldi	r30, 0x4F	; 79
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	80 64       	ori	r24, 0x40	; 64
    2ca4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2ca6:	af e4       	ldi	r26, 0x4F	; 79
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	ef e4       	ldi	r30, 0x4F	; 79
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	80 68       	ori	r24, 0x80	; 128
    2cb2:	8c 93       	st	X, r24
    2cb4:	01 c0       	rjmp	.+2      	; 0x2cb8 <TIMER1_initPFCPWM_ICR1+0x11e>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2cb6:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	switch (copy_TIMER1_cmpOutModeB)
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	3b 87       	std	Y+11, r19	; 0x0b
    2cc0:	2a 87       	std	Y+10, r18	; 0x0a
    2cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc6:	82 30       	cpi	r24, 0x02	; 2
    2cc8:	91 05       	cpc	r25, r1
    2cca:	29 f1       	breq	.+74     	; 0x2d16 <TIMER1_initPFCPWM_ICR1+0x17c>
    2ccc:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cce:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cd0:	23 30       	cpi	r18, 0x03	; 3
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	34 f4       	brge	.+12     	; 0x2ce2 <TIMER1_initPFCPWM_ICR1+0x148>
    2cd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	91 05       	cpc	r25, r1
    2cde:	61 f0       	breq	.+24     	; 0x2cf8 <TIMER1_initPFCPWM_ICR1+0x15e>
    2ce0:	47 c0       	rjmp	.+142    	; 0x2d70 <TIMER1_initPFCPWM_ICR1+0x1d6>
    2ce2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ce4:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ce6:	23 30       	cpi	r18, 0x03	; 3
    2ce8:	31 05       	cpc	r19, r1
    2cea:	21 f1       	breq	.+72     	; 0x2d34 <TIMER1_initPFCPWM_ICR1+0x19a>
    2cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cf0:	84 30       	cpi	r24, 0x04	; 4
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	71 f1       	breq	.+92     	; 0x2d52 <TIMER1_initPFCPWM_ICR1+0x1b8>
    2cf6:	3c c0       	rjmp	.+120    	; 0x2d70 <TIMER1_initPFCPWM_ICR1+0x1d6>
	{
	case T1B_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    2cf8:	af e4       	ldi	r26, 0x4F	; 79
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	ef e4       	ldi	r30, 0x4F	; 79
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	8f 7e       	andi	r24, 0xEF	; 239
    2d04:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    2d06:	af e4       	ldi	r26, 0x4F	; 79
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	ef e4       	ldi	r30, 0x4F	; 79
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	8f 7d       	andi	r24, 0xDF	; 223
    2d12:	8c 93       	st	X, r24
    2d14:	2e c0       	rjmp	.+92     	; 0x2d72 <TIMER1_initPFCPWM_ICR1+0x1d8>
		break;
	case T1B_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2d16:	af e4       	ldi	r26, 0x4F	; 79
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ef e4       	ldi	r30, 0x4F	; 79
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 61       	ori	r24, 0x10	; 16
    2d22:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    2d24:	af e4       	ldi	r26, 0x4F	; 79
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	ef e4       	ldi	r30, 0x4F	; 79
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	8f 7d       	andi	r24, 0xDF	; 223
    2d30:	8c 93       	st	X, r24
    2d32:	1f c0       	rjmp	.+62     	; 0x2d72 <TIMER1_initPFCPWM_ICR1+0x1d8>
		break;
	case T1B_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    2d34:	af e4       	ldi	r26, 0x4F	; 79
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	ef e4       	ldi	r30, 0x4F	; 79
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8f 7e       	andi	r24, 0xEF	; 239
    2d40:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2d42:	af e4       	ldi	r26, 0x4F	; 79
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	ef e4       	ldi	r30, 0x4F	; 79
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 62       	ori	r24, 0x20	; 32
    2d4e:	8c 93       	st	X, r24
    2d50:	10 c0       	rjmp	.+32     	; 0x2d72 <TIMER1_initPFCPWM_ICR1+0x1d8>
		break;
	case T1B_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2d52:	af e4       	ldi	r26, 0x4F	; 79
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	ef e4       	ldi	r30, 0x4F	; 79
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 61       	ori	r24, 0x10	; 16
    2d5e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2d60:	af e4       	ldi	r26, 0x4F	; 79
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	ef e4       	ldi	r30, 0x4F	; 79
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	80 62       	ori	r24, 0x20	; 32
    2d6c:	8c 93       	st	X, r24
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <TIMER1_initPFCPWM_ICR1+0x1d8>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2d70:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	ICR1 = copy_TIMER1_limit;
    2d72:	e6 e4       	ldi	r30, 0x46	; 70
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	88 85       	ldd	r24, Y+8	; 0x08
    2d78:	99 85       	ldd	r25, Y+9	; 0x09
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
	if ((copy_TIMER1_cmpA <= copy_TIMER1_limit) && (copy_TIMER1_cmpB <= copy_TIMER1_limit))
    2d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d80:	3d 81       	ldd	r19, Y+5	; 0x05
    2d82:	88 85       	ldd	r24, Y+8	; 0x08
    2d84:	99 85       	ldd	r25, Y+9	; 0x09
    2d86:	82 17       	cp	r24, r18
    2d88:	93 07       	cpc	r25, r19
    2d8a:	a0 f0       	brcs	.+40     	; 0x2db4 <TIMER1_initPFCPWM_ICR1+0x21a>
    2d8c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d8e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d90:	88 85       	ldd	r24, Y+8	; 0x08
    2d92:	99 85       	ldd	r25, Y+9	; 0x09
    2d94:	82 17       	cp	r24, r18
    2d96:	93 07       	cpc	r25, r19
    2d98:	68 f0       	brcs	.+26     	; 0x2db4 <TIMER1_initPFCPWM_ICR1+0x21a>
	{
		OCR1A = copy_TIMER1_cmpA;
    2d9a:	ea e4       	ldi	r30, 0x4A	; 74
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	9d 81       	ldd	r25, Y+5	; 0x05
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
		OCR1B = copy_TIMER1_cmpB;
    2da6:	e8 e4       	ldi	r30, 0x48	; 72
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dac:	9f 81       	ldd	r25, Y+7	; 0x07
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	01 c0       	rjmp	.+2      	; 0x2db6 <TIMER1_initPFCPWM_ICR1+0x21c>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    2db4:	19 82       	std	Y+1, r1	; 0x01
	}

	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    2db6:	af e4       	ldi	r26, 0x4F	; 79
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ef e4       	ldi	r30, 0x4F	; 79
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	87 7f       	andi	r24, 0xF7	; 247
    2dc2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_FOC1B);
    2dc4:	af e4       	ldi	r26, 0x4F	; 79
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8b 7f       	andi	r24, 0xFB	; 251
    2dd0:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN4,OUTPUT);		//	B
    2dd2:	83 e0       	ldi	r24, 0x03	; 3
    2dd4:	64 e0       	ldi	r22, 0x04	; 4
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	65 e0       	ldi	r22, 0x05	; 5
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de8:	2d 96       	adiw	r28, 0x0d	; 13
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <TIMER1_initPFCPWM_OCR1A>:

StdReturnType TIMER1_initPFCPWM_OCR1A(uint8 copy_TIMER1_cmpOutModeA, uint16 copy_TIMER1_topLimitA)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <TIMER1_initPFCPWM_OCR1A+0x6>
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <TIMER1_initPFCPWM_OCR1A+0x8>
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <TIMER1_initPFCPWM_OCR1A+0xa>
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	8a 83       	std	Y+2, r24	; 0x02
    2e0e:	7c 83       	std	Y+4, r23	; 0x04
    2e10:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION MODE  */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2e16:	af e4       	ldi	r26, 0x4F	; 79
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	ef e4       	ldi	r30, 0x4F	; 79
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	8e 7f       	andi	r24, 0xFE	; 254
    2e22:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2e24:	af e4       	ldi	r26, 0x4F	; 79
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	ef e4       	ldi	r30, 0x4F	; 79
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	82 60       	ori	r24, 0x02	; 2
    2e30:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    2e32:	ae e4       	ldi	r26, 0x4E	; 78
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	ee e4       	ldi	r30, 0x4E	; 78
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	88 60       	ori	r24, 0x08	; 8
    2e3e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2e40:	ae e4       	ldi	r26, 0x4E	; 78
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	ee e4       	ldi	r30, 0x4E	; 78
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	80 61       	ori	r24, 0x10	; 16
    2e4c:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE  */

	switch (copy_TIMER1_cmpOutModeA)
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	3e 83       	std	Y+6, r19	; 0x06
    2e56:	2d 83       	std	Y+5, r18	; 0x05
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	82 30       	cpi	r24, 0x02	; 2
    2e5e:	91 05       	cpc	r25, r1
    2e60:	29 f1       	breq	.+74     	; 0x2eac <TIMER1_initPFCPWM_OCR1A+0xae>
    2e62:	2d 81       	ldd	r18, Y+5	; 0x05
    2e64:	3e 81       	ldd	r19, Y+6	; 0x06
    2e66:	23 30       	cpi	r18, 0x03	; 3
    2e68:	31 05       	cpc	r19, r1
    2e6a:	34 f4       	brge	.+12     	; 0x2e78 <TIMER1_initPFCPWM_OCR1A+0x7a>
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	61 f0       	breq	.+24     	; 0x2e8e <TIMER1_initPFCPWM_OCR1A+0x90>
    2e76:	47 c0       	rjmp	.+142    	; 0x2f06 <TIMER1_initPFCPWM_OCR1A+0x108>
    2e78:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e7c:	23 30       	cpi	r18, 0x03	; 3
    2e7e:	31 05       	cpc	r19, r1
    2e80:	21 f1       	breq	.+72     	; 0x2eca <TIMER1_initPFCPWM_OCR1A+0xcc>
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	84 30       	cpi	r24, 0x04	; 4
    2e88:	91 05       	cpc	r25, r1
    2e8a:	71 f1       	breq	.+92     	; 0x2ee8 <TIMER1_initPFCPWM_OCR1A+0xea>
    2e8c:	3c c0       	rjmp	.+120    	; 0x2f06 <TIMER1_initPFCPWM_OCR1A+0x108>
	{
	case T1A_OC_DISCONNECTED:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2e8e:	af e4       	ldi	r26, 0x4F	; 79
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	ef e4       	ldi	r30, 0x4F	; 79
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	8f 7b       	andi	r24, 0xBF	; 191
    2e9a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2e9c:	af e4       	ldi	r26, 0x4F	; 79
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	ef e4       	ldi	r30, 0x4F	; 79
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8f 77       	andi	r24, 0x7F	; 127
    2ea8:	8c 93       	st	X, r24
    2eaa:	2e c0       	rjmp	.+92     	; 0x2f08 <TIMER1_initPFCPWM_OCR1A+0x10a>
		break;
	case T1A_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2eac:	af e4       	ldi	r26, 0x4F	; 79
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	ef e4       	ldi	r30, 0x4F	; 79
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	80 64       	ori	r24, 0x40	; 64
    2eb8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2eba:	af e4       	ldi	r26, 0x4F	; 79
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	ef e4       	ldi	r30, 0x4F	; 79
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	8f 77       	andi	r24, 0x7F	; 127
    2ec6:	8c 93       	st	X, r24
    2ec8:	1f c0       	rjmp	.+62     	; 0x2f08 <TIMER1_initPFCPWM_OCR1A+0x10a>
		break;
	case T1A_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2eca:	af e4       	ldi	r26, 0x4F	; 79
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	ef e4       	ldi	r30, 0x4F	; 79
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	8f 7b       	andi	r24, 0xBF	; 191
    2ed6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2ed8:	af e4       	ldi	r26, 0x4F	; 79
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	ef e4       	ldi	r30, 0x4F	; 79
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	80 68       	ori	r24, 0x80	; 128
    2ee4:	8c 93       	st	X, r24
    2ee6:	10 c0       	rjmp	.+32     	; 0x2f08 <TIMER1_initPFCPWM_OCR1A+0x10a>
		break;
	case T1A_OC_SET_ON_CMP:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2ee8:	af e4       	ldi	r26, 0x4F	; 79
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	ef e4       	ldi	r30, 0x4F	; 79
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	80 64       	ori	r24, 0x40	; 64
    2ef4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2ef6:	af e4       	ldi	r26, 0x4F	; 79
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	ef e4       	ldi	r30, 0x4F	; 79
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	80 68       	ori	r24, 0x80	; 128
    2f02:	8c 93       	st	X, r24
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <TIMER1_initPFCPWM_OCR1A+0x10a>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    2f06:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR1A = copy_TIMER1_cmpOutModeA;
    2f08:	ea e4       	ldi	r30, 0x4A	; 74
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24


	/*	FORCE OUTPUT COMPARE CONFIG  */

	CLEAR_BIT(TCCR1A,TCCR1A_FOC1A);
    2f16:	af e4       	ldi	r26, 0x4F	; 79
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	ef e4       	ldi	r30, 0x4F	; 79
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	87 7f       	andi	r24, 0xF7	; 247
    2f22:	8c 93       	st	X, r24
	DIO_setPinDirection(DIO_PORTD,PIN5,OUTPUT);		//	A
    2f24:	83 e0       	ldi	r24, 0x03	; 3
    2f26:	65 e0       	ldi	r22, 0x05	; 5
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f30:	26 96       	adiw	r28, 0x06	; 6
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <TIMER1_readValue>:

StdReturnType TIMER1_readValue(uint16 *copy_TIMER1_ptr)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <TIMER1_readValue+0x6>
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	9b 83       	std	Y+3, r25	; 0x03
    2f50:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == copy_TIMER1_ptr)
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	11 f4       	brne	.+4      	; 0x2f62 <TIMER1_readValue+0x20>
	{
		local_errorSignal = NOT_OK_STAT;
    2f5e:	19 82       	std	Y+1, r1	; 0x01
    2f60:	08 c0       	rjmp	.+16     	; 0x2f72 <TIMER1_readValue+0x30>
	}
	else
	{
		*copy_TIMER1_ptr = TCNT1;
    2f62:	ec e4       	ldi	r30, 0x4C	; 76
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
	}
	return local_errorSignal;
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <TIMER1_startTimer>:

StdReturnType TIMER1_startTimer(uint8 copy_TIMER1_prescaling)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <TIMER1_startTimer+0x6>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	89 83       	std	Y+1, r24	; 0x01
		if (copy_TIMER1_prescaling < 6)
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	86 30       	cpi	r24, 0x06	; 6
    2f94:	80 f4       	brcc	.+32     	; 0x2fb6 <TIMER1_startTimer+0x36>
		{
			TCCR1B &= 0xF8;
    2f96:	ae e4       	ldi	r26, 0x4E	; 78
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	ee e4       	ldi	r30, 0x4E	; 78
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	88 7f       	andi	r24, 0xF8	; 248
    2fa2:	8c 93       	st	X, r24
			TCCR1B |= copy_TIMER1_prescaling;
    2fa4:	ae e4       	ldi	r26, 0x4E	; 78
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	ee e4       	ldi	r30, 0x4E	; 78
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	90 81       	ld	r25, Z
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	89 2b       	or	r24, r25
    2fb2:	8c 93       	st	X, r24
    2fb4:	01 c0       	rjmp	.+2      	; 0x2fb8 <TIMER1_startTimer+0x38>
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
    2fb6:	19 82       	std	Y+1, r1	; 0x01
		}
		return local_errorSignal;
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <TIMER1_stopTimer>:

StdReturnType TIMER1_stopTimer(void)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	0f 92       	push	r0
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
	StdReturnType local_errorSignal = OK_STAT;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B &= 0xF8;
    2fd2:	ae e4       	ldi	r26, 0x4E	; 78
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	ee e4       	ldi	r30, 0x4E	; 78
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 7f       	andi	r24, 0xF8	; 248
    2fde:	8c 93       	st	X, r24
	TCCR1B |= T1_NO_CLK;
    2fe0:	ae e4       	ldi	r26, 0x4E	; 78
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	ee e4       	ldi	r30, 0x4E	; 78
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	8c 93       	st	X, r24

	return local_errorSignal;
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fee:	0f 90       	pop	r0
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <TIMER2_initNormal>:


/*		TIMER2 FUNCTIONS	*/

StdReturnType TIMER2_initNormal(uint8 copy_TIMER2_cmpOutMode)
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <TIMER2_initNormal+0x6>
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <TIMER2_initNormal+0x8>
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	CLEAR_BIT(TCCR2,TCCR2_WGM20);
    3008:	a5 e4       	ldi	r26, 0x45	; 69
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	e5 e4       	ldi	r30, 0x45	; 69
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	8f 7b       	andi	r24, 0xBF	; 191
    3014:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_WGM21);
    3016:	a5 e4       	ldi	r26, 0x45	; 69
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e5 e4       	ldi	r30, 0x45	; 69
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	87 7f       	andi	r24, 0xF7	; 247
    3022:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER2_cmpOutMode)
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	3c 83       	std	Y+4, r19	; 0x04
    302c:	2b 83       	std	Y+3, r18	; 0x03
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	82 30       	cpi	r24, 0x02	; 2
    3034:	91 05       	cpc	r25, r1
    3036:	29 f1       	breq	.+74     	; 0x3082 <TIMER2_initNormal+0x8c>
    3038:	2b 81       	ldd	r18, Y+3	; 0x03
    303a:	3c 81       	ldd	r19, Y+4	; 0x04
    303c:	23 30       	cpi	r18, 0x03	; 3
    303e:	31 05       	cpc	r19, r1
    3040:	34 f4       	brge	.+12     	; 0x304e <TIMER2_initNormal+0x58>
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	81 30       	cpi	r24, 0x01	; 1
    3048:	91 05       	cpc	r25, r1
    304a:	61 f0       	breq	.+24     	; 0x3064 <TIMER2_initNormal+0x6e>
    304c:	47 c0       	rjmp	.+142    	; 0x30dc <TIMER2_initNormal+0xe6>
    304e:	2b 81       	ldd	r18, Y+3	; 0x03
    3050:	3c 81       	ldd	r19, Y+4	; 0x04
    3052:	23 30       	cpi	r18, 0x03	; 3
    3054:	31 05       	cpc	r19, r1
    3056:	21 f1       	breq	.+72     	; 0x30a0 <TIMER2_initNormal+0xaa>
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	9c 81       	ldd	r25, Y+4	; 0x04
    305c:	84 30       	cpi	r24, 0x04	; 4
    305e:	91 05       	cpc	r25, r1
    3060:	71 f1       	breq	.+92     	; 0x30be <TIMER2_initNormal+0xc8>
    3062:	3c c0       	rjmp	.+120    	; 0x30dc <TIMER2_initNormal+0xe6>
	{
	case T2_OC_DISCONNECTED:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    3064:	a5 e4       	ldi	r26, 0x45	; 69
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e5 e4       	ldi	r30, 0x45	; 69
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	8f 7e       	andi	r24, 0xEF	; 239
    3070:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);
    3072:	a5 e4       	ldi	r26, 0x45	; 69
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e5 e4       	ldi	r30, 0x45	; 69
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	8f 7d       	andi	r24, 0xDF	; 223
    307e:	8c 93       	st	X, r24
    3080:	2e c0       	rjmp	.+92     	; 0x30de <TIMER2_initNormal+0xe8>
		break;
	case T2_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR2,TCCR2_COM20);
    3082:	a5 e4       	ldi	r26, 0x45	; 69
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e5 e4       	ldi	r30, 0x45	; 69
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	80 61       	ori	r24, 0x10	; 16
    308e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);
    3090:	a5 e4       	ldi	r26, 0x45	; 69
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e5 e4       	ldi	r30, 0x45	; 69
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	8f 7d       	andi	r24, 0xDF	; 223
    309c:	8c 93       	st	X, r24
    309e:	1f c0       	rjmp	.+62     	; 0x30de <TIMER2_initNormal+0xe8>
		break;
	case T2_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    30a0:	a5 e4       	ldi	r26, 0x45	; 69
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e5 e4       	ldi	r30, 0x45	; 69
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	8f 7e       	andi	r24, 0xEF	; 239
    30ac:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    30ae:	a5 e4       	ldi	r26, 0x45	; 69
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e5 e4       	ldi	r30, 0x45	; 69
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	80 62       	ori	r24, 0x20	; 32
    30ba:	8c 93       	st	X, r24
    30bc:	10 c0       	rjmp	.+32     	; 0x30de <TIMER2_initNormal+0xe8>
		break;
	case T2_OC_SET_ON_CMP:
		SET_BIT(TCCR2,TCCR2_COM20);
    30be:	a5 e4       	ldi	r26, 0x45	; 69
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e5 e4       	ldi	r30, 0x45	; 69
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 61       	ori	r24, 0x10	; 16
    30ca:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    30cc:	a5 e4       	ldi	r26, 0x45	; 69
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e5 e4       	ldi	r30, 0x45	; 69
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	80 62       	ori	r24, 0x20	; 32
    30d8:	8c 93       	st	X, r24
    30da:	01 c0       	rjmp	.+2      	; 0x30de <TIMER2_initNormal+0xe8>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    30dc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	SET_BIT(TCCR2,TCCR2_FOC2);
    30de:	a5 e4       	ldi	r26, 0x45	; 69
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e5 e4       	ldi	r30, 0x45	; 69
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	80 68       	ori	r24, 0x80	; 128
    30ea:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
    30ec:	83 e0       	ldi	r24, 0x03	; 3
    30ee:	67 e0       	ldi	r22, 0x07	; 7
    30f0:	41 e0       	ldi	r20, 0x01	; 1
    30f2:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <TIMER2_initCTC>:

StdReturnType TIMER2_initCTC(uint8 copy_TIMER2_limit, uint8 copy_TIMER2_cmpOutMode)
{
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	00 d0       	rcall	.+0      	; 0x310c <TIMER2_initCTC+0x6>
    310c:	00 d0       	rcall	.+0      	; 0x310e <TIMER2_initCTC+0x8>
    310e:	0f 92       	push	r0
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	8a 83       	std	Y+2, r24	; 0x02
    3116:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	CLEAR_BIT(TCCR2,TCCR2_WGM20);
    311c:	a5 e4       	ldi	r26, 0x45	; 69
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e5 e4       	ldi	r30, 0x45	; 69
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	8f 7b       	andi	r24, 0xBF	; 191
    3128:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    312a:	a5 e4       	ldi	r26, 0x45	; 69
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e5 e4       	ldi	r30, 0x45	; 69
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	88 60       	ori	r24, 0x08	; 8
    3136:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER2_cmpOutMode)
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	3d 83       	std	Y+5, r19	; 0x05
    3140:	2c 83       	std	Y+4, r18	; 0x04
    3142:	8c 81       	ldd	r24, Y+4	; 0x04
    3144:	9d 81       	ldd	r25, Y+5	; 0x05
    3146:	82 30       	cpi	r24, 0x02	; 2
    3148:	91 05       	cpc	r25, r1
    314a:	29 f1       	breq	.+74     	; 0x3196 <TIMER2_initCTC+0x90>
    314c:	2c 81       	ldd	r18, Y+4	; 0x04
    314e:	3d 81       	ldd	r19, Y+5	; 0x05
    3150:	23 30       	cpi	r18, 0x03	; 3
    3152:	31 05       	cpc	r19, r1
    3154:	34 f4       	brge	.+12     	; 0x3162 <TIMER2_initCTC+0x5c>
    3156:	8c 81       	ldd	r24, Y+4	; 0x04
    3158:	9d 81       	ldd	r25, Y+5	; 0x05
    315a:	81 30       	cpi	r24, 0x01	; 1
    315c:	91 05       	cpc	r25, r1
    315e:	61 f0       	breq	.+24     	; 0x3178 <TIMER2_initCTC+0x72>
    3160:	47 c0       	rjmp	.+142    	; 0x31f0 <TIMER2_initCTC+0xea>
    3162:	2c 81       	ldd	r18, Y+4	; 0x04
    3164:	3d 81       	ldd	r19, Y+5	; 0x05
    3166:	23 30       	cpi	r18, 0x03	; 3
    3168:	31 05       	cpc	r19, r1
    316a:	21 f1       	breq	.+72     	; 0x31b4 <TIMER2_initCTC+0xae>
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	84 30       	cpi	r24, 0x04	; 4
    3172:	91 05       	cpc	r25, r1
    3174:	71 f1       	breq	.+92     	; 0x31d2 <TIMER2_initCTC+0xcc>
    3176:	3c c0       	rjmp	.+120    	; 0x31f0 <TIMER2_initCTC+0xea>
	{
	case T2_OC_DISCONNECTED:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    3178:	a5 e4       	ldi	r26, 0x45	; 69
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	e5 e4       	ldi	r30, 0x45	; 69
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	8f 7e       	andi	r24, 0xEF	; 239
    3184:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);
    3186:	a5 e4       	ldi	r26, 0x45	; 69
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e5 e4       	ldi	r30, 0x45	; 69
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	8f 7d       	andi	r24, 0xDF	; 223
    3192:	8c 93       	st	X, r24
    3194:	2e c0       	rjmp	.+92     	; 0x31f2 <TIMER2_initCTC+0xec>
		break;
	case T2_OC_TOGGLE_ON_CMP:
		SET_BIT(TCCR2,TCCR2_COM20);
    3196:	a5 e4       	ldi	r26, 0x45	; 69
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e5 e4       	ldi	r30, 0x45	; 69
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	80 61       	ori	r24, 0x10	; 16
    31a2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);
    31a4:	a5 e4       	ldi	r26, 0x45	; 69
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e5 e4       	ldi	r30, 0x45	; 69
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8f 7d       	andi	r24, 0xDF	; 223
    31b0:	8c 93       	st	X, r24
    31b2:	1f c0       	rjmp	.+62     	; 0x31f2 <TIMER2_initCTC+0xec>
		break;
	case T2_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    31b4:	a5 e4       	ldi	r26, 0x45	; 69
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e5 e4       	ldi	r30, 0x45	; 69
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	8f 7e       	andi	r24, 0xEF	; 239
    31c0:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    31c2:	a5 e4       	ldi	r26, 0x45	; 69
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e5 e4       	ldi	r30, 0x45	; 69
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	80 62       	ori	r24, 0x20	; 32
    31ce:	8c 93       	st	X, r24
    31d0:	10 c0       	rjmp	.+32     	; 0x31f2 <TIMER2_initCTC+0xec>
		break;
	case T2_OC_SET_ON_CMP:
		SET_BIT(TCCR2,TCCR2_COM20);
    31d2:	a5 e4       	ldi	r26, 0x45	; 69
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e5 e4       	ldi	r30, 0x45	; 69
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	80 61       	ori	r24, 0x10	; 16
    31de:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    31e0:	a5 e4       	ldi	r26, 0x45	; 69
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e5 e4       	ldi	r30, 0x45	; 69
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	80 62       	ori	r24, 0x20	; 32
    31ec:	8c 93       	st	X, r24
    31ee:	01 c0       	rjmp	.+2      	; 0x31f2 <TIMER2_initCTC+0xec>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    31f0:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR2 = copy_TIMER2_limit;
    31f2:	e3 e4       	ldi	r30, 0x43	; 67
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	SET_BIT(TCCR2,TCCR2_FOC2);
    31fa:	a5 e4       	ldi	r26, 0x45	; 69
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e5 e4       	ldi	r30, 0x45	; 69
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	80 68       	ori	r24, 0x80	; 128
    3206:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
    3208:	83 e0       	ldi	r24, 0x03	; 3
    320a:	67 e0       	ldi	r22, 0x07	; 7
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    3212:	89 81       	ldd	r24, Y+1	; 0x01
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <TIMER2_initFastPWM>:

StdReturnType TIMER2_initFastPWM(uint8 copy_TIMER2_cmp, uint8 copy_TIMER2_cmpOutMode)
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <TIMER2_initFastPWM+0x6>
    322a:	00 d0       	rcall	.+0      	; 0x322c <TIMER2_initFastPWM+0x8>
    322c:	0f 92       	push	r0
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	8a 83       	std	Y+2, r24	; 0x02
    3234:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	SET_BIT(TCCR2,TCCR2_WGM20);
    323a:	a5 e4       	ldi	r26, 0x45	; 69
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e5 e4       	ldi	r30, 0x45	; 69
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	80 64       	ori	r24, 0x40	; 64
    3246:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    3248:	a5 e4       	ldi	r26, 0x45	; 69
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e5 e4       	ldi	r30, 0x45	; 69
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	88 60       	ori	r24, 0x08	; 8
    3254:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER2_cmpOutMode)
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	3d 83       	std	Y+5, r19	; 0x05
    325e:	2c 83       	std	Y+4, r18	; 0x04
    3260:	8c 81       	ldd	r24, Y+4	; 0x04
    3262:	9d 81       	ldd	r25, Y+5	; 0x05
    3264:	83 30       	cpi	r24, 0x03	; 3
    3266:	91 05       	cpc	r25, r1
    3268:	c9 f0       	breq	.+50     	; 0x329c <TIMER2_initFastPWM+0x78>
    326a:	2c 81       	ldd	r18, Y+4	; 0x04
    326c:	3d 81       	ldd	r19, Y+5	; 0x05
    326e:	24 30       	cpi	r18, 0x04	; 4
    3270:	31 05       	cpc	r19, r1
    3272:	19 f1       	breq	.+70     	; 0x32ba <TIMER2_initFastPWM+0x96>
    3274:	8c 81       	ldd	r24, Y+4	; 0x04
    3276:	9d 81       	ldd	r25, Y+5	; 0x05
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	91 05       	cpc	r25, r1
    327c:	69 f5       	brne	.+90     	; 0x32d8 <TIMER2_initFastPWM+0xb4>
	{
	case T2_OC_DISCONNECTED:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    327e:	a5 e4       	ldi	r26, 0x45	; 69
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e5 e4       	ldi	r30, 0x45	; 69
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	8f 7e       	andi	r24, 0xEF	; 239
    328a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);
    328c:	a5 e4       	ldi	r26, 0x45	; 69
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e5 e4       	ldi	r30, 0x45	; 69
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	8f 7d       	andi	r24, 0xDF	; 223
    3298:	8c 93       	st	X, r24
    329a:	1f c0       	rjmp	.+62     	; 0x32da <TIMER2_initFastPWM+0xb6>
		break;
	case T2_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    329c:	a5 e4       	ldi	r26, 0x45	; 69
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	e5 e4       	ldi	r30, 0x45	; 69
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	8f 7e       	andi	r24, 0xEF	; 239
    32a8:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    32aa:	a5 e4       	ldi	r26, 0x45	; 69
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	e5 e4       	ldi	r30, 0x45	; 69
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	80 62       	ori	r24, 0x20	; 32
    32b6:	8c 93       	st	X, r24
    32b8:	10 c0       	rjmp	.+32     	; 0x32da <TIMER2_initFastPWM+0xb6>
		break;
	case T2_OC_SET_ON_CMP:
		SET_BIT(TCCR2,TCCR2_COM20);
    32ba:	a5 e4       	ldi	r26, 0x45	; 69
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	e5 e4       	ldi	r30, 0x45	; 69
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	80 61       	ori	r24, 0x10	; 16
    32c6:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    32c8:	a5 e4       	ldi	r26, 0x45	; 69
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	e5 e4       	ldi	r30, 0x45	; 69
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	80 62       	ori	r24, 0x20	; 32
    32d4:	8c 93       	st	X, r24
    32d6:	01 c0       	rjmp	.+2      	; 0x32da <TIMER2_initFastPWM+0xb6>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    32d8:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR2 = copy_TIMER2_cmp;
    32da:	e3 e4       	ldi	r30, 0x43	; 67
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	CLEAR_BIT(TCCR2,TCCR2_FOC2);
    32e2:	a5 e4       	ldi	r26, 0x45	; 69
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e5 e4       	ldi	r30, 0x45	; 69
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	8f 77       	andi	r24, 0x7F	; 127
    32ee:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
    32f0:	83 e0       	ldi	r24, 0x03	; 3
    32f2:	67 e0       	ldi	r22, 0x07	; 7
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <TIMER2_initPCPWM>:

StdReturnType TIMER2_initPCPWM(uint8 copy_TIMER2_cmp, uint8 copy_TIMER2_cmpOutMode)
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	00 d0       	rcall	.+0      	; 0x3312 <TIMER2_initPCPWM+0x6>
    3312:	00 d0       	rcall	.+0      	; 0x3314 <TIMER2_initPCPWM+0x8>
    3314:	0f 92       	push	r0
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	8a 83       	std	Y+2, r24	; 0x02
    331c:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	89 83       	std	Y+1, r24	; 0x01

	/*	WAVEFORM GENERATION FORM 	*/

	SET_BIT(TCCR2,TCCR2_WGM20);
    3322:	a5 e4       	ldi	r26, 0x45	; 69
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    3326:	e5 e4       	ldi	r30, 0x45	; 69
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	80 81       	ld	r24, Z
    332c:	80 64       	ori	r24, 0x40	; 64
    332e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_WGM21);
    3330:	a5 e4       	ldi	r26, 0x45	; 69
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e5 e4       	ldi	r30, 0x45	; 69
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	87 7f       	andi	r24, 0xF7	; 247
    333c:	8c 93       	st	X, r24

	/*	COMPARE MATCH OUTPUT MODE	*/

	switch (copy_TIMER2_cmpOutMode)
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	28 2f       	mov	r18, r24
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	3d 83       	std	Y+5, r19	; 0x05
    3346:	2c 83       	std	Y+4, r18	; 0x04
    3348:	8c 81       	ldd	r24, Y+4	; 0x04
    334a:	9d 81       	ldd	r25, Y+5	; 0x05
    334c:	83 30       	cpi	r24, 0x03	; 3
    334e:	91 05       	cpc	r25, r1
    3350:	c9 f0       	breq	.+50     	; 0x3384 <TIMER2_initPCPWM+0x78>
    3352:	2c 81       	ldd	r18, Y+4	; 0x04
    3354:	3d 81       	ldd	r19, Y+5	; 0x05
    3356:	24 30       	cpi	r18, 0x04	; 4
    3358:	31 05       	cpc	r19, r1
    335a:	19 f1       	breq	.+70     	; 0x33a2 <TIMER2_initPCPWM+0x96>
    335c:	8c 81       	ldd	r24, Y+4	; 0x04
    335e:	9d 81       	ldd	r25, Y+5	; 0x05
    3360:	81 30       	cpi	r24, 0x01	; 1
    3362:	91 05       	cpc	r25, r1
    3364:	69 f5       	brne	.+90     	; 0x33c0 <TIMER2_initPCPWM+0xb4>
	{
	case T2_OC_DISCONNECTED:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    3366:	a5 e4       	ldi	r26, 0x45	; 69
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e5 e4       	ldi	r30, 0x45	; 69
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	8f 7e       	andi	r24, 0xEF	; 239
    3372:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_COM21);
    3374:	a5 e4       	ldi	r26, 0x45	; 69
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	e5 e4       	ldi	r30, 0x45	; 69
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	8f 7d       	andi	r24, 0xDF	; 223
    3380:	8c 93       	st	X, r24
    3382:	1f c0       	rjmp	.+62     	; 0x33c2 <TIMER2_initPCPWM+0xb6>
		break;
	case T2_OC_CLEAR_ON_CMP:
		CLEAR_BIT(TCCR2,TCCR2_COM20);
    3384:	a5 e4       	ldi	r26, 0x45	; 69
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e5 e4       	ldi	r30, 0x45	; 69
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	8f 7e       	andi	r24, 0xEF	; 239
    3390:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    3392:	a5 e4       	ldi	r26, 0x45	; 69
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e5 e4       	ldi	r30, 0x45	; 69
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	80 62       	ori	r24, 0x20	; 32
    339e:	8c 93       	st	X, r24
    33a0:	10 c0       	rjmp	.+32     	; 0x33c2 <TIMER2_initPCPWM+0xb6>
		break;
	case T2_OC_SET_ON_CMP:
		SET_BIT(TCCR2,TCCR2_COM20);
    33a2:	a5 e4       	ldi	r26, 0x45	; 69
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	e5 e4       	ldi	r30, 0x45	; 69
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	80 61       	ori	r24, 0x10	; 16
    33ae:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    33b0:	a5 e4       	ldi	r26, 0x45	; 69
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	e5 e4       	ldi	r30, 0x45	; 69
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	80 62       	ori	r24, 0x20	; 32
    33bc:	8c 93       	st	X, r24
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <TIMER2_initPCPWM+0xb6>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    33c0:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	OCR2 = copy_TIMER2_cmp;
    33c2:	e3 e4       	ldi	r30, 0x43	; 67
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	80 83       	st	Z, r24

	/*	FORCE OUTPUT COMPARE CONFIG	*/

	CLEAR_BIT(TCCR2,TCCR2_FOC2);
    33ca:	a5 e4       	ldi	r26, 0x45	; 69
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	e5 e4       	ldi	r30, 0x45	; 69
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	8f 77       	andi	r24, 0x7F	; 127
    33d6:	8c 93       	st	X, r24

	DIO_setPinDirection(DIO_PORTD,PIN7,OUTPUT);
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	67 e0       	ldi	r22, 0x07	; 7
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	return local_errorSignal;
    33e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	cf 91       	pop	r28
    33f0:	df 91       	pop	r29
    33f2:	08 95       	ret

000033f4 <TIMER2_readValue>:

StdReturnType TIMER2_readValue(uint8 *copy_TIMER2_ptr)
{
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <TIMER2_readValue+0x6>
    33fa:	0f 92       	push	r0
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	9b 83       	std	Y+3, r25	; 0x03
    3402:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	89 83       	std	Y+1, r24	; 0x01

	if (copy_TIMER2_ptr == NULL)
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	9b 81       	ldd	r25, Y+3	; 0x03
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	11 f4       	brne	.+4      	; 0x3414 <TIMER2_readValue+0x20>
	{
		local_errorSignal = NOT_OK_STAT;
    3410:	19 82       	std	Y+1, r1	; 0x01
    3412:	06 c0       	rjmp	.+12     	; 0x3420 <TIMER2_readValue+0x2c>
	}
	else
	{
		*copy_TIMER2_ptr = TCNT2;
    3414:	e4 e4       	ldi	r30, 0x44	; 68
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	ea 81       	ldd	r30, Y+2	; 0x02
    341c:	fb 81       	ldd	r31, Y+3	; 0x03
    341e:	80 83       	st	Z, r24
	}

	return local_errorSignal;
    3420:	89 81       	ldd	r24, Y+1	; 0x01
}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <TIMER2_startTimer>:

StdReturnType TIMER2_startTimer(uint8 copy_TIMER2_preScaling)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <TIMER2_startTimer+0x6>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_TIMER2_preScaling < 6)
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	86 30       	cpi	r24, 0x06	; 6
    3442:	80 f4       	brcc	.+32     	; 0x3464 <TIMER2_startTimer+0x36>
	{
		TCCR2 &= 0xF8;
    3444:	a5 e4       	ldi	r26, 0x45	; 69
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	e5 e4       	ldi	r30, 0x45	; 69
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	88 7f       	andi	r24, 0xF8	; 248
    3450:	8c 93       	st	X, r24
		TCCR2 |= copy_TIMER2_preScaling;
    3452:	a5 e4       	ldi	r26, 0x45	; 69
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e5 e4       	ldi	r30, 0x45	; 69
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	90 81       	ld	r25, Z
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	89 2b       	or	r24, r25
    3460:	8c 93       	st	X, r24
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <TIMER2_startTimer+0x38>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    3464:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
    3466:	89 81       	ldd	r24, Y+1	; 0x01
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <TIMER2_stopTimer>:

StdReturnType TIMER2_stopTimer(void)
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	0f 92       	push	r0
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
	StdReturnType local_errorSignal = OK_STAT;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	89 83       	std	Y+1, r24	; 0x01

	TCCR2 &= 0xF8;
    3480:	a5 e4       	ldi	r26, 0x45	; 69
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e5 e4       	ldi	r30, 0x45	; 69
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	88 7f       	andi	r24, 0xF8	; 248
    348c:	8c 93       	st	X, r24
	TCCR2 |= T2_NO_CLK;
    348e:	a5 e4       	ldi	r26, 0x45	; 69
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	e5 e4       	ldi	r30, 0x45	; 69
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	8c 93       	st	X, r24

	return local_errorSignal;
    349a:	89 81       	ldd	r24, Y+1	; 0x01
}
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <TWI_InitMaster>:
#include "TWI_Interface.h"


/*Set master address to 0 if master will not be addressed*/
void TWI_InitMaster(uint8 Copy_uint8Address)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	0f 92       	push	r0
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	89 83       	std	Y+1, r24	; 0x01
	/*set prescaler */
	CLEAR_BIT(TWSR,TWSR_TWPS0);
    34b0:	a1 e2       	ldi	r26, 0x21	; 33
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e1 e2       	ldi	r30, 0x21	; 33
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	8e 7f       	andi	r24, 0xFE	; 254
    34bc:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR,TWSR_TWPS1);
    34be:	a1 e2       	ldi	r26, 0x21	; 33
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	e1 e2       	ldi	r30, 0x21	; 33
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	8d 7f       	andi	r24, 0xFD	; 253
    34ca:	8c 93       	st	X, r24

	/*Clear status code*/
	TWSR &=0x07;
    34cc:	a1 e2       	ldi	r26, 0x21	; 33
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e1 e2       	ldi	r30, 0x21	; 33
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	87 70       	andi	r24, 0x07	; 7
    34d8:	8c 93       	st	X, r24

	/*set bit rate to get SCL =400KHz*/
	TWBR=62;
    34da:	e0 e2       	ldi	r30, 0x20	; 32
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	8e e3       	ldi	r24, 0x3E	; 62
    34e0:	80 83       	st	Z, r24

	/*Check if the master node will be addressed*/
	if(Copy_uint8Address !=0)
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	88 23       	and	r24, r24
    34e6:	29 f0       	breq	.+10     	; 0x34f2 <TWI_InitMaster+0x4e>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR= Copy_uint8Address<<1;
    34e8:	e2 e2       	ldi	r30, 0x22	; 34
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	88 0f       	add	r24, r24
    34f0:	80 83       	st	Z, r24

	/*Enable Acknowledge*/
//	SETBIT(TWCR,TWCR_TWEA);      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    34f2:	a6 e5       	ldi	r26, 0x56	; 86
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e6 e5       	ldi	r30, 0x56	; 86
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	84 60       	ori	r24, 0x04	; 4
    34fe:	8c 93       	st	X, r24
}
    3500:	0f 90       	pop	r0
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <TWI_InitSlave>:


void TWI_InitSlave(uint8 Copy_uint8Address)
{
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	0f 92       	push	r0
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Slave address in the 7 MSB of TWAR*/
	TWAR= Copy_uint8Address<<1;
    3514:	e2 e2       	ldi	r30, 0x22	; 34
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	88 0f       	add	r24, r24
    351c:	80 83       	st	Z, r24

	/*Enable Acknowledge*/
	SET_BIT(TWCR,TWCR_TWEA);
    351e:	a6 e5       	ldi	r26, 0x56	; 86
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	e6 e5       	ldi	r30, 0x56	; 86
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	80 64       	ori	r24, 0x40	; 64
    352a:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    352c:	a6 e5       	ldi	r26, 0x56	; 86
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	e6 e5       	ldi	r30, 0x56	; 86
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	84 60       	ori	r24, 0x04	; 4
    3538:	8c 93       	st	X, r24
}
    353a:	0f 90       	pop	r0
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <TWI_SendStartCondition>:


TWI_ErrStatus TWI_SendStartCondition(void)
{
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	0f 92       	push	r0
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus LocalErrorStatus= NoError;
    354c:	19 82       	std	Y+1, r1	; 0x01
	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    354e:	a6 e5       	ldi	r26, 0x56	; 86
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	e6 e5       	ldi	r30, 0x56	; 86
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	80 68       	ori	r24, 0x80	; 128
    355a:	8c 93       	st	X, r24
	/*send start condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    355c:	a6 e5       	ldi	r26, 0x56	; 86
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	e6 e5       	ldi	r30, 0x56	; 86
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	80 62       	ori	r24, 0x20	; 32
    3568:	8c 93       	st	X, r24
	/*Wait for TWINT Flag set*/
	while( (GET_BIT(TWCR,TWCR_TWINT))  == 0);
    356a:	e6 e5       	ldi	r30, 0x56	; 86
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	88 23       	and	r24, r24
    3572:	dc f7       	brge	.-10     	; 0x356a <TWI_SendStartCondition+0x28>
	/*Check value of TWI Status Register*/
	if ((TWSR & 0xF8) != START_ACK)
    3574:	e1 e2       	ldi	r30, 0x21	; 33
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	88 2f       	mov	r24, r24
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	88 7f       	andi	r24, 0xF8	; 248
    3580:	90 70       	andi	r25, 0x00	; 0
    3582:	88 30       	cpi	r24, 0x08	; 8
    3584:	91 05       	cpc	r25, r1
    3586:	11 f0       	breq	.+4      	; 0x358c <TWI_SendStartCondition+0x4a>
	{
		LocalErrorStatus=StartConditionErr;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return LocalErrorStatus;
    358c:	89 81       	ldd	r24, Y+1	; 0x01
}
    358e:	0f 90       	pop	r0
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <TWI_SendRepeatedStart>:


TWI_ErrStatus TWI_SendRepeatedStart(void)
{
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	0f 92       	push	r0
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus LocalErrorStatus= NoError;
    35a0:	19 82       	std	Y+1, r1	; 0x01
	/*send start condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    35a2:	a6 e5       	ldi	r26, 0x56	; 86
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	e6 e5       	ldi	r30, 0x56	; 86
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	80 62       	ori	r24, 0x20	; 32
    35ae:	8c 93       	st	X, r24
	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    35b0:	a6 e5       	ldi	r26, 0x56	; 86
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	e6 e5       	ldi	r30, 0x56	; 86
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	80 68       	ori	r24, 0x80	; 128
    35bc:	8c 93       	st	X, r24
	/*Wait for TWINT Flag set*/
	while( (GET_BIT(TWCR,TWCR_TWINT))  == 0);
    35be:	e6 e5       	ldi	r30, 0x56	; 86
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	88 23       	and	r24, r24
    35c6:	dc f7       	brge	.-10     	; 0x35be <TWI_SendRepeatedStart+0x28>
	/*Check value of TWI Status Register*/
	if ((TWSR & 0xF8) != REP_START_ACK)
    35c8:	e1 e2       	ldi	r30, 0x21	; 33
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	88 7f       	andi	r24, 0xF8	; 248
    35d4:	90 70       	andi	r25, 0x00	; 0
    35d6:	80 31       	cpi	r24, 0x10	; 16
    35d8:	91 05       	cpc	r25, r1
    35da:	11 f0       	breq	.+4      	; 0x35e0 <TWI_SendRepeatedStart+0x4a>
	{
		LocalErrorStatus=RepeatedStartError;
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return LocalErrorStatus;
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <TWI_SendSlaveAddressWithWrite>:


TWI_ErrStatus TWI_SendSlaveAddressWithWrite(uint8 Copy_uint8SlaveAddress)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <TWI_SendSlaveAddressWithWrite+0x6>
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus LocalErrorStatus= NoError;
    35f6:	19 82       	std	Y+1, r1	; 0x01
	/*send slave address*/
	TWDR=Copy_uint8SlaveAddress<<1;
    35f8:	e3 e2       	ldi	r30, 0x23	; 35
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	8a 81       	ldd	r24, Y+2	; 0x02
    35fe:	88 0f       	add	r24, r24
    3600:	80 83       	st	Z, r24
	/*send write request*/
	CLEAR_BIT(TWDR,0);
    3602:	a3 e2       	ldi	r26, 0x23	; 35
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e3 e2       	ldi	r30, 0x23	; 35
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	8e 7f       	andi	r24, 0xFE	; 254
    360e:	8c 93       	st	X, r24
	/*Clear the start condition bit*/
	CLEAR_BIT(TWCR,TWCR_TWSTA);
    3610:	a6 e5       	ldi	r26, 0x56	; 86
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	e6 e5       	ldi	r30, 0x56	; 86
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	8f 7d       	andi	r24, 0xDF	; 223
    361c:	8c 93       	st	X, r24
	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    361e:	a6 e5       	ldi	r26, 0x56	; 86
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e6 e5       	ldi	r30, 0x56	; 86
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	80 68       	ori	r24, 0x80	; 128
    362a:	8c 93       	st	X, r24
	/*Wait for TWINT Flag set*/
	while( (GET_BIT(TWCR,TWCR_TWINT))  == 0);
    362c:	e6 e5       	ldi	r30, 0x56	; 86
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	88 23       	and	r24, r24
    3634:	dc f7       	brge	.-10     	; 0x362c <TWI_SendSlaveAddressWithWrite+0x42>
	if( (TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
    3636:	e1 e2       	ldi	r30, 0x21	; 33
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	88 2f       	mov	r24, r24
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	88 7f       	andi	r24, 0xF8	; 248
    3642:	90 70       	andi	r25, 0x00	; 0
    3644:	88 31       	cpi	r24, 0x18	; 24
    3646:	91 05       	cpc	r25, r1
    3648:	11 f0       	breq	.+4      	; 0x364e <TWI_SendSlaveAddressWithWrite+0x64>
	{
		LocalErrorStatus=SlaveAddressWithWriteErr;
    364a:	83 e0       	ldi	r24, 0x03	; 3
    364c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do Nothing*/
	}

	return LocalErrorStatus;
    364e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <TWI_SendSlaveAddressWithRead>:


TWI_ErrStatus TWI_SendSlaveAddressWithRead(uint8 Copy_uint8SlaveAddress)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <TWI_SendSlaveAddressWithRead+0x6>
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    3664:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus LocalErrorStatus= NoError;
    3666:	19 82       	std	Y+1, r1	; 0x01
	/*send slave address*/
	TWDR=Copy_uint8SlaveAddress<<1;
    3668:	e3 e2       	ldi	r30, 0x23	; 35
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	8a 81       	ldd	r24, Y+2	; 0x02
    366e:	88 0f       	add	r24, r24
    3670:	80 83       	st	Z, r24
	/*send write request*/
	SET_BIT(TWDR,0);
    3672:	a3 e2       	ldi	r26, 0x23	; 35
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	e3 e2       	ldi	r30, 0x23	; 35
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	81 60       	ori	r24, 0x01	; 1
    367e:	8c 93       	st	X, r24
	/*Clear the start condition bit*/
	CLEAR_BIT(TWCR,TWCR_TWSTA);
    3680:	a6 e5       	ldi	r26, 0x56	; 86
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e6 e5       	ldi	r30, 0x56	; 86
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	8f 7d       	andi	r24, 0xDF	; 223
    368c:	8c 93       	st	X, r24
	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    368e:	a6 e5       	ldi	r26, 0x56	; 86
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e6 e5       	ldi	r30, 0x56	; 86
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	80 68       	ori	r24, 0x80	; 128
    369a:	8c 93       	st	X, r24
	/*Wait for TWINT Flag set*/
	while( (GET_BIT(TWCR,TWCR_TWINT))  == 0);
    369c:	e6 e5       	ldi	r30, 0x56	; 86
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	88 23       	and	r24, r24
    36a4:	dc f7       	brge	.-10     	; 0x369c <TWI_SendSlaveAddressWithRead+0x42>
	if( (TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
    36a6:	e1 e2       	ldi	r30, 0x21	; 33
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	88 2f       	mov	r24, r24
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	88 7f       	andi	r24, 0xF8	; 248
    36b2:	90 70       	andi	r25, 0x00	; 0
    36b4:	80 34       	cpi	r24, 0x40	; 64
    36b6:	91 05       	cpc	r25, r1
    36b8:	11 f0       	breq	.+4      	; 0x36be <TWI_SendSlaveAddressWithRead+0x64>
	{
		LocalErrorStatus= SlaveAddressWithReadErr;
    36ba:	84 e0       	ldi	r24, 0x04	; 4
    36bc:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return LocalErrorStatus;
    36be:	89 81       	ldd	r24, Y+1	; 0x01
}
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <TWI_MasterWriteDataByte>:


TWI_ErrStatus TWI_MasterWriteDataByte(uint8 Copy_uint8DataByte)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <TWI_MasterWriteDataByte+0x6>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus LocalErrorStatus= NoError;
    36d6:	19 82       	std	Y+1, r1	; 0x01
	TWDR= Copy_uint8DataByte;
    36d8:	e3 e2       	ldi	r30, 0x23	; 35
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	80 83       	st	Z, r24

	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    36e0:	a6 e5       	ldi	r26, 0x56	; 86
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e6 e5       	ldi	r30, 0x56	; 86
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	80 68       	ori	r24, 0x80	; 128
    36ec:	8c 93       	st	X, r24
	/*Wait for TWINT Flag set*/
	while( (GET_BIT(TWCR,TWCR_TWINT))  == 0);
    36ee:	e6 e5       	ldi	r30, 0x56	; 86
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	88 23       	and	r24, r24
    36f6:	dc f7       	brge	.-10     	; 0x36ee <TWI_MasterWriteDataByte+0x24>
	if( (TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
    36f8:	e1 e2       	ldi	r30, 0x21	; 33
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	88 2f       	mov	r24, r24
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	88 7f       	andi	r24, 0xF8	; 248
    3704:	90 70       	andi	r25, 0x00	; 0
    3706:	88 32       	cpi	r24, 0x28	; 40
    3708:	91 05       	cpc	r25, r1
    370a:	11 f0       	breq	.+4      	; 0x3710 <TWI_MasterWriteDataByte+0x46>
	{
		LocalErrorStatus= MasterWriteByteErr ;
    370c:	85 e0       	ldi	r24, 0x05	; 5
    370e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return LocalErrorStatus;
    3710:	89 81       	ldd	r24, Y+1	; 0x01

}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <TWI_MasterReadDataByte>:


TWI_ErrStatus TWI_MasterReadDataByte(uint8* Copy_puint8DataByte)
{
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	00 d0       	rcall	.+0      	; 0x3722 <TWI_MasterReadDataByte+0x6>
    3722:	0f 92       	push	r0
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	9b 83       	std	Y+3, r25	; 0x03
    372a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus LocalErrorStatus= NoError;
    372c:	19 82       	std	Y+1, r1	; 0x01
	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    372e:	a6 e5       	ldi	r26, 0x56	; 86
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	e6 e5       	ldi	r30, 0x56	; 86
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	80 68       	ori	r24, 0x80	; 128
    373a:	8c 93       	st	X, r24
	/*Wait for TWINT Flag set*/
	while( (GET_BIT(TWCR,TWCR_TWINT))  == 0);
    373c:	e6 e5       	ldi	r30, 0x56	; 86
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	88 23       	and	r24, r24
    3744:	dc f7       	brge	.-10     	; 0x373c <TWI_MasterReadDataByte+0x20>
	//*Copy_puint8DataByte=TWDR;
	if( (TWSR & 0xF8) != MSTR_RD_BYTE_WITH_NACK)
    3746:	e1 e2       	ldi	r30, 0x21	; 33
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	88 2f       	mov	r24, r24
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	88 7f       	andi	r24, 0xF8	; 248
    3752:	90 70       	andi	r25, 0x00	; 0
    3754:	88 35       	cpi	r24, 0x58	; 88
    3756:	91 05       	cpc	r25, r1
    3758:	19 f0       	breq	.+6      	; 0x3760 <TWI_MasterReadDataByte+0x44>
	{
		LocalErrorStatus= MasterReadByteErr ;
    375a:	86 e0       	ldi	r24, 0x06	; 6
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	06 c0       	rjmp	.+12     	; 0x376c <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		*Copy_puint8DataByte=TWDR;
    3760:	e3 e2       	ldi	r30, 0x23	; 35
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	ea 81       	ldd	r30, Y+2	; 0x02
    3768:	fb 81       	ldd	r31, Y+3	; 0x03
    376a:	80 83       	st	Z, r24
	}
	return LocalErrorStatus;
    376c:	89 81       	ldd	r24, Y+1	; 0x01
}
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	0f 90       	pop	r0
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
	/*send stop condition*/
	SET_BIT(TWCR,TWCR_TWSTO);
    3782:	a6 e5       	ldi	r26, 0x56	; 86
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	e6 e5       	ldi	r30, 0x56	; 86
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	80 61       	ori	r24, 0x10	; 16
    378e:	8c 93       	st	X, r24
	/*Clear TWINT flag*/
	SET_BIT(TWCR,TWCR_TWINT);
    3790:	a6 e5       	ldi	r26, 0x56	; 86
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	e6 e5       	ldi	r30, 0x56	; 86
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	80 68       	ori	r24, 0x80	; 128
    379c:	8c 93       	st	X, r24
	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    379e:	a6 e5       	ldi	r26, 0x56	; 86
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	e6 e5       	ldi	r30, 0x56	; 86
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	84 60       	ori	r24, 0x04	; 4
    37aa:	8c 93       	st	X, r24
}
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	08 95       	ret

000037b2 <DisableAck>:

void DisableAck(void)
{
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
	/*Disable Acknowledge*/
	CLEAR_BIT(TWCR,TWCR_TWEA);
    37ba:	a6 e5       	ldi	r26, 0x56	; 86
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	e6 e5       	ldi	r30, 0x56	; 86
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	8f 7b       	andi	r24, 0xBF	; 191
    37c6:	8c 93       	st	X, r24
}
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <EnableAck>:
void EnableAck(void)
{
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
	/*Enable Acknowledge*/
	SET_BIT(TWCR,TWCR_TWEA);
    37d6:	a6 e5       	ldi	r26, 0x56	; 86
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e6 e5       	ldi	r30, 0x56	; 86
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	80 64       	ori	r24, 0x40	; 64
    37e2:	8c 93       	st	X, r24
}
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <DIO_portsInit>:
#include "DIO_Config.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

void DIO_portsInit(void)
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA_VALUE;
    37f2:	ea e3       	ldi	r30, 0x3A	; 58
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	8e e0       	ldi	r24, 0x0E	; 14
    37f8:	80 83       	st	Z, r24
	DDRB = DDRB_VALUE;
    37fa:	e7 e3       	ldi	r30, 0x37	; 55
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	10 82       	st	Z, r1
	DDRC = DDRC_VALUE;
    3800:	e4 e3       	ldi	r30, 0x34	; 52
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	10 82       	st	Z, r1
	DDRD = DDRD_VALUE;
    3806:	e1 e3       	ldi	r30, 0x31	; 49
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	8d e1       	ldi	r24, 0x1D	; 29
    380c:	80 83       	st	Z, r24

	PORTA = PORTA_VALUE;
    380e:	eb e3       	ldi	r30, 0x3B	; 59
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 ef       	ldi	r24, 0xF0	; 240
    3814:	80 83       	st	Z, r24
	PORTB = PORTB_VALUE;
    3816:	e8 e3       	ldi	r30, 0x38	; 56
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 ef       	ldi	r24, 0xF0	; 240
    381c:	80 83       	st	Z, r24
	PORTC = PORTC_VALUE;
    381e:	e5 e3       	ldi	r30, 0x35	; 53
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	10 82       	st	Z, r1
	PORTD = PORTD_VALUE;
    3824:	e2 e3       	ldi	r30, 0x32	; 50
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	10 82       	st	Z, r1
}
    382a:	cf 91       	pop	r28
    382c:	df 91       	pop	r29
    382e:	08 95       	ret

00003830 <DIO_setPinDirection>:

StdReturnType DIO_setPinDirection(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_direction)
{
    3830:	df 93       	push	r29
    3832:	cf 93       	push	r28
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	28 97       	sbiw	r28, 0x08	; 8
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	8a 83       	std	Y+2, r24	; 0x02
    3846:	6b 83       	std	Y+3, r22	; 0x03
    3848:	4c 83       	std	Y+4, r20	; 0x04
	StdReturnType local_errorState = OK_STAT;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	88 30       	cpi	r24, 0x08	; 8
    3852:	08 f0       	brcs	.+2      	; 0x3856 <DIO_setPinDirection+0x26>
    3854:	f1 c0       	rjmp	.+482    	; 0x3a38 <DIO_setPinDirection+0x208>
	{
		if (copy_DIO_direction == OUTPUT)
    3856:	8c 81       	ldd	r24, Y+4	; 0x04
    3858:	81 30       	cpi	r24, 0x01	; 1
    385a:	09 f0       	breq	.+2      	; 0x385e <DIO_setPinDirection+0x2e>
    385c:	71 c0       	rjmp	.+226    	; 0x3940 <DIO_setPinDirection+0x110>
		{
			switch (copy_DIO_port)
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	38 87       	std	Y+8, r19	; 0x08
    3866:	2f 83       	std	Y+7, r18	; 0x07
    3868:	8f 81       	ldd	r24, Y+7	; 0x07
    386a:	98 85       	ldd	r25, Y+8	; 0x08
    386c:	81 30       	cpi	r24, 0x01	; 1
    386e:	91 05       	cpc	r25, r1
    3870:	49 f1       	breq	.+82     	; 0x38c4 <DIO_setPinDirection+0x94>
    3872:	2f 81       	ldd	r18, Y+7	; 0x07
    3874:	38 85       	ldd	r19, Y+8	; 0x08
    3876:	22 30       	cpi	r18, 0x02	; 2
    3878:	31 05       	cpc	r19, r1
    387a:	2c f4       	brge	.+10     	; 0x3886 <DIO_setPinDirection+0x56>
    387c:	8f 81       	ldd	r24, Y+7	; 0x07
    387e:	98 85       	ldd	r25, Y+8	; 0x08
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	61 f0       	breq	.+24     	; 0x389c <DIO_setPinDirection+0x6c>
    3884:	5b c0       	rjmp	.+182    	; 0x393c <DIO_setPinDirection+0x10c>
    3886:	2f 81       	ldd	r18, Y+7	; 0x07
    3888:	38 85       	ldd	r19, Y+8	; 0x08
    388a:	22 30       	cpi	r18, 0x02	; 2
    388c:	31 05       	cpc	r19, r1
    388e:	71 f1       	breq	.+92     	; 0x38ec <DIO_setPinDirection+0xbc>
    3890:	8f 81       	ldd	r24, Y+7	; 0x07
    3892:	98 85       	ldd	r25, Y+8	; 0x08
    3894:	83 30       	cpi	r24, 0x03	; 3
    3896:	91 05       	cpc	r25, r1
    3898:	e9 f1       	breq	.+122    	; 0x3914 <DIO_setPinDirection+0xe4>
    389a:	50 c0       	rjmp	.+160    	; 0x393c <DIO_setPinDirection+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(DDRA,copy_DIO_pin);
    389c:	aa e3       	ldi	r26, 0x3A	; 58
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	ea e3       	ldi	r30, 0x3A	; 58
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	48 2f       	mov	r20, r24
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	28 2f       	mov	r18, r24
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	02 2e       	mov	r0, r18
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <DIO_setPinDirection+0x8a>
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	0a 94       	dec	r0
    38bc:	e2 f7       	brpl	.-8      	; 0x38b6 <DIO_setPinDirection+0x86>
    38be:	84 2b       	or	r24, r20
    38c0:	8c 93       	st	X, r24
    38c2:	bb c0       	rjmp	.+374    	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					SET_BIT(DDRB,copy_DIO_pin);
    38c4:	a7 e3       	ldi	r26, 0x37	; 55
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e7 e3       	ldi	r30, 0x37	; 55
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	48 2f       	mov	r20, r24
    38d0:	8b 81       	ldd	r24, Y+3	; 0x03
    38d2:	28 2f       	mov	r18, r24
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	02 2e       	mov	r0, r18
    38dc:	02 c0       	rjmp	.+4      	; 0x38e2 <DIO_setPinDirection+0xb2>
    38de:	88 0f       	add	r24, r24
    38e0:	99 1f       	adc	r25, r25
    38e2:	0a 94       	dec	r0
    38e4:	e2 f7       	brpl	.-8      	; 0x38de <DIO_setPinDirection+0xae>
    38e6:	84 2b       	or	r24, r20
    38e8:	8c 93       	st	X, r24
    38ea:	a7 c0       	rjmp	.+334    	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					SET_BIT(DDRC,copy_DIO_pin);
    38ec:	a4 e3       	ldi	r26, 0x34	; 52
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	e4 e3       	ldi	r30, 0x34	; 52
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	48 2f       	mov	r20, r24
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	28 2f       	mov	r18, r24
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	02 2e       	mov	r0, r18
    3904:	02 c0       	rjmp	.+4      	; 0x390a <DIO_setPinDirection+0xda>
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	0a 94       	dec	r0
    390c:	e2 f7       	brpl	.-8      	; 0x3906 <DIO_setPinDirection+0xd6>
    390e:	84 2b       	or	r24, r20
    3910:	8c 93       	st	X, r24
    3912:	93 c0       	rjmp	.+294    	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTD:
					SET_BIT(DDRD,copy_DIO_pin);
    3914:	a1 e3       	ldi	r26, 0x31	; 49
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	e1 e3       	ldi	r30, 0x31	; 49
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	48 2f       	mov	r20, r24
    3920:	8b 81       	ldd	r24, Y+3	; 0x03
    3922:	28 2f       	mov	r18, r24
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	02 2e       	mov	r0, r18
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <DIO_setPinDirection+0x102>
    392e:	88 0f       	add	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	0a 94       	dec	r0
    3934:	e2 f7       	brpl	.-8      	; 0x392e <DIO_setPinDirection+0xfe>
    3936:	84 2b       	or	r24, r20
    3938:	8c 93       	st	X, r24
    393a:	7f c0       	rjmp	.+254    	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				default:
					local_errorState = NOT_OK_STAT;
    393c:	19 82       	std	Y+1, r1	; 0x01
    393e:	7d c0       	rjmp	.+250    	; 0x3a3a <DIO_setPinDirection+0x20a>
			}
		}
		else if (copy_DIO_direction == INPUT)
    3940:	8c 81       	ldd	r24, Y+4	; 0x04
    3942:	88 23       	and	r24, r24
    3944:	09 f0       	breq	.+2      	; 0x3948 <DIO_setPinDirection+0x118>
    3946:	76 c0       	rjmp	.+236    	; 0x3a34 <DIO_setPinDirection+0x204>
		{
			switch (copy_DIO_port)
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	3e 83       	std	Y+6, r19	; 0x06
    3950:	2d 83       	std	Y+5, r18	; 0x05
    3952:	8d 81       	ldd	r24, Y+5	; 0x05
    3954:	9e 81       	ldd	r25, Y+6	; 0x06
    3956:	81 30       	cpi	r24, 0x01	; 1
    3958:	91 05       	cpc	r25, r1
    395a:	59 f1       	breq	.+86     	; 0x39b2 <DIO_setPinDirection+0x182>
    395c:	2d 81       	ldd	r18, Y+5	; 0x05
    395e:	3e 81       	ldd	r19, Y+6	; 0x06
    3960:	22 30       	cpi	r18, 0x02	; 2
    3962:	31 05       	cpc	r19, r1
    3964:	2c f4       	brge	.+10     	; 0x3970 <DIO_setPinDirection+0x140>
    3966:	8d 81       	ldd	r24, Y+5	; 0x05
    3968:	9e 81       	ldd	r25, Y+6	; 0x06
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	69 f0       	breq	.+26     	; 0x3988 <DIO_setPinDirection+0x158>
    396e:	60 c0       	rjmp	.+192    	; 0x3a30 <DIO_setPinDirection+0x200>
    3970:	2d 81       	ldd	r18, Y+5	; 0x05
    3972:	3e 81       	ldd	r19, Y+6	; 0x06
    3974:	22 30       	cpi	r18, 0x02	; 2
    3976:	31 05       	cpc	r19, r1
    3978:	89 f1       	breq	.+98     	; 0x39dc <DIO_setPinDirection+0x1ac>
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	9e 81       	ldd	r25, Y+6	; 0x06
    397e:	83 30       	cpi	r24, 0x03	; 3
    3980:	91 05       	cpc	r25, r1
    3982:	09 f4       	brne	.+2      	; 0x3986 <DIO_setPinDirection+0x156>
    3984:	40 c0       	rjmp	.+128    	; 0x3a06 <DIO_setPinDirection+0x1d6>
    3986:	54 c0       	rjmp	.+168    	; 0x3a30 <DIO_setPinDirection+0x200>
			{
				case DIO_PORTA:
					CLEAR_BIT(DDRA,copy_DIO_pin);
    3988:	aa e3       	ldi	r26, 0x3A	; 58
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	ea e3       	ldi	r30, 0x3A	; 58
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	48 2f       	mov	r20, r24
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	28 2f       	mov	r18, r24
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	02 2e       	mov	r0, r18
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <DIO_setPinDirection+0x176>
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	0a 94       	dec	r0
    39a8:	e2 f7       	brpl	.-8      	; 0x39a2 <DIO_setPinDirection+0x172>
    39aa:	80 95       	com	r24
    39ac:	84 23       	and	r24, r20
    39ae:	8c 93       	st	X, r24
    39b0:	44 c0       	rjmp	.+136    	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTB:
					CLEAR_BIT(DDRB,copy_DIO_pin);
    39b2:	a7 e3       	ldi	r26, 0x37	; 55
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	e7 e3       	ldi	r30, 0x37	; 55
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	80 81       	ld	r24, Z
    39bc:	48 2f       	mov	r20, r24
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	28 2f       	mov	r18, r24
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	02 2e       	mov	r0, r18
    39ca:	02 c0       	rjmp	.+4      	; 0x39d0 <DIO_setPinDirection+0x1a0>
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	0a 94       	dec	r0
    39d2:	e2 f7       	brpl	.-8      	; 0x39cc <DIO_setPinDirection+0x19c>
    39d4:	80 95       	com	r24
    39d6:	84 23       	and	r24, r20
    39d8:	8c 93       	st	X, r24
    39da:	2f c0       	rjmp	.+94     	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTC:
					CLEAR_BIT(DDRC,copy_DIO_pin);
    39dc:	a4 e3       	ldi	r26, 0x34	; 52
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e4 e3       	ldi	r30, 0x34	; 52
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	48 2f       	mov	r20, r24
    39e8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ea:	28 2f       	mov	r18, r24
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	02 2e       	mov	r0, r18
    39f4:	02 c0       	rjmp	.+4      	; 0x39fa <DIO_setPinDirection+0x1ca>
    39f6:	88 0f       	add	r24, r24
    39f8:	99 1f       	adc	r25, r25
    39fa:	0a 94       	dec	r0
    39fc:	e2 f7       	brpl	.-8      	; 0x39f6 <DIO_setPinDirection+0x1c6>
    39fe:	80 95       	com	r24
    3a00:	84 23       	and	r24, r20
    3a02:	8c 93       	st	X, r24
    3a04:	1a c0       	rjmp	.+52     	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				case DIO_PORTD:
					CLEAR_BIT(DDRD,copy_DIO_pin);
    3a06:	a1 e3       	ldi	r26, 0x31	; 49
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
    3a0a:	e1 e3       	ldi	r30, 0x31	; 49
    3a0c:	f0 e0       	ldi	r31, 0x00	; 0
    3a0e:	80 81       	ld	r24, Z
    3a10:	48 2f       	mov	r20, r24
    3a12:	8b 81       	ldd	r24, Y+3	; 0x03
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	02 2e       	mov	r0, r18
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <DIO_setPinDirection+0x1f4>
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	0a 94       	dec	r0
    3a26:	e2 f7       	brpl	.-8      	; 0x3a20 <DIO_setPinDirection+0x1f0>
    3a28:	80 95       	com	r24
    3a2a:	84 23       	and	r24, r20
    3a2c:	8c 93       	st	X, r24
    3a2e:	05 c0       	rjmp	.+10     	; 0x3a3a <DIO_setPinDirection+0x20a>
					break;
				default:
					local_errorState = NOT_OK_STAT;
    3a30:	19 82       	std	Y+1, r1	; 0x01
    3a32:	03 c0       	rjmp	.+6      	; 0x3a3a <DIO_setPinDirection+0x20a>
			}
		}
		else
		{
			local_errorState = NOT_OK_STAT;
    3a34:	19 82       	std	Y+1, r1	; 0x01
    3a36:	01 c0       	rjmp	.+2      	; 0x3a3a <DIO_setPinDirection+0x20a>
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
    3a38:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_errorState;
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a3c:	28 96       	adiw	r28, 0x08	; 8
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <DIO_setPinValue>:

StdReturnType DIO_setPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin, uint8 copy_DIO_value)
{
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	28 97       	sbiw	r28, 0x08	; 8
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	8a 83       	std	Y+2, r24	; 0x02
    3a64:	6b 83       	std	Y+3, r22	; 0x03
    3a66:	4c 83       	std	Y+4, r20	; 0x04
	StdReturnType local_errorSignal = OK_STAT;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
    3a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6e:	88 30       	cpi	r24, 0x08	; 8
    3a70:	08 f0       	brcs	.+2      	; 0x3a74 <DIO_setPinValue+0x26>
    3a72:	f1 c0       	rjmp	.+482    	; 0x3c56 <DIO_setPinValue+0x208>
	{
		if (copy_DIO_value == HIGH)
    3a74:	8c 81       	ldd	r24, Y+4	; 0x04
    3a76:	81 30       	cpi	r24, 0x01	; 1
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <DIO_setPinValue+0x2e>
    3a7a:	71 c0       	rjmp	.+226    	; 0x3b5e <DIO_setPinValue+0x110>
		{
			switch(copy_DIO_port)
    3a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7e:	28 2f       	mov	r18, r24
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	38 87       	std	Y+8, r19	; 0x08
    3a84:	2f 83       	std	Y+7, r18	; 0x07
    3a86:	8f 81       	ldd	r24, Y+7	; 0x07
    3a88:	98 85       	ldd	r25, Y+8	; 0x08
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	49 f1       	breq	.+82     	; 0x3ae2 <DIO_setPinValue+0x94>
    3a90:	2f 81       	ldd	r18, Y+7	; 0x07
    3a92:	38 85       	ldd	r19, Y+8	; 0x08
    3a94:	22 30       	cpi	r18, 0x02	; 2
    3a96:	31 05       	cpc	r19, r1
    3a98:	2c f4       	brge	.+10     	; 0x3aa4 <DIO_setPinValue+0x56>
    3a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a9c:	98 85       	ldd	r25, Y+8	; 0x08
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	61 f0       	breq	.+24     	; 0x3aba <DIO_setPinValue+0x6c>
    3aa2:	5b c0       	rjmp	.+182    	; 0x3b5a <DIO_setPinValue+0x10c>
    3aa4:	2f 81       	ldd	r18, Y+7	; 0x07
    3aa6:	38 85       	ldd	r19, Y+8	; 0x08
    3aa8:	22 30       	cpi	r18, 0x02	; 2
    3aaa:	31 05       	cpc	r19, r1
    3aac:	71 f1       	breq	.+92     	; 0x3b0a <DIO_setPinValue+0xbc>
    3aae:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab0:	98 85       	ldd	r25, Y+8	; 0x08
    3ab2:	83 30       	cpi	r24, 0x03	; 3
    3ab4:	91 05       	cpc	r25, r1
    3ab6:	e9 f1       	breq	.+122    	; 0x3b32 <DIO_setPinValue+0xe4>
    3ab8:	50 c0       	rjmp	.+160    	; 0x3b5a <DIO_setPinValue+0x10c>
			{
				case DIO_PORTA:
					SET_BIT(PORTA,copy_DIO_pin);
    3aba:	ab e3       	ldi	r26, 0x3B	; 59
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	eb e3       	ldi	r30, 0x3B	; 59
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	48 2f       	mov	r20, r24
    3ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac8:	28 2f       	mov	r18, r24
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	02 2e       	mov	r0, r18
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <DIO_setPinValue+0x8a>
    3ad4:	88 0f       	add	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	0a 94       	dec	r0
    3ada:	e2 f7       	brpl	.-8      	; 0x3ad4 <DIO_setPinValue+0x86>
    3adc:	84 2b       	or	r24, r20
    3ade:	8c 93       	st	X, r24
    3ae0:	bb c0       	rjmp	.+374    	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTB:
					SET_BIT(PORTB,copy_DIO_pin);
    3ae2:	a8 e3       	ldi	r26, 0x38	; 56
    3ae4:	b0 e0       	ldi	r27, 0x00	; 0
    3ae6:	e8 e3       	ldi	r30, 0x38	; 56
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	80 81       	ld	r24, Z
    3aec:	48 2f       	mov	r20, r24
    3aee:	8b 81       	ldd	r24, Y+3	; 0x03
    3af0:	28 2f       	mov	r18, r24
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	02 2e       	mov	r0, r18
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <DIO_setPinValue+0xb2>
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	0a 94       	dec	r0
    3b02:	e2 f7       	brpl	.-8      	; 0x3afc <DIO_setPinValue+0xae>
    3b04:	84 2b       	or	r24, r20
    3b06:	8c 93       	st	X, r24
    3b08:	a7 c0       	rjmp	.+334    	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTC:
					SET_BIT(PORTC,copy_DIO_pin);
    3b0a:	a5 e3       	ldi	r26, 0x35	; 53
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	e5 e3       	ldi	r30, 0x35	; 53
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	48 2f       	mov	r20, r24
    3b16:	8b 81       	ldd	r24, Y+3	; 0x03
    3b18:	28 2f       	mov	r18, r24
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	02 2e       	mov	r0, r18
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <DIO_setPinValue+0xda>
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	0a 94       	dec	r0
    3b2a:	e2 f7       	brpl	.-8      	; 0x3b24 <DIO_setPinValue+0xd6>
    3b2c:	84 2b       	or	r24, r20
    3b2e:	8c 93       	st	X, r24
    3b30:	93 c0       	rjmp	.+294    	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTD:
					SET_BIT(PORTD,copy_DIO_pin);
    3b32:	a2 e3       	ldi	r26, 0x32	; 50
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	e2 e3       	ldi	r30, 0x32	; 50
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	80 81       	ld	r24, Z
    3b3c:	48 2f       	mov	r20, r24
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	28 2f       	mov	r18, r24
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	02 2e       	mov	r0, r18
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <DIO_setPinValue+0x102>
    3b4c:	88 0f       	add	r24, r24
    3b4e:	99 1f       	adc	r25, r25
    3b50:	0a 94       	dec	r0
    3b52:	e2 f7       	brpl	.-8      	; 0x3b4c <DIO_setPinValue+0xfe>
    3b54:	84 2b       	or	r24, r20
    3b56:	8c 93       	st	X, r24
    3b58:	7f c0       	rjmp	.+254    	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
    3b5a:	19 82       	std	Y+1, r1	; 0x01
    3b5c:	7d c0       	rjmp	.+250    	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
			}
		}
		else if(copy_DIO_value == LOW)
    3b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b60:	88 23       	and	r24, r24
    3b62:	09 f0       	breq	.+2      	; 0x3b66 <DIO_setPinValue+0x118>
    3b64:	76 c0       	rjmp	.+236    	; 0x3c52 <DIO_setPinValue+0x204>
		{
			switch(copy_DIO_port)
    3b66:	8a 81       	ldd	r24, Y+2	; 0x02
    3b68:	28 2f       	mov	r18, r24
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	3e 83       	std	Y+6, r19	; 0x06
    3b6e:	2d 83       	std	Y+5, r18	; 0x05
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	9e 81       	ldd	r25, Y+6	; 0x06
    3b74:	81 30       	cpi	r24, 0x01	; 1
    3b76:	91 05       	cpc	r25, r1
    3b78:	59 f1       	breq	.+86     	; 0x3bd0 <DIO_setPinValue+0x182>
    3b7a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b7c:	3e 81       	ldd	r19, Y+6	; 0x06
    3b7e:	22 30       	cpi	r18, 0x02	; 2
    3b80:	31 05       	cpc	r19, r1
    3b82:	2c f4       	brge	.+10     	; 0x3b8e <DIO_setPinValue+0x140>
    3b84:	8d 81       	ldd	r24, Y+5	; 0x05
    3b86:	9e 81       	ldd	r25, Y+6	; 0x06
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	69 f0       	breq	.+26     	; 0x3ba6 <DIO_setPinValue+0x158>
    3b8c:	60 c0       	rjmp	.+192    	; 0x3c4e <DIO_setPinValue+0x200>
    3b8e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b90:	3e 81       	ldd	r19, Y+6	; 0x06
    3b92:	22 30       	cpi	r18, 0x02	; 2
    3b94:	31 05       	cpc	r19, r1
    3b96:	89 f1       	breq	.+98     	; 0x3bfa <DIO_setPinValue+0x1ac>
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	83 30       	cpi	r24, 0x03	; 3
    3b9e:	91 05       	cpc	r25, r1
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <DIO_setPinValue+0x156>
    3ba2:	40 c0       	rjmp	.+128    	; 0x3c24 <DIO_setPinValue+0x1d6>
    3ba4:	54 c0       	rjmp	.+168    	; 0x3c4e <DIO_setPinValue+0x200>
			{
				case DIO_PORTA:
					CLEAR_BIT(PORTA,copy_DIO_pin);
    3ba6:	ab e3       	ldi	r26, 0x3B	; 59
    3ba8:	b0 e0       	ldi	r27, 0x00	; 0
    3baa:	eb e3       	ldi	r30, 0x3B	; 59
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 81       	ld	r24, Z
    3bb0:	48 2f       	mov	r20, r24
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	28 2f       	mov	r18, r24
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	02 2e       	mov	r0, r18
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <DIO_setPinValue+0x176>
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	0a 94       	dec	r0
    3bc6:	e2 f7       	brpl	.-8      	; 0x3bc0 <DIO_setPinValue+0x172>
    3bc8:	80 95       	com	r24
    3bca:	84 23       	and	r24, r20
    3bcc:	8c 93       	st	X, r24
    3bce:	44 c0       	rjmp	.+136    	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTB:
					CLEAR_BIT(PORTB,copy_DIO_pin);
    3bd0:	a8 e3       	ldi	r26, 0x38	; 56
    3bd2:	b0 e0       	ldi	r27, 0x00	; 0
    3bd4:	e8 e3       	ldi	r30, 0x38	; 56
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	80 81       	ld	r24, Z
    3bda:	48 2f       	mov	r20, r24
    3bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bde:	28 2f       	mov	r18, r24
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	02 2e       	mov	r0, r18
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <DIO_setPinValue+0x1a0>
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	0a 94       	dec	r0
    3bf0:	e2 f7       	brpl	.-8      	; 0x3bea <DIO_setPinValue+0x19c>
    3bf2:	80 95       	com	r24
    3bf4:	84 23       	and	r24, r20
    3bf6:	8c 93       	st	X, r24
    3bf8:	2f c0       	rjmp	.+94     	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTC:
					CLEAR_BIT(PORTC,copy_DIO_pin);
    3bfa:	a5 e3       	ldi	r26, 0x35	; 53
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	e5 e3       	ldi	r30, 0x35	; 53
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	80 81       	ld	r24, Z
    3c04:	48 2f       	mov	r20, r24
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	28 2f       	mov	r18, r24
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	02 2e       	mov	r0, r18
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <DIO_setPinValue+0x1ca>
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	0a 94       	dec	r0
    3c1a:	e2 f7       	brpl	.-8      	; 0x3c14 <DIO_setPinValue+0x1c6>
    3c1c:	80 95       	com	r24
    3c1e:	84 23       	and	r24, r20
    3c20:	8c 93       	st	X, r24
    3c22:	1a c0       	rjmp	.+52     	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				case DIO_PORTD:
					CLEAR_BIT(PORTD,copy_DIO_pin);
    3c24:	a2 e3       	ldi	r26, 0x32	; 50
    3c26:	b0 e0       	ldi	r27, 0x00	; 0
    3c28:	e2 e3       	ldi	r30, 0x32	; 50
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	80 81       	ld	r24, Z
    3c2e:	48 2f       	mov	r20, r24
    3c30:	8b 81       	ldd	r24, Y+3	; 0x03
    3c32:	28 2f       	mov	r18, r24
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	02 2e       	mov	r0, r18
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <DIO_setPinValue+0x1f4>
    3c3e:	88 0f       	add	r24, r24
    3c40:	99 1f       	adc	r25, r25
    3c42:	0a 94       	dec	r0
    3c44:	e2 f7       	brpl	.-8      	; 0x3c3e <DIO_setPinValue+0x1f0>
    3c46:	80 95       	com	r24
    3c48:	84 23       	and	r24, r20
    3c4a:	8c 93       	st	X, r24
    3c4c:	05 c0       	rjmp	.+10     	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
    3c4e:	19 82       	std	Y+1, r1	; 0x01
    3c50:	03 c0       	rjmp	.+6      	; 0x3c58 <DIO_setPinValue+0x20a>
					break;
			}
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
    3c52:	19 82       	std	Y+1, r1	; 0x01
    3c54:	01 c0       	rjmp	.+2      	; 0x3c58 <DIO_setPinValue+0x20a>
		}
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    3c56:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c5a:	28 96       	adiw	r28, 0x08	; 8
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <DIO_readPinValue>:

StdReturnType DIO_readPinValue(uint8 copy_DIO_port, uint8 copy_DIO_pin,  uint8 *copy_DIO_pValue)
{
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	27 97       	sbiw	r28, 0x07	; 7
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	8a 83       	std	Y+2, r24	; 0x02
    3c82:	6b 83       	std	Y+3, r22	; 0x03
    3c84:	5d 83       	std	Y+5, r21	; 0x05
    3c86:	4c 83       	std	Y+4, r20	; 0x04
	StdReturnType local_errorState = OK_STAT;
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_pin <= PIN7) && (copy_DIO_pValue != NULL))
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	88 30       	cpi	r24, 0x08	; 8
    3c90:	08 f0       	brcs	.+2      	; 0x3c94 <DIO_readPinValue+0x28>
    3c92:	78 c0       	rjmp	.+240    	; 0x3d84 <DIO_readPinValue+0x118>
    3c94:	8c 81       	ldd	r24, Y+4	; 0x04
    3c96:	9d 81       	ldd	r25, Y+5	; 0x05
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <DIO_readPinValue+0x32>
    3c9c:	73 c0       	rjmp	.+230    	; 0x3d84 <DIO_readPinValue+0x118>
	{
		switch (copy_DIO_port)
    3c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca0:	28 2f       	mov	r18, r24
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	3f 83       	std	Y+7, r19	; 0x07
    3ca6:	2e 83       	std	Y+6, r18	; 0x06
    3ca8:	4e 81       	ldd	r20, Y+6	; 0x06
    3caa:	5f 81       	ldd	r21, Y+7	; 0x07
    3cac:	41 30       	cpi	r20, 0x01	; 1
    3cae:	51 05       	cpc	r21, r1
    3cb0:	59 f1       	breq	.+86     	; 0x3d08 <DIO_readPinValue+0x9c>
    3cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cb6:	82 30       	cpi	r24, 0x02	; 2
    3cb8:	91 05       	cpc	r25, r1
    3cba:	34 f4       	brge	.+12     	; 0x3cc8 <DIO_readPinValue+0x5c>
    3cbc:	2e 81       	ldd	r18, Y+6	; 0x06
    3cbe:	3f 81       	ldd	r19, Y+7	; 0x07
    3cc0:	21 15       	cp	r18, r1
    3cc2:	31 05       	cpc	r19, r1
    3cc4:	69 f0       	breq	.+26     	; 0x3ce0 <DIO_readPinValue+0x74>
    3cc6:	5c c0       	rjmp	.+184    	; 0x3d80 <DIO_readPinValue+0x114>
    3cc8:	4e 81       	ldd	r20, Y+6	; 0x06
    3cca:	5f 81       	ldd	r21, Y+7	; 0x07
    3ccc:	42 30       	cpi	r20, 0x02	; 2
    3cce:	51 05       	cpc	r21, r1
    3cd0:	79 f1       	breq	.+94     	; 0x3d30 <DIO_readPinValue+0xc4>
    3cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd6:	83 30       	cpi	r24, 0x03	; 3
    3cd8:	91 05       	cpc	r25, r1
    3cda:	09 f4       	brne	.+2      	; 0x3cde <DIO_readPinValue+0x72>
    3cdc:	3d c0       	rjmp	.+122    	; 0x3d58 <DIO_readPinValue+0xec>
    3cde:	50 c0       	rjmp	.+160    	; 0x3d80 <DIO_readPinValue+0x114>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = GET_BIT(PINA,copy_DIO_pin);
    3ce0:	e9 e3       	ldi	r30, 0x39	; 57
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	28 2f       	mov	r18, r24
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	88 2f       	mov	r24, r24
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	a9 01       	movw	r20, r18
    3cf2:	02 c0       	rjmp	.+4      	; 0x3cf8 <DIO_readPinValue+0x8c>
    3cf4:	55 95       	asr	r21
    3cf6:	47 95       	ror	r20
    3cf8:	8a 95       	dec	r24
    3cfa:	e2 f7       	brpl	.-8      	; 0x3cf4 <DIO_readPinValue+0x88>
    3cfc:	ca 01       	movw	r24, r20
    3cfe:	81 70       	andi	r24, 0x01	; 1
    3d00:	ec 81       	ldd	r30, Y+4	; 0x04
    3d02:	fd 81       	ldd	r31, Y+5	; 0x05
    3d04:	80 83       	st	Z, r24
    3d06:	3f c0       	rjmp	.+126    	; 0x3d86 <DIO_readPinValue+0x11a>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = GET_BIT(PINB,copy_DIO_pin);
    3d08:	e6 e3       	ldi	r30, 0x36	; 54
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	80 81       	ld	r24, Z
    3d0e:	28 2f       	mov	r18, r24
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	8b 81       	ldd	r24, Y+3	; 0x03
    3d14:	88 2f       	mov	r24, r24
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	a9 01       	movw	r20, r18
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <DIO_readPinValue+0xb4>
    3d1c:	55 95       	asr	r21
    3d1e:	47 95       	ror	r20
    3d20:	8a 95       	dec	r24
    3d22:	e2 f7       	brpl	.-8      	; 0x3d1c <DIO_readPinValue+0xb0>
    3d24:	ca 01       	movw	r24, r20
    3d26:	81 70       	andi	r24, 0x01	; 1
    3d28:	ec 81       	ldd	r30, Y+4	; 0x04
    3d2a:	fd 81       	ldd	r31, Y+5	; 0x05
    3d2c:	80 83       	st	Z, r24
    3d2e:	2b c0       	rjmp	.+86     	; 0x3d86 <DIO_readPinValue+0x11a>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = GET_BIT(PINC,copy_DIO_pin);
    3d30:	e3 e3       	ldi	r30, 0x33	; 51
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	88 2f       	mov	r24, r24
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a9 01       	movw	r20, r18
    3d42:	02 c0       	rjmp	.+4      	; 0x3d48 <DIO_readPinValue+0xdc>
    3d44:	55 95       	asr	r21
    3d46:	47 95       	ror	r20
    3d48:	8a 95       	dec	r24
    3d4a:	e2 f7       	brpl	.-8      	; 0x3d44 <DIO_readPinValue+0xd8>
    3d4c:	ca 01       	movw	r24, r20
    3d4e:	81 70       	andi	r24, 0x01	; 1
    3d50:	ec 81       	ldd	r30, Y+4	; 0x04
    3d52:	fd 81       	ldd	r31, Y+5	; 0x05
    3d54:	80 83       	st	Z, r24
    3d56:	17 c0       	rjmp	.+46     	; 0x3d86 <DIO_readPinValue+0x11a>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = GET_BIT(PIND,copy_DIO_pin);
    3d58:	e0 e3       	ldi	r30, 0x30	; 48
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	28 2f       	mov	r18, r24
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	8b 81       	ldd	r24, Y+3	; 0x03
    3d64:	88 2f       	mov	r24, r24
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	a9 01       	movw	r20, r18
    3d6a:	02 c0       	rjmp	.+4      	; 0x3d70 <DIO_readPinValue+0x104>
    3d6c:	55 95       	asr	r21
    3d6e:	47 95       	ror	r20
    3d70:	8a 95       	dec	r24
    3d72:	e2 f7       	brpl	.-8      	; 0x3d6c <DIO_readPinValue+0x100>
    3d74:	ca 01       	movw	r24, r20
    3d76:	81 70       	andi	r24, 0x01	; 1
    3d78:	ec 81       	ldd	r30, Y+4	; 0x04
    3d7a:	fd 81       	ldd	r31, Y+5	; 0x05
    3d7c:	80 83       	st	Z, r24
    3d7e:	03 c0       	rjmp	.+6      	; 0x3d86 <DIO_readPinValue+0x11a>
				break;
			default:
				local_errorState = NOT_OK_STAT;
    3d80:	19 82       	std	Y+1, r1	; 0x01
    3d82:	01 c0       	rjmp	.+2      	; 0x3d86 <DIO_readPinValue+0x11a>
				break;
		}
	}
	else
	{
		local_errorState = NOT_OK_STAT;
    3d84:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorState;
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d88:	27 96       	adiw	r28, 0x07	; 7
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	f8 94       	cli
    3d8e:	de bf       	out	0x3e, r29	; 62
    3d90:	0f be       	out	0x3f, r0	; 63
    3d92:	cd bf       	out	0x3d, r28	; 61
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <DIO_setIntPullUpRes>:

StdReturnType DIO_setIntPullUpRes(uint8 copy_DIO_port, uint8 copy_DIO_pin)
{
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <DIO_setIntPullUpRes+0x6>
    3da0:	0f 92       	push	r0
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
    3da6:	8a 83       	std	Y+2, r24	; 0x02
    3da8:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinDirection(copy_DIO_port,copy_DIO_pin,INPUT);
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	6b 81       	ldd	r22, Y+3	; 0x03
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    3db8:	89 83       	std	Y+1, r24	; 0x01
	if (local_errorSignal == OK_STAT)
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	81 30       	cpi	r24, 0x01	; 1
    3dbe:	31 f4       	brne	.+12     	; 0x3dcc <DIO_setIntPullUpRes+0x32>
	{
		local_errorSignal = DIO_setPinValue(copy_DIO_port,copy_DIO_pin,HIGH);
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	6b 81       	ldd	r22, Y+3	; 0x03
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    3dca:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorSignal;
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	cf 91       	pop	r28
    3dd6:	df 91       	pop	r29
    3dd8:	08 95       	ret

00003dda <DIO_togglePin>:

StdReturnType DIO_togglePin(uint8 copy_DIO_port, uint8 copy_DIO_pin)
{
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	00 d0       	rcall	.+0      	; 0x3de0 <DIO_togglePin+0x6>
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <DIO_togglePin+0x8>
    3de2:	0f 92       	push	r0
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	8a 83       	std	Y+2, r24	; 0x02
    3dea:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	89 83       	std	Y+1, r24	; 0x01
	if (copy_DIO_pin <= PIN7)
    3df0:	8b 81       	ldd	r24, Y+3	; 0x03
    3df2:	88 30       	cpi	r24, 0x08	; 8
    3df4:	08 f0       	brcs	.+2      	; 0x3df8 <DIO_togglePin+0x1e>
    3df6:	71 c0       	rjmp	.+226    	; 0x3eda <DIO_togglePin+0x100>
	{
		switch(copy_DIO_port)
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	28 2f       	mov	r18, r24
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	3d 83       	std	Y+5, r19	; 0x05
    3e00:	2c 83       	std	Y+4, r18	; 0x04
    3e02:	8c 81       	ldd	r24, Y+4	; 0x04
    3e04:	9d 81       	ldd	r25, Y+5	; 0x05
    3e06:	81 30       	cpi	r24, 0x01	; 1
    3e08:	91 05       	cpc	r25, r1
    3e0a:	49 f1       	breq	.+82     	; 0x3e5e <DIO_togglePin+0x84>
    3e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3e10:	22 30       	cpi	r18, 0x02	; 2
    3e12:	31 05       	cpc	r19, r1
    3e14:	2c f4       	brge	.+10     	; 0x3e20 <DIO_togglePin+0x46>
    3e16:	8c 81       	ldd	r24, Y+4	; 0x04
    3e18:	9d 81       	ldd	r25, Y+5	; 0x05
    3e1a:	00 97       	sbiw	r24, 0x00	; 0
    3e1c:	61 f0       	breq	.+24     	; 0x3e36 <DIO_togglePin+0x5c>
    3e1e:	5b c0       	rjmp	.+182    	; 0x3ed6 <DIO_togglePin+0xfc>
    3e20:	2c 81       	ldd	r18, Y+4	; 0x04
    3e22:	3d 81       	ldd	r19, Y+5	; 0x05
    3e24:	22 30       	cpi	r18, 0x02	; 2
    3e26:	31 05       	cpc	r19, r1
    3e28:	71 f1       	breq	.+92     	; 0x3e86 <DIO_togglePin+0xac>
    3e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e2e:	83 30       	cpi	r24, 0x03	; 3
    3e30:	91 05       	cpc	r25, r1
    3e32:	e9 f1       	breq	.+122    	; 0x3eae <DIO_togglePin+0xd4>
    3e34:	50 c0       	rjmp	.+160    	; 0x3ed6 <DIO_togglePin+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA,copy_DIO_pin);
    3e36:	ab e3       	ldi	r26, 0x3B	; 59
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	eb e3       	ldi	r30, 0x3B	; 59
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	48 2f       	mov	r20, r24
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	28 2f       	mov	r18, r24
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	02 2e       	mov	r0, r18
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <DIO_togglePin+0x7a>
    3e50:	88 0f       	add	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	0a 94       	dec	r0
    3e56:	e2 f7       	brpl	.-8      	; 0x3e50 <DIO_togglePin+0x76>
    3e58:	84 27       	eor	r24, r20
    3e5a:	8c 93       	st	X, r24
    3e5c:	3f c0       	rjmp	.+126    	; 0x3edc <DIO_togglePin+0x102>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB,copy_DIO_pin);
    3e5e:	a8 e3       	ldi	r26, 0x38	; 56
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	e8 e3       	ldi	r30, 0x38	; 56
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	48 2f       	mov	r20, r24
    3e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6c:	28 2f       	mov	r18, r24
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	02 2e       	mov	r0, r18
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <DIO_togglePin+0xa2>
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	0a 94       	dec	r0
    3e7e:	e2 f7       	brpl	.-8      	; 0x3e78 <DIO_togglePin+0x9e>
    3e80:	84 27       	eor	r24, r20
    3e82:	8c 93       	st	X, r24
    3e84:	2b c0       	rjmp	.+86     	; 0x3edc <DIO_togglePin+0x102>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC,copy_DIO_pin);
    3e86:	a5 e3       	ldi	r26, 0x35	; 53
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	e5 e3       	ldi	r30, 0x35	; 53
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	80 81       	ld	r24, Z
    3e90:	48 2f       	mov	r20, r24
    3e92:	8b 81       	ldd	r24, Y+3	; 0x03
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	02 2e       	mov	r0, r18
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <DIO_togglePin+0xca>
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	0a 94       	dec	r0
    3ea6:	e2 f7       	brpl	.-8      	; 0x3ea0 <DIO_togglePin+0xc6>
    3ea8:	84 27       	eor	r24, r20
    3eaa:	8c 93       	st	X, r24
    3eac:	17 c0       	rjmp	.+46     	; 0x3edc <DIO_togglePin+0x102>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD,copy_DIO_pin);
    3eae:	a2 e3       	ldi	r26, 0x32	; 50
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	e2 e3       	ldi	r30, 0x32	; 50
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	48 2f       	mov	r20, r24
    3eba:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	02 2e       	mov	r0, r18
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <DIO_togglePin+0xf2>
    3ec8:	88 0f       	add	r24, r24
    3eca:	99 1f       	adc	r25, r25
    3ecc:	0a 94       	dec	r0
    3ece:	e2 f7       	brpl	.-8      	; 0x3ec8 <DIO_togglePin+0xee>
    3ed0:	84 27       	eor	r24, r20
    3ed2:	8c 93       	st	X, r24
    3ed4:	03 c0       	rjmp	.+6      	; 0x3edc <DIO_togglePin+0x102>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
    3ed6:	19 82       	std	Y+1, r1	; 0x01
    3ed8:	01 c0       	rjmp	.+2      	; 0x3edc <DIO_togglePin+0x102>
			break;
		}
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    3eda:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	cf 91       	pop	r28
    3eea:	df 91       	pop	r29
    3eec:	08 95       	ret

00003eee <DIO_setPortDirection>:

StdReturnType DIO_setPortDirection(uint8 copy_DIO_port,  uint8 copy_DIO_direction)
{
    3eee:	df 93       	push	r29
    3ef0:	cf 93       	push	r28
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <DIO_setPortDirection+0x6>
    3ef4:	00 d0       	rcall	.+0      	; 0x3ef6 <DIO_setPortDirection+0x8>
    3ef6:	0f 92       	push	r0
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	8a 83       	std	Y+2, r24	; 0x02
    3efe:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_direction == PORT_OUTPUT) || (copy_DIO_direction == PORT_INPUT))
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	8f 3f       	cpi	r24, 0xFF	; 255
    3f08:	19 f0       	breq	.+6      	; 0x3f10 <DIO_setPortDirection+0x22>
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	88 23       	and	r24, r24
    3f0e:	a1 f5       	brne	.+104    	; 0x3f78 <DIO_setPortDirection+0x8a>
		{
			switch (copy_DIO_port)
    3f10:	8a 81       	ldd	r24, Y+2	; 0x02
    3f12:	28 2f       	mov	r18, r24
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	3d 83       	std	Y+5, r19	; 0x05
    3f18:	2c 83       	std	Y+4, r18	; 0x04
    3f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f1e:	81 30       	cpi	r24, 0x01	; 1
    3f20:	91 05       	cpc	r25, r1
    3f22:	d1 f0       	breq	.+52     	; 0x3f58 <DIO_setPortDirection+0x6a>
    3f24:	2c 81       	ldd	r18, Y+4	; 0x04
    3f26:	3d 81       	ldd	r19, Y+5	; 0x05
    3f28:	22 30       	cpi	r18, 0x02	; 2
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	2c f4       	brge	.+10     	; 0x3f38 <DIO_setPortDirection+0x4a>
    3f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f30:	9d 81       	ldd	r25, Y+5	; 0x05
    3f32:	00 97       	sbiw	r24, 0x00	; 0
    3f34:	61 f0       	breq	.+24     	; 0x3f4e <DIO_setPortDirection+0x60>
    3f36:	1f c0       	rjmp	.+62     	; 0x3f76 <DIO_setPortDirection+0x88>
    3f38:	2c 81       	ldd	r18, Y+4	; 0x04
    3f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    3f3c:	22 30       	cpi	r18, 0x02	; 2
    3f3e:	31 05       	cpc	r19, r1
    3f40:	81 f0       	breq	.+32     	; 0x3f62 <DIO_setPortDirection+0x74>
    3f42:	8c 81       	ldd	r24, Y+4	; 0x04
    3f44:	9d 81       	ldd	r25, Y+5	; 0x05
    3f46:	83 30       	cpi	r24, 0x03	; 3
    3f48:	91 05       	cpc	r25, r1
    3f4a:	81 f0       	breq	.+32     	; 0x3f6c <DIO_setPortDirection+0x7e>
    3f4c:	14 c0       	rjmp	.+40     	; 0x3f76 <DIO_setPortDirection+0x88>
			{
				case DIO_PORTA:
					DDRA = copy_DIO_direction;
    3f4e:	ea e3       	ldi	r30, 0x3A	; 58
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	80 83       	st	Z, r24
    3f56:	10 c0       	rjmp	.+32     	; 0x3f78 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTB:
					DDRB = copy_DIO_direction;
    3f58:	e7 e3       	ldi	r30, 0x37	; 55
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5e:	80 83       	st	Z, r24
    3f60:	0b c0       	rjmp	.+22     	; 0x3f78 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTC:
					DDRC = copy_DIO_direction;
    3f62:	e4 e3       	ldi	r30, 0x34	; 52
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	8b 81       	ldd	r24, Y+3	; 0x03
    3f68:	80 83       	st	Z, r24
    3f6a:	06 c0       	rjmp	.+12     	; 0x3f78 <DIO_setPortDirection+0x8a>
					break;
				case DIO_PORTD:
					DDRD = copy_DIO_direction;
    3f6c:	e1 e3       	ldi	r30, 0x31	; 49
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	80 83       	st	Z, r24
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <DIO_setPortDirection+0x8a>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
    3f76:	19 82       	std	Y+1, r1	; 0x01
					break;
			}
		}
	return local_errorSignal;
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	08 95       	ret

00003f8a <DIO_setPortValue>:

StdReturnType DIO_setPortValue(uint8 copy_DIO_port, uint8 copy_DIO_value)
{
    3f8a:	df 93       	push	r29
    3f8c:	cf 93       	push	r28
    3f8e:	00 d0       	rcall	.+0      	; 0x3f90 <DIO_setPortValue+0x6>
    3f90:	00 d0       	rcall	.+0      	; 0x3f92 <DIO_setPortValue+0x8>
    3f92:	0f 92       	push	r0
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	8a 83       	std	Y+2, r24	; 0x02
    3f9a:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	89 83       	std	Y+1, r24	; 0x01

	switch (copy_DIO_port)
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	28 2f       	mov	r18, r24
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	3d 83       	std	Y+5, r19	; 0x05
    3fa8:	2c 83       	std	Y+4, r18	; 0x04
    3faa:	8c 81       	ldd	r24, Y+4	; 0x04
    3fac:	9d 81       	ldd	r25, Y+5	; 0x05
    3fae:	81 30       	cpi	r24, 0x01	; 1
    3fb0:	91 05       	cpc	r25, r1
    3fb2:	d1 f0       	breq	.+52     	; 0x3fe8 <DIO_setPortValue+0x5e>
    3fb4:	2c 81       	ldd	r18, Y+4	; 0x04
    3fb6:	3d 81       	ldd	r19, Y+5	; 0x05
    3fb8:	22 30       	cpi	r18, 0x02	; 2
    3fba:	31 05       	cpc	r19, r1
    3fbc:	2c f4       	brge	.+10     	; 0x3fc8 <DIO_setPortValue+0x3e>
    3fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	61 f0       	breq	.+24     	; 0x3fde <DIO_setPortValue+0x54>
    3fc6:	1f c0       	rjmp	.+62     	; 0x4006 <DIO_setPortValue+0x7c>
    3fc8:	2c 81       	ldd	r18, Y+4	; 0x04
    3fca:	3d 81       	ldd	r19, Y+5	; 0x05
    3fcc:	22 30       	cpi	r18, 0x02	; 2
    3fce:	31 05       	cpc	r19, r1
    3fd0:	81 f0       	breq	.+32     	; 0x3ff2 <DIO_setPortValue+0x68>
    3fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3fd6:	83 30       	cpi	r24, 0x03	; 3
    3fd8:	91 05       	cpc	r25, r1
    3fda:	81 f0       	breq	.+32     	; 0x3ffc <DIO_setPortValue+0x72>
    3fdc:	14 c0       	rjmp	.+40     	; 0x4006 <DIO_setPortValue+0x7c>
	{
		case DIO_PORTA:
			PORTA = copy_DIO_value;
    3fde:	eb e3       	ldi	r30, 0x3B	; 59
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe4:	80 83       	st	Z, r24
    3fe6:	10 c0       	rjmp	.+32     	; 0x4008 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = copy_DIO_value;
    3fe8:	e8 e3       	ldi	r30, 0x38	; 56
    3fea:	f0 e0       	ldi	r31, 0x00	; 0
    3fec:	8b 81       	ldd	r24, Y+3	; 0x03
    3fee:	80 83       	st	Z, r24
    3ff0:	0b c0       	rjmp	.+22     	; 0x4008 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = copy_DIO_value;
    3ff2:	e5 e3       	ldi	r30, 0x35	; 53
    3ff4:	f0 e0       	ldi	r31, 0x00	; 0
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	80 83       	st	Z, r24
    3ffa:	06 c0       	rjmp	.+12     	; 0x4008 <DIO_setPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = copy_DIO_value;
    3ffc:	e2 e3       	ldi	r30, 0x32	; 50
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	8b 81       	ldd	r24, Y+3	; 0x03
    4002:	80 83       	st	Z, r24
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <DIO_setPortValue+0x7e>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
    4006:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
    4008:	89 81       	ldd	r24, Y+1	; 0x01
}
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	cf 91       	pop	r28
    4016:	df 91       	pop	r29
    4018:	08 95       	ret

0000401a <DIO_ReadPortValue>:

StdReturnType DIO_ReadPortValue(uint8 copy_DIO_port,  uint8 *copy_DIO_pValue)
{
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	00 d0       	rcall	.+0      	; 0x4020 <DIO_ReadPortValue+0x6>
    4020:	00 d0       	rcall	.+0      	; 0x4022 <DIO_ReadPortValue+0x8>
    4022:	00 d0       	rcall	.+0      	; 0x4024 <DIO_ReadPortValue+0xa>
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	8a 83       	std	Y+2, r24	; 0x02
    402a:	7c 83       	std	Y+4, r23	; 0x04
    402c:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_DIO_port <= DIO_PORTD) && (copy_DIO_pValue != NULL))
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	84 30       	cpi	r24, 0x04	; 4
    4036:	08 f0       	brcs	.+2      	; 0x403a <DIO_ReadPortValue+0x20>
    4038:	40 c0       	rjmp	.+128    	; 0x40ba <DIO_ReadPortValue+0xa0>
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	9c 81       	ldd	r25, Y+4	; 0x04
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	e1 f1       	breq	.+120    	; 0x40ba <DIO_ReadPortValue+0xa0>
	{
		switch (copy_DIO_port)
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	28 2f       	mov	r18, r24
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	3e 83       	std	Y+6, r19	; 0x06
    404a:	2d 83       	std	Y+5, r18	; 0x05
    404c:	8d 81       	ldd	r24, Y+5	; 0x05
    404e:	9e 81       	ldd	r25, Y+6	; 0x06
    4050:	81 30       	cpi	r24, 0x01	; 1
    4052:	91 05       	cpc	r25, r1
    4054:	e1 f0       	breq	.+56     	; 0x408e <DIO_ReadPortValue+0x74>
    4056:	2d 81       	ldd	r18, Y+5	; 0x05
    4058:	3e 81       	ldd	r19, Y+6	; 0x06
    405a:	22 30       	cpi	r18, 0x02	; 2
    405c:	31 05       	cpc	r19, r1
    405e:	2c f4       	brge	.+10     	; 0x406a <DIO_ReadPortValue+0x50>
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	61 f0       	breq	.+24     	; 0x4080 <DIO_ReadPortValue+0x66>
    4068:	27 c0       	rjmp	.+78     	; 0x40b8 <DIO_ReadPortValue+0x9e>
    406a:	2d 81       	ldd	r18, Y+5	; 0x05
    406c:	3e 81       	ldd	r19, Y+6	; 0x06
    406e:	22 30       	cpi	r18, 0x02	; 2
    4070:	31 05       	cpc	r19, r1
    4072:	a1 f0       	breq	.+40     	; 0x409c <DIO_ReadPortValue+0x82>
    4074:	8d 81       	ldd	r24, Y+5	; 0x05
    4076:	9e 81       	ldd	r25, Y+6	; 0x06
    4078:	83 30       	cpi	r24, 0x03	; 3
    407a:	91 05       	cpc	r25, r1
    407c:	b1 f0       	breq	.+44     	; 0x40aa <DIO_ReadPortValue+0x90>
    407e:	1c c0       	rjmp	.+56     	; 0x40b8 <DIO_ReadPortValue+0x9e>
		{
			case DIO_PORTA:
				*copy_DIO_pValue = PINA;
    4080:	e9 e3       	ldi	r30, 0x39	; 57
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	eb 81       	ldd	r30, Y+3	; 0x03
    4088:	fc 81       	ldd	r31, Y+4	; 0x04
    408a:	80 83       	st	Z, r24
    408c:	16 c0       	rjmp	.+44     	; 0x40ba <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTB:
				*copy_DIO_pValue = PINB;
    408e:	e6 e3       	ldi	r30, 0x36	; 54
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	eb 81       	ldd	r30, Y+3	; 0x03
    4096:	fc 81       	ldd	r31, Y+4	; 0x04
    4098:	80 83       	st	Z, r24
    409a:	0f c0       	rjmp	.+30     	; 0x40ba <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTC:
				*copy_DIO_pValue = PINC;
    409c:	e3 e3       	ldi	r30, 0x33	; 51
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	80 81       	ld	r24, Z
    40a2:	eb 81       	ldd	r30, Y+3	; 0x03
    40a4:	fc 81       	ldd	r31, Y+4	; 0x04
    40a6:	80 83       	st	Z, r24
    40a8:	08 c0       	rjmp	.+16     	; 0x40ba <DIO_ReadPortValue+0xa0>
				break;
			case DIO_PORTD:
				*copy_DIO_pValue = PIND;
    40aa:	e0 e3       	ldi	r30, 0x30	; 48
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	eb 81       	ldd	r30, Y+3	; 0x03
    40b2:	fc 81       	ldd	r31, Y+4	; 0x04
    40b4:	80 83       	st	Z, r24
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <DIO_ReadPortValue+0xa0>
				break;
			default:
				local_errorSignal = NOT_OK_STAT;
    40b8:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
	}

	return local_errorSignal;
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    40bc:	26 96       	adiw	r28, 0x06	; 6
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	cf 91       	pop	r28
    40ca:	df 91       	pop	r29
    40cc:	08 95       	ret

000040ce <DIO_togglePort>:

StdReturnType DIO_togglePort(uint8 copy_DIO_port)
{
    40ce:	df 93       	push	r29
    40d0:	cf 93       	push	r28
    40d2:	00 d0       	rcall	.+0      	; 0x40d4 <DIO_togglePort+0x6>
    40d4:	00 d0       	rcall	.+0      	; 0x40d6 <DIO_togglePort+0x8>
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
    40da:	8a 83       	std	Y+2, r24	; 0x02
	StdReturnType local_errorSignal = OK_STAT;
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_DIO_port)
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
    40e2:	28 2f       	mov	r18, r24
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	3c 83       	std	Y+4, r19	; 0x04
    40e8:	2b 83       	std	Y+3, r18	; 0x03
    40ea:	8b 81       	ldd	r24, Y+3	; 0x03
    40ec:	9c 81       	ldd	r25, Y+4	; 0x04
    40ee:	81 30       	cpi	r24, 0x01	; 1
    40f0:	91 05       	cpc	r25, r1
    40f2:	e9 f0       	breq	.+58     	; 0x412e <DIO_togglePort+0x60>
    40f4:	2b 81       	ldd	r18, Y+3	; 0x03
    40f6:	3c 81       	ldd	r19, Y+4	; 0x04
    40f8:	22 30       	cpi	r18, 0x02	; 2
    40fa:	31 05       	cpc	r19, r1
    40fc:	2c f4       	brge	.+10     	; 0x4108 <DIO_togglePort+0x3a>
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	9c 81       	ldd	r25, Y+4	; 0x04
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	61 f0       	breq	.+24     	; 0x411e <DIO_togglePort+0x50>
    4106:	2b c0       	rjmp	.+86     	; 0x415e <DIO_togglePort+0x90>
    4108:	2b 81       	ldd	r18, Y+3	; 0x03
    410a:	3c 81       	ldd	r19, Y+4	; 0x04
    410c:	22 30       	cpi	r18, 0x02	; 2
    410e:	31 05       	cpc	r19, r1
    4110:	b1 f0       	breq	.+44     	; 0x413e <DIO_togglePort+0x70>
    4112:	8b 81       	ldd	r24, Y+3	; 0x03
    4114:	9c 81       	ldd	r25, Y+4	; 0x04
    4116:	83 30       	cpi	r24, 0x03	; 3
    4118:	91 05       	cpc	r25, r1
    411a:	c9 f0       	breq	.+50     	; 0x414e <DIO_togglePort+0x80>
    411c:	20 c0       	rjmp	.+64     	; 0x415e <DIO_togglePort+0x90>
	{
	case DIO_PORTA:
		PORTA ^= 0xFF;
    411e:	ab e3       	ldi	r26, 0x3B	; 59
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	eb e3       	ldi	r30, 0x3B	; 59
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	80 81       	ld	r24, Z
    4128:	80 95       	com	r24
    412a:	8c 93       	st	X, r24
    412c:	19 c0       	rjmp	.+50     	; 0x4160 <DIO_togglePort+0x92>
		break;
	case DIO_PORTB:
		PORTB ^= 0xFF;
    412e:	a8 e3       	ldi	r26, 0x38	; 56
    4130:	b0 e0       	ldi	r27, 0x00	; 0
    4132:	e8 e3       	ldi	r30, 0x38	; 56
    4134:	f0 e0       	ldi	r31, 0x00	; 0
    4136:	80 81       	ld	r24, Z
    4138:	80 95       	com	r24
    413a:	8c 93       	st	X, r24
    413c:	11 c0       	rjmp	.+34     	; 0x4160 <DIO_togglePort+0x92>
		break;
	case DIO_PORTC:
		PORTC ^= 0xFF;
    413e:	a5 e3       	ldi	r26, 0x35	; 53
    4140:	b0 e0       	ldi	r27, 0x00	; 0
    4142:	e5 e3       	ldi	r30, 0x35	; 53
    4144:	f0 e0       	ldi	r31, 0x00	; 0
    4146:	80 81       	ld	r24, Z
    4148:	80 95       	com	r24
    414a:	8c 93       	st	X, r24
    414c:	09 c0       	rjmp	.+18     	; 0x4160 <DIO_togglePort+0x92>
		break;
	case DIO_PORTD:
		PORTD ^= 0xFF;
    414e:	a2 e3       	ldi	r26, 0x32	; 50
    4150:	b0 e0       	ldi	r27, 0x00	; 0
    4152:	e2 e3       	ldi	r30, 0x32	; 50
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	80 81       	ld	r24, Z
    4158:	80 95       	com	r24
    415a:	8c 93       	st	X, r24
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <DIO_togglePort+0x92>
		break;
	default:
		local_errorSignal = NOT_OK_STAT;
    415e:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_errorSignal;
    4160:	89 81       	ldd	r24, Y+1	; 0x01
}
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	cf 91       	pop	r28
    416c:	df 91       	pop	r29
    416e:	08 95       	ret

00004170 <MAP>:
#include "SM_Config.h"
#include "SM_Private.h"
#include "SM_Interface.h"

uint16 MAP(uint16 X1, uint16 X2, uint16 Y1, uint16 Y2, uint16 M, uint16 X)
{
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	df 93       	push	r29
    417a:	cf 93       	push	r28
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	60 97       	sbiw	r28, 0x10	; 16
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	9e 83       	std	Y+6, r25	; 0x06
    418e:	8d 83       	std	Y+5, r24	; 0x05
    4190:	78 87       	std	Y+8, r23	; 0x08
    4192:	6f 83       	std	Y+7, r22	; 0x07
    4194:	5a 87       	std	Y+10, r21	; 0x0a
    4196:	49 87       	std	Y+9, r20	; 0x09
    4198:	3c 87       	std	Y+12, r19	; 0x0c
    419a:	2b 87       	std	Y+11, r18	; 0x0b
    419c:	1e 87       	std	Y+14, r17	; 0x0e
    419e:	0d 87       	std	Y+13, r16	; 0x0d
    41a0:	f8 8a       	std	Y+16, r15	; 0x10
    41a2:	ef 86       	std	Y+15, r14	; 0x0f
	uint16 localSlope = 0;
    41a4:	1c 82       	std	Y+4, r1	; 0x04
    41a6:	1b 82       	std	Y+3, r1	; 0x03
	uint16 localOutput = 0;
    41a8:	1a 82       	std	Y+2, r1	; 0x02
    41aa:	19 82       	std	Y+1, r1	; 0x01

	localSlope = (Y2 - Y1)/(X2 - X1);
    41ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    41ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    41b0:	89 85       	ldd	r24, Y+9	; 0x09
    41b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b4:	a9 01       	movw	r20, r18
    41b6:	48 1b       	sub	r20, r24
    41b8:	59 0b       	sbc	r21, r25
    41ba:	2f 81       	ldd	r18, Y+7	; 0x07
    41bc:	38 85       	ldd	r19, Y+8	; 0x08
    41be:	8d 81       	ldd	r24, Y+5	; 0x05
    41c0:	9e 81       	ldd	r25, Y+6	; 0x06
    41c2:	28 1b       	sub	r18, r24
    41c4:	39 0b       	sbc	r19, r25
    41c6:	ca 01       	movw	r24, r20
    41c8:	b9 01       	movw	r22, r18
    41ca:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <__udivmodhi4>
    41ce:	cb 01       	movw	r24, r22
    41d0:	9c 83       	std	Y+4, r25	; 0x04
    41d2:	8b 83       	std	Y+3, r24	; 0x03
	localOutput = (localSlope * X) + M;
    41d4:	2b 81       	ldd	r18, Y+3	; 0x03
    41d6:	3c 81       	ldd	r19, Y+4	; 0x04
    41d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41da:	98 89       	ldd	r25, Y+16	; 0x10
    41dc:	a9 01       	movw	r20, r18
    41de:	48 9f       	mul	r20, r24
    41e0:	90 01       	movw	r18, r0
    41e2:	49 9f       	mul	r20, r25
    41e4:	30 0d       	add	r19, r0
    41e6:	58 9f       	mul	r21, r24
    41e8:	30 0d       	add	r19, r0
    41ea:	11 24       	eor	r1, r1
    41ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f0:	82 0f       	add	r24, r18
    41f2:	93 1f       	adc	r25, r19
    41f4:	9a 83       	std	Y+2, r25	; 0x02
    41f6:	89 83       	std	Y+1, r24	; 0x01

	return localOutput;
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    41fc:	60 96       	adiw	r28, 0x10	; 16
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	1f 91       	pop	r17
    420e:	0f 91       	pop	r16
    4210:	ff 90       	pop	r15
    4212:	ef 90       	pop	r14
    4214:	08 95       	ret

00004216 <SM_rotateAngle>:

void SM_rotateAngle(uint8 copy_SM_angle)
{
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	00 d0       	rcall	.+0      	; 0x4224 <SM_rotateAngle+0xe>
    4224:	0f 92       	push	r0
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 local_timeValue = 0;
    422c:	1a 82       	std	Y+2, r1	; 0x02
    422e:	19 82       	std	Y+1, r1	; 0x01
	local_timeValue = MAP(0,180,2000,4000,2000,copy_SM_angle);
    4230:	8b 81       	ldd	r24, Y+3	; 0x03
    4232:	e8 2f       	mov	r30, r24
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	64 eb       	ldi	r22, 0xB4	; 180
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	40 ed       	ldi	r20, 0xD0	; 208
    4240:	57 e0       	ldi	r21, 0x07	; 7
    4242:	20 ea       	ldi	r18, 0xA0	; 160
    4244:	3f e0       	ldi	r19, 0x0F	; 15
    4246:	00 ed       	ldi	r16, 0xD0	; 208
    4248:	17 e0       	ldi	r17, 0x07	; 7
    424a:	7f 01       	movw	r14, r30
    424c:	0e 94 b8 20 	call	0x4170	; 0x4170 <MAP>
    4250:	9a 83       	std	Y+2, r25	; 0x02
    4252:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_initFastPWM_ICR1(local_timeValue,local_timeValue,40000,T1A_OC_CLEAR_ON_CMP,T1B_OC_CLEAR_ON_CMP);
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	9a 81       	ldd	r25, Y+2	; 0x02
    4258:	29 81       	ldd	r18, Y+1	; 0x01
    425a:	3a 81       	ldd	r19, Y+2	; 0x02
    425c:	b9 01       	movw	r22, r18
    425e:	40 e4       	ldi	r20, 0x40	; 64
    4260:	5c e9       	ldi	r21, 0x9C	; 156
    4262:	23 e0       	ldi	r18, 0x03	; 3
    4264:	03 e0       	ldi	r16, 0x03	; 3
    4266:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <TIMER1_initFastPWM_ICR1>
	TIMER1_startTimer(T1_8_PRESCALING);
    426a:	82 e0       	ldi	r24, 0x02	; 2
    426c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <TIMER1_startTimer>
}
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	cf 91       	pop	r28
    4278:	df 91       	pop	r29
    427a:	1f 91       	pop	r17
    427c:	0f 91       	pop	r16
    427e:	ff 90       	pop	r15
    4280:	ef 90       	pop	r14
    4282:	08 95       	ret

00004284 <LED_turnOn>:
#include "LED_Config.h"
#include "LED_Private.h"
#include "LED_Interface.h"

StdReturnType LED_turnOn(uint8 copy_LED_port, uint8 copy_LED_pin)
{
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	00 d0       	rcall	.+0      	; 0x428a <LED_turnOn+0x6>
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	8a 83       	std	Y+2, r24	; 0x02
    4292:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorState = OK_STAT;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	89 83       	std	Y+1, r24	; 0x01
	local_errorState = DIO_setPinValue(copy_LED_port, copy_LED_pin, HIGH);
    4298:	8a 81       	ldd	r24, Y+2	; 0x02
    429a:	6b 81       	ldd	r22, Y+3	; 0x03
    429c:	41 e0       	ldi	r20, 0x01	; 1
    429e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    42a2:	89 83       	std	Y+1, r24	; 0x01
	return local_errorState;
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	cf 91       	pop	r28
    42ae:	df 91       	pop	r29
    42b0:	08 95       	ret

000042b2 <LED_turnOff>:

StdReturnType LED_turnOff(uint8 copy_LED_port, uint8 copy_LED_pin)
{
    42b2:	df 93       	push	r29
    42b4:	cf 93       	push	r28
    42b6:	00 d0       	rcall	.+0      	; 0x42b8 <LED_turnOff+0x6>
    42b8:	0f 92       	push	r0
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	8a 83       	std	Y+2, r24	; 0x02
    42c0:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorState = OK_STAT;
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	89 83       	std	Y+1, r24	; 0x01
	local_errorState = DIO_setPinValue(copy_LED_port, copy_LED_pin, LOW);
    42c6:	8a 81       	ldd	r24, Y+2	; 0x02
    42c8:	6b 81       	ldd	r22, Y+3	; 0x03
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    42d0:	89 83       	std	Y+1, r24	; 0x01
	return local_errorState;
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    42d4:	0f 90       	pop	r0
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	08 95       	ret

000042e0 <LED_toggle>:

StdReturnType LED_toggle(uint8 copy_LED_port, uint8 copy_LED_pin)
{
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <LED_toggle+0x6>
    42e6:	0f 92       	push	r0
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	8a 83       	std	Y+2, r24	; 0x02
    42ee:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorState = OK_STAT;
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	89 83       	std	Y+1, r24	; 0x01
	local_errorState = DIO_togglePin(copy_LED_port, copy_LED_pin);
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	6b 81       	ldd	r22, Y+3	; 0x03
    42f8:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <DIO_togglePin>
    42fc:	89 83       	std	Y+1, r24	; 0x01
	return local_errorState;
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	08 95       	ret

0000430c <LCD_init8bit>:

static uint8 DIO_set4bitsValue(uint8 copy_DIO_value);
static void convertNumToString(uint8 copy_num);

void LCD_init8bit(void)
{
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,LOW);
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	65 e0       	ldi	r22, 0x05	; 5
    4318:	40 e0       	ldi	r20, 0x00	; 0
    431a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
	DIO_setPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	66 e0       	ldi	r22, 0x06	; 6
    4322:	40 e0       	ldi	r20, 0x00	; 0
    4324:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
	DIO_setPortValue(LCD_DATA_PORT,PORT_OUTPUT);
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	6f ef       	ldi	r22, 0xFF	; 255
    432c:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <DIO_setPortValue>
	DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	67 e0       	ldi	r22, 0x07	; 7
    4334:	41 e0       	ldi	r20, 0x01	; 1
    4336:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
}
    433a:	cf 91       	pop	r28
    433c:	df 91       	pop	r29
    433e:	08 95       	ret

00004340 <LCD_init4bit>:

void LCD_init4bit(void)
{
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN0,OUTPUT);
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	41 e0       	ldi	r20, 0x01	; 1
    434e:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN1,OUTPUT);
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	61 e0       	ldi	r22, 0x01	; 1
    4356:	41 e0       	ldi	r20, 0x01	; 1
    4358:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN2,OUTPUT);
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	62 e0       	ldi	r22, 0x02	; 2
    4360:	41 e0       	ldi	r20, 0x01	; 1
    4362:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN3,OUTPUT);
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	63 e0       	ldi	r22, 0x03	; 3
    436a:	41 e0       	ldi	r20, 0x01	; 1
    436c:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	DIO_setPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,OUTPUT);
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	65 e0       	ldi	r22, 0x05	; 5
    4374:	41 e0       	ldi	r20, 0x01	; 1
    4376:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,OUTPUT);
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	66 e0       	ldi	r22, 0x06	; 6
    437e:	41 e0       	ldi	r20, 0x01	; 1
    4380:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CONTROL_PORT,LCD_ENABLE_PIN,OUTPUT);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	67 e0       	ldi	r22, 0x07	; 7
    4388:	41 e0       	ldi	r20, 0x01	; 1
    438a:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
}
    438e:	cf 91       	pop	r28
    4390:	df 91       	pop	r29
    4392:	08 95       	ret

00004394 <LCD_sendCommand_8bit>:
uint8 LCD_sendCommand_8bit(uint8 copy_LCD_command)
{
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	60 97       	sbiw	r28, 0x10	; 16
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	f8 94       	cli
    43a2:	de bf       	out	0x3e, r29	; 62
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	cd bf       	out	0x3d, r28	; 61
    43a8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 local_errorSignal = OK_STAT;
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,LOW);
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	65 e0       	ldi	r22, 0x05	; 5
    43b2:	40 e0       	ldi	r20, 0x00	; 0
    43b4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    43b8:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	66 e0       	ldi	r22, 0x06	; 6
    43be:	40 e0       	ldi	r20, 0x00	; 0
    43c0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    43c4:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPortValue(LCD_DATA_PORT,copy_LCD_command);
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	68 89       	ldd	r22, Y+16	; 0x10
    43ca:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <DIO_setPortValue>
    43ce:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	67 e0       	ldi	r22, 0x07	; 7
    43d4:	41 e0       	ldi	r20, 0x01	; 1
    43d6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    43da:	8f 87       	std	Y+15, r24	; 0x0f
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	a0 e0       	ldi	r26, 0x00	; 0
    43e2:	b0 e4       	ldi	r27, 0x40	; 64
    43e4:	8b 87       	std	Y+11, r24	; 0x0b
    43e6:	9c 87       	std	Y+12, r25	; 0x0c
    43e8:	ad 87       	std	Y+13, r26	; 0x0d
    43ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	4a e7       	ldi	r20, 0x7A	; 122
    43fa:	55 e4       	ldi	r21, 0x45	; 69
    43fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	8f 83       	std	Y+7, r24	; 0x07
    4406:	98 87       	std	Y+8, r25	; 0x08
    4408:	a9 87       	std	Y+9, r26	; 0x09
    440a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    440c:	6f 81       	ldd	r22, Y+7	; 0x07
    440e:	78 85       	ldd	r23, Y+8	; 0x08
    4410:	89 85       	ldd	r24, Y+9	; 0x09
    4412:	9a 85       	ldd	r25, Y+10	; 0x0a
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	40 e8       	ldi	r20, 0x80	; 128
    441a:	5f e3       	ldi	r21, 0x3F	; 63
    441c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4420:	88 23       	and	r24, r24
    4422:	2c f4       	brge	.+10     	; 0x442e <LCD_sendCommand_8bit+0x9a>
		__ticks = 1;
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	9e 83       	std	Y+6, r25	; 0x06
    442a:	8d 83       	std	Y+5, r24	; 0x05
    442c:	3f c0       	rjmp	.+126    	; 0x44ac <LCD_sendCommand_8bit+0x118>
	else if (__tmp > 65535)
    442e:	6f 81       	ldd	r22, Y+7	; 0x07
    4430:	78 85       	ldd	r23, Y+8	; 0x08
    4432:	89 85       	ldd	r24, Y+9	; 0x09
    4434:	9a 85       	ldd	r25, Y+10	; 0x0a
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	3f ef       	ldi	r19, 0xFF	; 255
    443a:	4f e7       	ldi	r20, 0x7F	; 127
    443c:	57 e4       	ldi	r21, 0x47	; 71
    443e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4442:	18 16       	cp	r1, r24
    4444:	4c f5       	brge	.+82     	; 0x4498 <LCD_sendCommand_8bit+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4446:	6b 85       	ldd	r22, Y+11	; 0x0b
    4448:	7c 85       	ldd	r23, Y+12	; 0x0c
    444a:	8d 85       	ldd	r24, Y+13	; 0x0d
    444c:	9e 85       	ldd	r25, Y+14	; 0x0e
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	40 e2       	ldi	r20, 0x20	; 32
    4454:	51 e4       	ldi	r21, 0x41	; 65
    4456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	bc 01       	movw	r22, r24
    4460:	cd 01       	movw	r24, r26
    4462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	9e 83       	std	Y+6, r25	; 0x06
    446c:	8d 83       	std	Y+5, r24	; 0x05
    446e:	0f c0       	rjmp	.+30     	; 0x448e <LCD_sendCommand_8bit+0xfa>
    4470:	80 e9       	ldi	r24, 0x90	; 144
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	9c 83       	std	Y+4, r25	; 0x04
    4476:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4478:	8b 81       	ldd	r24, Y+3	; 0x03
    447a:	9c 81       	ldd	r25, Y+4	; 0x04
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	f1 f7       	brne	.-4      	; 0x447c <LCD_sendCommand_8bit+0xe8>
    4480:	9c 83       	std	Y+4, r25	; 0x04
    4482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4484:	8d 81       	ldd	r24, Y+5	; 0x05
    4486:	9e 81       	ldd	r25, Y+6	; 0x06
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	9e 83       	std	Y+6, r25	; 0x06
    448c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448e:	8d 81       	ldd	r24, Y+5	; 0x05
    4490:	9e 81       	ldd	r25, Y+6	; 0x06
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	69 f7       	brne	.-38     	; 0x4470 <LCD_sendCommand_8bit+0xdc>
    4496:	14 c0       	rjmp	.+40     	; 0x44c0 <LCD_sendCommand_8bit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4498:	6f 81       	ldd	r22, Y+7	; 0x07
    449a:	78 85       	ldd	r23, Y+8	; 0x08
    449c:	89 85       	ldd	r24, Y+9	; 0x09
    449e:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a4:	dc 01       	movw	r26, r24
    44a6:	cb 01       	movw	r24, r22
    44a8:	9e 83       	std	Y+6, r25	; 0x06
    44aa:	8d 83       	std	Y+5, r24	; 0x05
    44ac:	8d 81       	ldd	r24, Y+5	; 0x05
    44ae:	9e 81       	ldd	r25, Y+6	; 0x06
    44b0:	9a 83       	std	Y+2, r25	; 0x02
    44b2:	89 83       	std	Y+1, r24	; 0x01
    44b4:	89 81       	ldd	r24, Y+1	; 0x01
    44b6:	9a 81       	ldd	r25, Y+2	; 0x02
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <LCD_sendCommand_8bit+0x124>
    44bc:	9a 83       	std	Y+2, r25	; 0x02
    44be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,LOW);
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	67 e0       	ldi	r22, 0x07	; 7
    44c4:	40 e0       	ldi	r20, 0x00	; 0
    44c6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    44ca:	8f 87       	std	Y+15, r24	; 0x0f
	return local_errorSignal;
    44cc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    44ce:	60 96       	adiw	r28, 0x10	; 16
    44d0:	0f b6       	in	r0, 0x3f	; 63
    44d2:	f8 94       	cli
    44d4:	de bf       	out	0x3e, r29	; 62
    44d6:	0f be       	out	0x3f, r0	; 63
    44d8:	cd bf       	out	0x3d, r28	; 61
    44da:	cf 91       	pop	r28
    44dc:	df 91       	pop	r29
    44de:	08 95       	ret

000044e0 <LCD_sendData_8bit>:

uint8 LCD_sendData_8bit(uint8 copy_LCD_data)
{
    44e0:	df 93       	push	r29
    44e2:	cf 93       	push	r28
    44e4:	cd b7       	in	r28, 0x3d	; 61
    44e6:	de b7       	in	r29, 0x3e	; 62
    44e8:	60 97       	sbiw	r28, 0x10	; 16
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	f8 94       	cli
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	cd bf       	out	0x3d, r28	; 61
    44f4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 local_errorSignal = OK_STAT;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,HIGH);
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	65 e0       	ldi	r22, 0x05	; 5
    44fe:	41 e0       	ldi	r20, 0x01	; 1
    4500:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4504:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	66 e0       	ldi	r22, 0x06	; 6
    450a:	40 e0       	ldi	r20, 0x00	; 0
    450c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4510:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPortValue(LCD_DATA_PORT,copy_LCD_data);
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	68 89       	ldd	r22, Y+16	; 0x10
    4516:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <DIO_setPortValue>
    451a:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	67 e0       	ldi	r22, 0x07	; 7
    4520:	41 e0       	ldi	r20, 0x01	; 1
    4522:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4526:	8f 87       	std	Y+15, r24	; 0x0f
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	a0 e0       	ldi	r26, 0x00	; 0
    452e:	b0 e4       	ldi	r27, 0x40	; 64
    4530:	8b 87       	std	Y+11, r24	; 0x0b
    4532:	9c 87       	std	Y+12, r25	; 0x0c
    4534:	ad 87       	std	Y+13, r26	; 0x0d
    4536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4538:	6b 85       	ldd	r22, Y+11	; 0x0b
    453a:	7c 85       	ldd	r23, Y+12	; 0x0c
    453c:	8d 85       	ldd	r24, Y+13	; 0x0d
    453e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	4a e7       	ldi	r20, 0x7A	; 122
    4546:	55 e4       	ldi	r21, 0x45	; 69
    4548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	8f 83       	std	Y+7, r24	; 0x07
    4552:	98 87       	std	Y+8, r25	; 0x08
    4554:	a9 87       	std	Y+9, r26	; 0x09
    4556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4558:	6f 81       	ldd	r22, Y+7	; 0x07
    455a:	78 85       	ldd	r23, Y+8	; 0x08
    455c:	89 85       	ldd	r24, Y+9	; 0x09
    455e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	40 e8       	ldi	r20, 0x80	; 128
    4566:	5f e3       	ldi	r21, 0x3F	; 63
    4568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    456c:	88 23       	and	r24, r24
    456e:	2c f4       	brge	.+10     	; 0x457a <LCD_sendData_8bit+0x9a>
		__ticks = 1;
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	9e 83       	std	Y+6, r25	; 0x06
    4576:	8d 83       	std	Y+5, r24	; 0x05
    4578:	3f c0       	rjmp	.+126    	; 0x45f8 <LCD_sendData_8bit+0x118>
	else if (__tmp > 65535)
    457a:	6f 81       	ldd	r22, Y+7	; 0x07
    457c:	78 85       	ldd	r23, Y+8	; 0x08
    457e:	89 85       	ldd	r24, Y+9	; 0x09
    4580:	9a 85       	ldd	r25, Y+10	; 0x0a
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	3f ef       	ldi	r19, 0xFF	; 255
    4586:	4f e7       	ldi	r20, 0x7F	; 127
    4588:	57 e4       	ldi	r21, 0x47	; 71
    458a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    458e:	18 16       	cp	r1, r24
    4590:	4c f5       	brge	.+82     	; 0x45e4 <LCD_sendData_8bit+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4592:	6b 85       	ldd	r22, Y+11	; 0x0b
    4594:	7c 85       	ldd	r23, Y+12	; 0x0c
    4596:	8d 85       	ldd	r24, Y+13	; 0x0d
    4598:	9e 85       	ldd	r25, Y+14	; 0x0e
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	40 e2       	ldi	r20, 0x20	; 32
    45a0:	51 e4       	ldi	r21, 0x41	; 65
    45a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	bc 01       	movw	r22, r24
    45ac:	cd 01       	movw	r24, r26
    45ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b2:	dc 01       	movw	r26, r24
    45b4:	cb 01       	movw	r24, r22
    45b6:	9e 83       	std	Y+6, r25	; 0x06
    45b8:	8d 83       	std	Y+5, r24	; 0x05
    45ba:	0f c0       	rjmp	.+30     	; 0x45da <LCD_sendData_8bit+0xfa>
    45bc:	80 e9       	ldi	r24, 0x90	; 144
    45be:	91 e0       	ldi	r25, 0x01	; 1
    45c0:	9c 83       	std	Y+4, r25	; 0x04
    45c2:	8b 83       	std	Y+3, r24	; 0x03
    45c4:	8b 81       	ldd	r24, Y+3	; 0x03
    45c6:	9c 81       	ldd	r25, Y+4	; 0x04
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	f1 f7       	brne	.-4      	; 0x45c8 <LCD_sendData_8bit+0xe8>
    45cc:	9c 83       	std	Y+4, r25	; 0x04
    45ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45d0:	8d 81       	ldd	r24, Y+5	; 0x05
    45d2:	9e 81       	ldd	r25, Y+6	; 0x06
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	9e 83       	std	Y+6, r25	; 0x06
    45d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45da:	8d 81       	ldd	r24, Y+5	; 0x05
    45dc:	9e 81       	ldd	r25, Y+6	; 0x06
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	69 f7       	brne	.-38     	; 0x45bc <LCD_sendData_8bit+0xdc>
    45e2:	14 c0       	rjmp	.+40     	; 0x460c <LCD_sendData_8bit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e4:	6f 81       	ldd	r22, Y+7	; 0x07
    45e6:	78 85       	ldd	r23, Y+8	; 0x08
    45e8:	89 85       	ldd	r24, Y+9	; 0x09
    45ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	9e 83       	std	Y+6, r25	; 0x06
    45f6:	8d 83       	std	Y+5, r24	; 0x05
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	9a 83       	std	Y+2, r25	; 0x02
    45fe:	89 83       	std	Y+1, r24	; 0x01
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	9a 81       	ldd	r25, Y+2	; 0x02
    4604:	01 97       	sbiw	r24, 0x01	; 1
    4606:	f1 f7       	brne	.-4      	; 0x4604 <LCD_sendData_8bit+0x124>
    4608:	9a 83       	std	Y+2, r25	; 0x02
    460a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,LOW);
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	67 e0       	ldi	r22, 0x07	; 7
    4610:	40 e0       	ldi	r20, 0x00	; 0
    4612:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4616:	8f 87       	std	Y+15, r24	; 0x0f
	return local_errorSignal;
    4618:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    461a:	60 96       	adiw	r28, 0x10	; 16
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	f8 94       	cli
    4620:	de bf       	out	0x3e, r29	; 62
    4622:	0f be       	out	0x3f, r0	; 63
    4624:	cd bf       	out	0x3d, r28	; 61
    4626:	cf 91       	pop	r28
    4628:	df 91       	pop	r29
    462a:	08 95       	ret

0000462c <LCD_init_8bit>:

uint8 LCD_init_8bit(void)
{
    462c:	df 93       	push	r29
    462e:	cf 93       	push	r28
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
    4634:	2f 97       	sbiw	r28, 0x0f	; 15
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	f8 94       	cli
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	cd bf       	out	0x3d, r28	; 61
	uint8 local_errorSignal = OK_STAT;
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	8f 87       	std	Y+15, r24	; 0x0f

	local_errorSignal = DIO_setPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	6f ef       	ldi	r22, 0xFF	; 255
    4648:	0e 94 77 1f 	call	0x3eee	; 0x3eee <DIO_setPortDirection>
    464c:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPortValue(LCD_DATA_PORT,PORT_LOW);
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <DIO_setPortValue>
    4656:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,OUTPUT);
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	65 e0       	ldi	r22, 0x05	; 5
    465c:	41 e0       	ldi	r20, 0x01	; 1
    465e:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4662:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,OUTPUT);
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	66 e0       	ldi	r22, 0x06	; 6
    4668:	41 e0       	ldi	r20, 0x01	; 1
    466a:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    466e:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_CONTROL_PORT,LCD_ENABLE_PIN,OUTPUT);
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	67 e0       	ldi	r22, 0x07	; 7
    4674:	41 e0       	ldi	r20, 0x01	; 1
    4676:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    467a:	8f 87       	std	Y+15, r24	; 0x0f
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	ac e0       	ldi	r26, 0x0C	; 12
    4682:	b2 e4       	ldi	r27, 0x42	; 66
    4684:	8b 87       	std	Y+11, r24	; 0x0b
    4686:	9c 87       	std	Y+12, r25	; 0x0c
    4688:	ad 87       	std	Y+13, r26	; 0x0d
    468a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468c:	6b 85       	ldd	r22, Y+11	; 0x0b
    468e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4690:	8d 85       	ldd	r24, Y+13	; 0x0d
    4692:	9e 85       	ldd	r25, Y+14	; 0x0e
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a e7       	ldi	r20, 0x7A	; 122
    469a:	55 e4       	ldi	r21, 0x45	; 69
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	8f 83       	std	Y+7, r24	; 0x07
    46a6:	98 87       	std	Y+8, r25	; 0x08
    46a8:	a9 87       	std	Y+9, r26	; 0x09
    46aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46ac:	6f 81       	ldd	r22, Y+7	; 0x07
    46ae:	78 85       	ldd	r23, Y+8	; 0x08
    46b0:	89 85       	ldd	r24, Y+9	; 0x09
    46b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e8       	ldi	r20, 0x80	; 128
    46ba:	5f e3       	ldi	r21, 0x3F	; 63
    46bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46c0:	88 23       	and	r24, r24
    46c2:	2c f4       	brge	.+10     	; 0x46ce <LCD_init_8bit+0xa2>
		__ticks = 1;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	9e 83       	std	Y+6, r25	; 0x06
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    46cc:	3f c0       	rjmp	.+126    	; 0x474c <LCD_init_8bit+0x120>
	else if (__tmp > 65535)
    46ce:	6f 81       	ldd	r22, Y+7	; 0x07
    46d0:	78 85       	ldd	r23, Y+8	; 0x08
    46d2:	89 85       	ldd	r24, Y+9	; 0x09
    46d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	3f ef       	ldi	r19, 0xFF	; 255
    46da:	4f e7       	ldi	r20, 0x7F	; 127
    46dc:	57 e4       	ldi	r21, 0x47	; 71
    46de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46e2:	18 16       	cp	r1, r24
    46e4:	4c f5       	brge	.+82     	; 0x4738 <LCD_init_8bit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e2       	ldi	r20, 0x20	; 32
    46f4:	51 e4       	ldi	r21, 0x41	; 65
    46f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	9e 83       	std	Y+6, r25	; 0x06
    470c:	8d 83       	std	Y+5, r24	; 0x05
    470e:	0f c0       	rjmp	.+30     	; 0x472e <LCD_init_8bit+0x102>
    4710:	80 e9       	ldi	r24, 0x90	; 144
    4712:	91 e0       	ldi	r25, 0x01	; 1
    4714:	9c 83       	std	Y+4, r25	; 0x04
    4716:	8b 83       	std	Y+3, r24	; 0x03
    4718:	8b 81       	ldd	r24, Y+3	; 0x03
    471a:	9c 81       	ldd	r25, Y+4	; 0x04
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <LCD_init_8bit+0xf0>
    4720:	9c 83       	std	Y+4, r25	; 0x04
    4722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	9e 81       	ldd	r25, Y+6	; 0x06
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	9e 83       	std	Y+6, r25	; 0x06
    472c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    472e:	8d 81       	ldd	r24, Y+5	; 0x05
    4730:	9e 81       	ldd	r25, Y+6	; 0x06
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	69 f7       	brne	.-38     	; 0x4710 <LCD_init_8bit+0xe4>
    4736:	14 c0       	rjmp	.+40     	; 0x4760 <LCD_init_8bit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4738:	6f 81       	ldd	r22, Y+7	; 0x07
    473a:	78 85       	ldd	r23, Y+8	; 0x08
    473c:	89 85       	ldd	r24, Y+9	; 0x09
    473e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	9e 83       	std	Y+6, r25	; 0x06
    474a:	8d 83       	std	Y+5, r24	; 0x05
    474c:	8d 81       	ldd	r24, Y+5	; 0x05
    474e:	9e 81       	ldd	r25, Y+6	; 0x06
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	f1 f7       	brne	.-4      	; 0x4758 <LCD_init_8bit+0x12c>
    475c:	9a 83       	std	Y+2, r25	; 0x02
    475e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	local_errorSignal = LCD_sendCommand_8bit(FUNCTION_SET_8BIT);
    4760:	88 e3       	ldi	r24, 0x38	; 56
    4762:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    4766:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_8bit(DISPLAY_CURSOR_BLINKING);
    4768:	8c e0       	ldi	r24, 0x0C	; 12
    476a:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    476e:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_8bit(DISPLAY_CLEAR);
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    4776:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_8bit(ENTRY_MODE);
    4778:	86 e0       	ldi	r24, 0x06	; 6
    477a:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    477e:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_8bit(PORT_LOW);
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    4786:	8f 87       	std	Y+15, r24	; 0x0f
	return local_errorSignal;
    4788:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    478a:	2f 96       	adiw	r28, 0x0f	; 15
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <LCD_sendDataAtAddress_8bit>:

/*reminder : we need to solve problem of having exceeded the column number*/
uint8 LCD_sendDataAtAddress_8bit(uint8 copy_LCD_row, uint8 copy_LCD_column,uint8 copy_LCD_data)
{
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	00 d0       	rcall	.+0      	; 0x47a2 <LCD_sendDataAtAddress_8bit+0x6>
    47a2:	00 d0       	rcall	.+0      	; 0x47a4 <LCD_sendDataAtAddress_8bit+0x8>
    47a4:	00 d0       	rcall	.+0      	; 0x47a6 <LCD_sendDataAtAddress_8bit+0xa>
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    47aa:	8a 83       	std	Y+2, r24	; 0x02
    47ac:	6b 83       	std	Y+3, r22	; 0x03
    47ae:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorSignal = OK_STAT;
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	89 83       	std	Y+1, r24	; 0x01

	if (copy_LCD_column <= 16)
    47b4:	8b 81       	ldd	r24, Y+3	; 0x03
    47b6:	81 31       	cpi	r24, 0x11	; 17
    47b8:	28 f5       	brcc	.+74     	; 0x4804 <LCD_sendDataAtAddress_8bit+0x68>
	{
		copy_LCD_column--;
    47ba:	8b 81       	ldd	r24, Y+3	; 0x03
    47bc:	81 50       	subi	r24, 0x01	; 1
    47be:	8b 83       	std	Y+3, r24	; 0x03
		switch (copy_LCD_row)
    47c0:	8a 81       	ldd	r24, Y+2	; 0x02
    47c2:	28 2f       	mov	r18, r24
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	3e 83       	std	Y+6, r19	; 0x06
    47c8:	2d 83       	std	Y+5, r18	; 0x05
    47ca:	8d 81       	ldd	r24, Y+5	; 0x05
    47cc:	9e 81       	ldd	r25, Y+6	; 0x06
    47ce:	81 30       	cpi	r24, 0x01	; 1
    47d0:	91 05       	cpc	r25, r1
    47d2:	31 f0       	breq	.+12     	; 0x47e0 <LCD_sendDataAtAddress_8bit+0x44>
    47d4:	2d 81       	ldd	r18, Y+5	; 0x05
    47d6:	3e 81       	ldd	r19, Y+6	; 0x06
    47d8:	22 30       	cpi	r18, 0x02	; 2
    47da:	31 05       	cpc	r19, r1
    47dc:	39 f0       	breq	.+14     	; 0x47ec <LCD_sendDataAtAddress_8bit+0x50>
    47de:	0c c0       	rjmp	.+24     	; 0x47f8 <LCD_sendDataAtAddress_8bit+0x5c>
		{
			case 1:
				local_errorSignal = LCD_sendCommand_8bit((LCD_DDRAM_ROW1 + copy_LCD_column));
    47e0:	8b 81       	ldd	r24, Y+3	; 0x03
    47e2:	80 58       	subi	r24, 0x80	; 128
    47e4:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    47e8:	89 83       	std	Y+1, r24	; 0x01
    47ea:	07 c0       	rjmp	.+14     	; 0x47fa <LCD_sendDataAtAddress_8bit+0x5e>
				break;
			case 2:
				local_errorSignal = LCD_sendCommand_8bit((LCD_DDRAM_ROW2 + copy_LCD_column));
    47ec:	8b 81       	ldd	r24, Y+3	; 0x03
    47ee:	80 54       	subi	r24, 0x40	; 64
    47f0:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    47f4:	89 83       	std	Y+1, r24	; 0x01
    47f6:	01 c0       	rjmp	.+2      	; 0x47fa <LCD_sendDataAtAddress_8bit+0x5e>
				break;
			default:
				local_errorSignal = NOT_OK_STAT;
    47f8:	19 82       	std	Y+1, r1	; 0x01
				break;
		}
		local_errorSignal = LCD_sendData_8bit(copy_LCD_data);
    47fa:	8c 81       	ldd	r24, Y+4	; 0x04
    47fc:	0e 94 70 22 	call	0x44e0	; 0x44e0 <LCD_sendData_8bit>
    4800:	89 83       	std	Y+1, r24	; 0x01
    4802:	01 c0       	rjmp	.+2      	; 0x4806 <LCD_sendDataAtAddress_8bit+0x6a>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    4804:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_errorSignal;
    4806:	89 81       	ldd	r24, Y+1	; 0x01
}
    4808:	26 96       	adiw	r28, 0x06	; 6
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	f8 94       	cli
    480e:	de bf       	out	0x3e, r29	; 62
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	cd bf       	out	0x3d, r28	; 61
    4814:	cf 91       	pop	r28
    4816:	df 91       	pop	r29
    4818:	08 95       	ret

0000481a <LCD_sendString_8bit>:

uint8 LCD_sendString_8bit(const char *copy_LCD_str)
{
    481a:	df 93       	push	r29
    481c:	cf 93       	push	r28
    481e:	00 d0       	rcall	.+0      	; 0x4820 <LCD_sendString_8bit+0x6>
    4820:	0f 92       	push	r0
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
    4826:	9b 83       	std	Y+3, r25	; 0x03
    4828:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_errorString = OK_STAT;
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	89 83       	std	Y+1, r24	; 0x01
    482e:	0b c0       	rjmp	.+22     	; 0x4846 <LCD_sendString_8bit+0x2c>
	for (;*copy_LCD_str;copy_LCD_str++)
	{
		local_errorString = LCD_sendData_8bit(*copy_LCD_str);
    4830:	ea 81       	ldd	r30, Y+2	; 0x02
    4832:	fb 81       	ldd	r31, Y+3	; 0x03
    4834:	80 81       	ld	r24, Z
    4836:	0e 94 70 22 	call	0x44e0	; 0x44e0 <LCD_sendData_8bit>
    483a:	89 83       	std	Y+1, r24	; 0x01
}

uint8 LCD_sendString_8bit(const char *copy_LCD_str)
{
	uint8 local_errorString = OK_STAT;
	for (;*copy_LCD_str;copy_LCD_str++)
    483c:	8a 81       	ldd	r24, Y+2	; 0x02
    483e:	9b 81       	ldd	r25, Y+3	; 0x03
    4840:	01 96       	adiw	r24, 0x01	; 1
    4842:	9b 83       	std	Y+3, r25	; 0x03
    4844:	8a 83       	std	Y+2, r24	; 0x02
    4846:	ea 81       	ldd	r30, Y+2	; 0x02
    4848:	fb 81       	ldd	r31, Y+3	; 0x03
    484a:	80 81       	ld	r24, Z
    484c:	88 23       	and	r24, r24
    484e:	81 f7       	brne	.-32     	; 0x4830 <LCD_sendString_8bit+0x16>
	{
		local_errorString = LCD_sendData_8bit(*copy_LCD_str);
	}
	return local_errorString;
    4850:	89 81       	ldd	r24, Y+1	; 0x01
}
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	cf 91       	pop	r28
    485a:	df 91       	pop	r29
    485c:	08 95       	ret

0000485e <LCD_sendStringAtAddress_8bit>:

uint8 LCD_sendStringAtAddress_8bit(uint8 copy_LCD_row, uint8 copy_LCD_column,const char *copy_LCD_string)
{
    485e:	df 93       	push	r29
    4860:	cf 93       	push	r28
    4862:	cd b7       	in	r28, 0x3d	; 61
    4864:	de b7       	in	r29, 0x3e	; 62
    4866:	27 97       	sbiw	r28, 0x07	; 7
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	f8 94       	cli
    486c:	de bf       	out	0x3e, r29	; 62
    486e:	0f be       	out	0x3f, r0	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	8a 83       	std	Y+2, r24	; 0x02
    4874:	6b 83       	std	Y+3, r22	; 0x03
    4876:	5d 83       	std	Y+5, r21	; 0x05
    4878:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorSignal = OK_STAT;
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	89 83       	std	Y+1, r24	; 0x01

		if (copy_LCD_column <= 16)
    487e:	8b 81       	ldd	r24, Y+3	; 0x03
    4880:	81 31       	cpi	r24, 0x11	; 17
    4882:	30 f5       	brcc	.+76     	; 0x48d0 <LCD_sendStringAtAddress_8bit+0x72>
		{
			copy_LCD_column--;
    4884:	8b 81       	ldd	r24, Y+3	; 0x03
    4886:	81 50       	subi	r24, 0x01	; 1
    4888:	8b 83       	std	Y+3, r24	; 0x03
			switch (copy_LCD_row)
    488a:	8a 81       	ldd	r24, Y+2	; 0x02
    488c:	28 2f       	mov	r18, r24
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	3f 83       	std	Y+7, r19	; 0x07
    4892:	2e 83       	std	Y+6, r18	; 0x06
    4894:	8e 81       	ldd	r24, Y+6	; 0x06
    4896:	9f 81       	ldd	r25, Y+7	; 0x07
    4898:	81 30       	cpi	r24, 0x01	; 1
    489a:	91 05       	cpc	r25, r1
    489c:	31 f0       	breq	.+12     	; 0x48aa <LCD_sendStringAtAddress_8bit+0x4c>
    489e:	2e 81       	ldd	r18, Y+6	; 0x06
    48a0:	3f 81       	ldd	r19, Y+7	; 0x07
    48a2:	22 30       	cpi	r18, 0x02	; 2
    48a4:	31 05       	cpc	r19, r1
    48a6:	39 f0       	breq	.+14     	; 0x48b6 <LCD_sendStringAtAddress_8bit+0x58>
    48a8:	0c c0       	rjmp	.+24     	; 0x48c2 <LCD_sendStringAtAddress_8bit+0x64>
			{
				case LCD_ROW1:
					local_errorSignal = LCD_sendCommand_8bit((LCD_DDRAM_ROW1 + copy_LCD_column));
    48aa:	8b 81       	ldd	r24, Y+3	; 0x03
    48ac:	80 58       	subi	r24, 0x80	; 128
    48ae:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    48b2:	89 83       	std	Y+1, r24	; 0x01
    48b4:	07 c0       	rjmp	.+14     	; 0x48c4 <LCD_sendStringAtAddress_8bit+0x66>
					break;
				case LCD_ROW2:
					local_errorSignal = LCD_sendCommand_8bit((LCD_DDRAM_ROW2 + copy_LCD_column));
    48b6:	8b 81       	ldd	r24, Y+3	; 0x03
    48b8:	80 54       	subi	r24, 0x40	; 64
    48ba:	0e 94 ca 21 	call	0x4394	; 0x4394 <LCD_sendCommand_8bit>
    48be:	89 83       	std	Y+1, r24	; 0x01
    48c0:	01 c0       	rjmp	.+2      	; 0x48c4 <LCD_sendStringAtAddress_8bit+0x66>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
    48c2:	19 82       	std	Y+1, r1	; 0x01
					break;
			}
			local_errorSignal = LCD_sendString_8bit(copy_LCD_string);
    48c4:	8c 81       	ldd	r24, Y+4	; 0x04
    48c6:	9d 81       	ldd	r25, Y+5	; 0x05
    48c8:	0e 94 0d 24 	call	0x481a	; 0x481a <LCD_sendString_8bit>
    48cc:	89 83       	std	Y+1, r24	; 0x01
    48ce:	01 c0       	rjmp	.+2      	; 0x48d2 <LCD_sendStringAtAddress_8bit+0x74>
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
    48d0:	19 82       	std	Y+1, r1	; 0x01
		}

		return local_errorSignal;
    48d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    48d4:	27 96       	adiw	r28, 0x07	; 7
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	f8 94       	cli
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	cd bf       	out	0x3d, r28	; 61
    48e0:	cf 91       	pop	r28
    48e2:	df 91       	pop	r29
    48e4:	08 95       	ret

000048e6 <LCD_sendCommand_4bit>:

uint8 LCD_sendCommand_4bit(uint8 copy_LCD_command)
{
    48e6:	df 93       	push	r29
    48e8:	cf 93       	push	r28
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
    48ee:	6e 97       	sbiw	r28, 0x1e	; 30
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	f8 94       	cli
    48f4:	de bf       	out	0x3e, r29	; 62
    48f6:	0f be       	out	0x3f, r0	; 63
    48f8:	cd bf       	out	0x3d, r28	; 61
    48fa:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 local_errorSignal = OK_STAT;
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,LOW);
    4900:	80 e0       	ldi	r24, 0x00	; 0
    4902:	65 e0       	ldi	r22, 0x05	; 5
    4904:	40 e0       	ldi	r20, 0x00	; 0
    4906:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    490a:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	66 e0       	ldi	r22, 0x06	; 6
    4910:	40 e0       	ldi	r20, 0x00	; 0
    4912:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4916:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_set4bitsValue((copy_LCD_command >> 4));
    4918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    491a:	82 95       	swap	r24
    491c:	8f 70       	andi	r24, 0x0F	; 15
    491e:	0e 94 ae 28 	call	0x515c	; 0x515c <DIO_set4bitsValue>
    4922:	8d 8f       	std	Y+29, r24	; 0x1d

	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	67 e0       	ldi	r22, 0x07	; 7
    4928:	41 e0       	ldi	r20, 0x01	; 1
    492a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    492e:	8d 8f       	std	Y+29, r24	; 0x1d
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	a0 e0       	ldi	r26, 0x00	; 0
    4936:	b0 e4       	ldi	r27, 0x40	; 64
    4938:	89 8f       	std	Y+25, r24	; 0x19
    493a:	9a 8f       	std	Y+26, r25	; 0x1a
    493c:	ab 8f       	std	Y+27, r26	; 0x1b
    493e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4940:	69 8d       	ldd	r22, Y+25	; 0x19
    4942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	4a e7       	ldi	r20, 0x7A	; 122
    494e:	55 e4       	ldi	r21, 0x45	; 69
    4950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	8d 8b       	std	Y+21, r24	; 0x15
    495a:	9e 8b       	std	Y+22, r25	; 0x16
    495c:	af 8b       	std	Y+23, r26	; 0x17
    495e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4960:	6d 89       	ldd	r22, Y+21	; 0x15
    4962:	7e 89       	ldd	r23, Y+22	; 0x16
    4964:	8f 89       	ldd	r24, Y+23	; 0x17
    4966:	98 8d       	ldd	r25, Y+24	; 0x18
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	40 e8       	ldi	r20, 0x80	; 128
    496e:	5f e3       	ldi	r21, 0x3F	; 63
    4970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4974:	88 23       	and	r24, r24
    4976:	2c f4       	brge	.+10     	; 0x4982 <LCD_sendCommand_4bit+0x9c>
		__ticks = 1;
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	9c 8b       	std	Y+20, r25	; 0x14
    497e:	8b 8b       	std	Y+19, r24	; 0x13
    4980:	3f c0       	rjmp	.+126    	; 0x4a00 <LCD_sendCommand_4bit+0x11a>
	else if (__tmp > 65535)
    4982:	6d 89       	ldd	r22, Y+21	; 0x15
    4984:	7e 89       	ldd	r23, Y+22	; 0x16
    4986:	8f 89       	ldd	r24, Y+23	; 0x17
    4988:	98 8d       	ldd	r25, Y+24	; 0x18
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	3f ef       	ldi	r19, 0xFF	; 255
    498e:	4f e7       	ldi	r20, 0x7F	; 127
    4990:	57 e4       	ldi	r21, 0x47	; 71
    4992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4996:	18 16       	cp	r1, r24
    4998:	4c f5       	brge	.+82     	; 0x49ec <LCD_sendCommand_4bit+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    499a:	69 8d       	ldd	r22, Y+25	; 0x19
    499c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    499e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49a2:	20 e0       	ldi	r18, 0x00	; 0
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	40 e2       	ldi	r20, 0x20	; 32
    49a8:	51 e4       	ldi	r21, 0x41	; 65
    49aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	bc 01       	movw	r22, r24
    49b4:	cd 01       	movw	r24, r26
    49b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	9c 8b       	std	Y+20, r25	; 0x14
    49c0:	8b 8b       	std	Y+19, r24	; 0x13
    49c2:	0f c0       	rjmp	.+30     	; 0x49e2 <LCD_sendCommand_4bit+0xfc>
    49c4:	80 e9       	ldi	r24, 0x90	; 144
    49c6:	91 e0       	ldi	r25, 0x01	; 1
    49c8:	9a 8b       	std	Y+18, r25	; 0x12
    49ca:	89 8b       	std	Y+17, r24	; 0x11
    49cc:	89 89       	ldd	r24, Y+17	; 0x11
    49ce:	9a 89       	ldd	r25, Y+18	; 0x12
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	f1 f7       	brne	.-4      	; 0x49d0 <LCD_sendCommand_4bit+0xea>
    49d4:	9a 8b       	std	Y+18, r25	; 0x12
    49d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d8:	8b 89       	ldd	r24, Y+19	; 0x13
    49da:	9c 89       	ldd	r25, Y+20	; 0x14
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	9c 8b       	std	Y+20, r25	; 0x14
    49e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e2:	8b 89       	ldd	r24, Y+19	; 0x13
    49e4:	9c 89       	ldd	r25, Y+20	; 0x14
    49e6:	00 97       	sbiw	r24, 0x00	; 0
    49e8:	69 f7       	brne	.-38     	; 0x49c4 <LCD_sendCommand_4bit+0xde>
    49ea:	14 c0       	rjmp	.+40     	; 0x4a14 <LCD_sendCommand_4bit+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ec:	6d 89       	ldd	r22, Y+21	; 0x15
    49ee:	7e 89       	ldd	r23, Y+22	; 0x16
    49f0:	8f 89       	ldd	r24, Y+23	; 0x17
    49f2:	98 8d       	ldd	r25, Y+24	; 0x18
    49f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	9c 8b       	std	Y+20, r25	; 0x14
    49fe:	8b 8b       	std	Y+19, r24	; 0x13
    4a00:	8b 89       	ldd	r24, Y+19	; 0x13
    4a02:	9c 89       	ldd	r25, Y+20	; 0x14
    4a04:	98 8b       	std	Y+16, r25	; 0x10
    4a06:	8f 87       	std	Y+15, r24	; 0x0f
    4a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a0a:	98 89       	ldd	r25, Y+16	; 0x10
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	f1 f7       	brne	.-4      	; 0x4a0c <LCD_sendCommand_4bit+0x126>
    4a10:	98 8b       	std	Y+16, r25	; 0x10
    4a12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,LOW);
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	67 e0       	ldi	r22, 0x07	; 7
    4a18:	40 e0       	ldi	r20, 0x00	; 0
    4a1a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4a1e:	8d 8f       	std	Y+29, r24	; 0x1d

	local_errorSignal = DIO_set4bitsValue(copy_LCD_command);
    4a20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a22:	0e 94 ae 28 	call	0x515c	; 0x515c <DIO_set4bitsValue>
    4a26:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    4a28:	80 e0       	ldi	r24, 0x00	; 0
    4a2a:	67 e0       	ldi	r22, 0x07	; 7
    4a2c:	41 e0       	ldi	r20, 0x01	; 1
    4a2e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4a32:	8d 8f       	std	Y+29, r24	; 0x1d
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	a0 e0       	ldi	r26, 0x00	; 0
    4a3a:	b0 e4       	ldi	r27, 0x40	; 64
    4a3c:	8b 87       	std	Y+11, r24	; 0x0b
    4a3e:	9c 87       	std	Y+12, r25	; 0x0c
    4a40:	ad 87       	std	Y+13, r26	; 0x0d
    4a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	4a e7       	ldi	r20, 0x7A	; 122
    4a52:	55 e4       	ldi	r21, 0x45	; 69
    4a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a58:	dc 01       	movw	r26, r24
    4a5a:	cb 01       	movw	r24, r22
    4a5c:	8f 83       	std	Y+7, r24	; 0x07
    4a5e:	98 87       	std	Y+8, r25	; 0x08
    4a60:	a9 87       	std	Y+9, r26	; 0x09
    4a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a64:	6f 81       	ldd	r22, Y+7	; 0x07
    4a66:	78 85       	ldd	r23, Y+8	; 0x08
    4a68:	89 85       	ldd	r24, Y+9	; 0x09
    4a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	40 e8       	ldi	r20, 0x80	; 128
    4a72:	5f e3       	ldi	r21, 0x3F	; 63
    4a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a78:	88 23       	and	r24, r24
    4a7a:	2c f4       	brge	.+10     	; 0x4a86 <LCD_sendCommand_4bit+0x1a0>
		__ticks = 1;
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	9e 83       	std	Y+6, r25	; 0x06
    4a82:	8d 83       	std	Y+5, r24	; 0x05
    4a84:	3f c0       	rjmp	.+126    	; 0x4b04 <LCD_sendCommand_4bit+0x21e>
	else if (__tmp > 65535)
    4a86:	6f 81       	ldd	r22, Y+7	; 0x07
    4a88:	78 85       	ldd	r23, Y+8	; 0x08
    4a8a:	89 85       	ldd	r24, Y+9	; 0x09
    4a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	3f ef       	ldi	r19, 0xFF	; 255
    4a92:	4f e7       	ldi	r20, 0x7F	; 127
    4a94:	57 e4       	ldi	r21, 0x47	; 71
    4a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a9a:	18 16       	cp	r1, r24
    4a9c:	4c f5       	brge	.+82     	; 0x4af0 <LCD_sendCommand_4bit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	40 e2       	ldi	r20, 0x20	; 32
    4aac:	51 e4       	ldi	r21, 0x41	; 65
    4aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	bc 01       	movw	r22, r24
    4ab8:	cd 01       	movw	r24, r26
    4aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	9e 83       	std	Y+6, r25	; 0x06
    4ac4:	8d 83       	std	Y+5, r24	; 0x05
    4ac6:	0f c0       	rjmp	.+30     	; 0x4ae6 <LCD_sendCommand_4bit+0x200>
    4ac8:	80 e9       	ldi	r24, 0x90	; 144
    4aca:	91 e0       	ldi	r25, 0x01	; 1
    4acc:	9c 83       	std	Y+4, r25	; 0x04
    4ace:	8b 83       	std	Y+3, r24	; 0x03
    4ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad4:	01 97       	sbiw	r24, 0x01	; 1
    4ad6:	f1 f7       	brne	.-4      	; 0x4ad4 <LCD_sendCommand_4bit+0x1ee>
    4ad8:	9c 83       	std	Y+4, r25	; 0x04
    4ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	9e 83       	std	Y+6, r25	; 0x06
    4ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aea:	00 97       	sbiw	r24, 0x00	; 0
    4aec:	69 f7       	brne	.-38     	; 0x4ac8 <LCD_sendCommand_4bit+0x1e2>
    4aee:	14 c0       	rjmp	.+40     	; 0x4b18 <LCD_sendCommand_4bit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af0:	6f 81       	ldd	r22, Y+7	; 0x07
    4af2:	78 85       	ldd	r23, Y+8	; 0x08
    4af4:	89 85       	ldd	r24, Y+9	; 0x09
    4af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afc:	dc 01       	movw	r26, r24
    4afe:	cb 01       	movw	r24, r22
    4b00:	9e 83       	std	Y+6, r25	; 0x06
    4b02:	8d 83       	std	Y+5, r24	; 0x05
    4b04:	8d 81       	ldd	r24, Y+5	; 0x05
    4b06:	9e 81       	ldd	r25, Y+6	; 0x06
    4b08:	9a 83       	std	Y+2, r25	; 0x02
    4b0a:	89 83       	std	Y+1, r24	; 0x01
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	f1 f7       	brne	.-4      	; 0x4b10 <LCD_sendCommand_4bit+0x22a>
    4b14:	9a 83       	std	Y+2, r25	; 0x02
    4b16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,LOW);
    4b18:	80 e0       	ldi	r24, 0x00	; 0
    4b1a:	67 e0       	ldi	r22, 0x07	; 7
    4b1c:	40 e0       	ldi	r20, 0x00	; 0
    4b1e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4b22:	8d 8f       	std	Y+29, r24	; 0x1d

	return local_errorSignal;
    4b24:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4b26:	6e 96       	adiw	r28, 0x1e	; 30
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	0f be       	out	0x3f, r0	; 63
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	cf 91       	pop	r28
    4b34:	df 91       	pop	r29
    4b36:	08 95       	ret

00004b38 <LCD_sendData_4bit>:

uint8 LCD_sendData_4bit(uint8 copy_LCD_data)
{
    4b38:	df 93       	push	r29
    4b3a:	cf 93       	push	r28
    4b3c:	cd b7       	in	r28, 0x3d	; 61
    4b3e:	de b7       	in	r29, 0x3e	; 62
    4b40:	6e 97       	sbiw	r28, 0x1e	; 30
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	f8 94       	cli
    4b46:	de bf       	out	0x3e, r29	; 62
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	cd bf       	out	0x3d, r28	; 61
    4b4c:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 local_errorSignal = OK_STAT;
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,HIGH);
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	65 e0       	ldi	r22, 0x05	; 5
    4b56:	41 e0       	ldi	r20, 0x01	; 1
    4b58:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	66 e0       	ldi	r22, 0x06	; 6
    4b62:	40 e0       	ldi	r20, 0x00	; 0
    4b64:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4b68:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_set4bitsValue((copy_LCD_data >> 4));
    4b6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b6c:	82 95       	swap	r24
    4b6e:	8f 70       	andi	r24, 0x0F	; 15
    4b70:	0e 94 ae 28 	call	0x515c	; 0x515c <DIO_set4bitsValue>
    4b74:	8d 8f       	std	Y+29, r24	; 0x1d

	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	67 e0       	ldi	r22, 0x07	; 7
    4b7a:	41 e0       	ldi	r20, 0x01	; 1
    4b7c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4b80:	8d 8f       	std	Y+29, r24	; 0x1d
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	a0 e0       	ldi	r26, 0x00	; 0
    4b88:	b0 e4       	ldi	r27, 0x40	; 64
    4b8a:	89 8f       	std	Y+25, r24	; 0x19
    4b8c:	9a 8f       	std	Y+26, r25	; 0x1a
    4b8e:	ab 8f       	std	Y+27, r26	; 0x1b
    4b90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b92:	69 8d       	ldd	r22, Y+25	; 0x19
    4b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	4a e7       	ldi	r20, 0x7A	; 122
    4ba0:	55 e4       	ldi	r21, 0x45	; 69
    4ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	8d 8b       	std	Y+21, r24	; 0x15
    4bac:	9e 8b       	std	Y+22, r25	; 0x16
    4bae:	af 8b       	std	Y+23, r26	; 0x17
    4bb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    4bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    4bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	40 e8       	ldi	r20, 0x80	; 128
    4bc0:	5f e3       	ldi	r21, 0x3F	; 63
    4bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bc6:	88 23       	and	r24, r24
    4bc8:	2c f4       	brge	.+10     	; 0x4bd4 <LCD_sendData_4bit+0x9c>
		__ticks = 1;
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	9c 8b       	std	Y+20, r25	; 0x14
    4bd0:	8b 8b       	std	Y+19, r24	; 0x13
    4bd2:	3f c0       	rjmp	.+126    	; 0x4c52 <LCD_sendData_4bit+0x11a>
	else if (__tmp > 65535)
    4bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    4bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    4bda:	98 8d       	ldd	r25, Y+24	; 0x18
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	3f ef       	ldi	r19, 0xFF	; 255
    4be0:	4f e7       	ldi	r20, 0x7F	; 127
    4be2:	57 e4       	ldi	r21, 0x47	; 71
    4be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4be8:	18 16       	cp	r1, r24
    4bea:	4c f5       	brge	.+82     	; 0x4c3e <LCD_sendData_4bit+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bec:	69 8d       	ldd	r22, Y+25	; 0x19
    4bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	40 e2       	ldi	r20, 0x20	; 32
    4bfa:	51 e4       	ldi	r21, 0x41	; 65
    4bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	bc 01       	movw	r22, r24
    4c06:	cd 01       	movw	r24, r26
    4c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	9c 8b       	std	Y+20, r25	; 0x14
    4c12:	8b 8b       	std	Y+19, r24	; 0x13
    4c14:	0f c0       	rjmp	.+30     	; 0x4c34 <LCD_sendData_4bit+0xfc>
    4c16:	80 e9       	ldi	r24, 0x90	; 144
    4c18:	91 e0       	ldi	r25, 0x01	; 1
    4c1a:	9a 8b       	std	Y+18, r25	; 0x12
    4c1c:	89 8b       	std	Y+17, r24	; 0x11
    4c1e:	89 89       	ldd	r24, Y+17	; 0x11
    4c20:	9a 89       	ldd	r25, Y+18	; 0x12
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	f1 f7       	brne	.-4      	; 0x4c22 <LCD_sendData_4bit+0xea>
    4c26:	9a 8b       	std	Y+18, r25	; 0x12
    4c28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c2e:	01 97       	sbiw	r24, 0x01	; 1
    4c30:	9c 8b       	std	Y+20, r25	; 0x14
    4c32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c34:	8b 89       	ldd	r24, Y+19	; 0x13
    4c36:	9c 89       	ldd	r25, Y+20	; 0x14
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	69 f7       	brne	.-38     	; 0x4c16 <LCD_sendData_4bit+0xde>
    4c3c:	14 c0       	rjmp	.+40     	; 0x4c66 <LCD_sendData_4bit+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c40:	7e 89       	ldd	r23, Y+22	; 0x16
    4c42:	8f 89       	ldd	r24, Y+23	; 0x17
    4c44:	98 8d       	ldd	r25, Y+24	; 0x18
    4c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	9c 8b       	std	Y+20, r25	; 0x14
    4c50:	8b 8b       	std	Y+19, r24	; 0x13
    4c52:	8b 89       	ldd	r24, Y+19	; 0x13
    4c54:	9c 89       	ldd	r25, Y+20	; 0x14
    4c56:	98 8b       	std	Y+16, r25	; 0x10
    4c58:	8f 87       	std	Y+15, r24	; 0x0f
    4c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c5c:	98 89       	ldd	r25, Y+16	; 0x10
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	f1 f7       	brne	.-4      	; 0x4c5e <LCD_sendData_4bit+0x126>
    4c62:	98 8b       	std	Y+16, r25	; 0x10
    4c64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,LOW);
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	67 e0       	ldi	r22, 0x07	; 7
    4c6a:	40 e0       	ldi	r20, 0x00	; 0
    4c6c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4c70:	8d 8f       	std	Y+29, r24	; 0x1d

	local_errorSignal = DIO_set4bitsValue(copy_LCD_data);
    4c72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c74:	0e 94 ae 28 	call	0x515c	; 0x515c <DIO_set4bitsValue>
    4c78:	8d 8f       	std	Y+29, r24	; 0x1d
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,HIGH);
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	67 e0       	ldi	r22, 0x07	; 7
    4c7e:	41 e0       	ldi	r20, 0x01	; 1
    4c80:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4c84:	8d 8f       	std	Y+29, r24	; 0x1d
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	a0 e0       	ldi	r26, 0x00	; 0
    4c8c:	b0 e4       	ldi	r27, 0x40	; 64
    4c8e:	8b 87       	std	Y+11, r24	; 0x0b
    4c90:	9c 87       	std	Y+12, r25	; 0x0c
    4c92:	ad 87       	std	Y+13, r26	; 0x0d
    4c94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	4a e7       	ldi	r20, 0x7A	; 122
    4ca4:	55 e4       	ldi	r21, 0x45	; 69
    4ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	8f 83       	std	Y+7, r24	; 0x07
    4cb0:	98 87       	std	Y+8, r25	; 0x08
    4cb2:	a9 87       	std	Y+9, r26	; 0x09
    4cb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    4cb8:	78 85       	ldd	r23, Y+8	; 0x08
    4cba:	89 85       	ldd	r24, Y+9	; 0x09
    4cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cbe:	20 e0       	ldi	r18, 0x00	; 0
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	40 e8       	ldi	r20, 0x80	; 128
    4cc4:	5f e3       	ldi	r21, 0x3F	; 63
    4cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cca:	88 23       	and	r24, r24
    4ccc:	2c f4       	brge	.+10     	; 0x4cd8 <LCD_sendData_4bit+0x1a0>
		__ticks = 1;
    4cce:	81 e0       	ldi	r24, 0x01	; 1
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	9e 83       	std	Y+6, r25	; 0x06
    4cd4:	8d 83       	std	Y+5, r24	; 0x05
    4cd6:	3f c0       	rjmp	.+126    	; 0x4d56 <LCD_sendData_4bit+0x21e>
	else if (__tmp > 65535)
    4cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cda:	78 85       	ldd	r23, Y+8	; 0x08
    4cdc:	89 85       	ldd	r24, Y+9	; 0x09
    4cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	3f ef       	ldi	r19, 0xFF	; 255
    4ce4:	4f e7       	ldi	r20, 0x7F	; 127
    4ce6:	57 e4       	ldi	r21, 0x47	; 71
    4ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cec:	18 16       	cp	r1, r24
    4cee:	4c f5       	brge	.+82     	; 0x4d42 <LCD_sendData_4bit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	40 e2       	ldi	r20, 0x20	; 32
    4cfe:	51 e4       	ldi	r21, 0x41	; 65
    4d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d04:	dc 01       	movw	r26, r24
    4d06:	cb 01       	movw	r24, r22
    4d08:	bc 01       	movw	r22, r24
    4d0a:	cd 01       	movw	r24, r26
    4d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	9e 83       	std	Y+6, r25	; 0x06
    4d16:	8d 83       	std	Y+5, r24	; 0x05
    4d18:	0f c0       	rjmp	.+30     	; 0x4d38 <LCD_sendData_4bit+0x200>
    4d1a:	80 e9       	ldi	r24, 0x90	; 144
    4d1c:	91 e0       	ldi	r25, 0x01	; 1
    4d1e:	9c 83       	std	Y+4, r25	; 0x04
    4d20:	8b 83       	std	Y+3, r24	; 0x03
    4d22:	8b 81       	ldd	r24, Y+3	; 0x03
    4d24:	9c 81       	ldd	r25, Y+4	; 0x04
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	f1 f7       	brne	.-4      	; 0x4d26 <LCD_sendData_4bit+0x1ee>
    4d2a:	9c 83       	std	Y+4, r25	; 0x04
    4d2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d30:	9e 81       	ldd	r25, Y+6	; 0x06
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	9e 83       	std	Y+6, r25	; 0x06
    4d36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d38:	8d 81       	ldd	r24, Y+5	; 0x05
    4d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d3c:	00 97       	sbiw	r24, 0x00	; 0
    4d3e:	69 f7       	brne	.-38     	; 0x4d1a <LCD_sendData_4bit+0x1e2>
    4d40:	14 c0       	rjmp	.+40     	; 0x4d6a <LCD_sendData_4bit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d42:	6f 81       	ldd	r22, Y+7	; 0x07
    4d44:	78 85       	ldd	r23, Y+8	; 0x08
    4d46:	89 85       	ldd	r24, Y+9	; 0x09
    4d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d4e:	dc 01       	movw	r26, r24
    4d50:	cb 01       	movw	r24, r22
    4d52:	9e 83       	std	Y+6, r25	; 0x06
    4d54:	8d 83       	std	Y+5, r24	; 0x05
    4d56:	8d 81       	ldd	r24, Y+5	; 0x05
    4d58:	9e 81       	ldd	r25, Y+6	; 0x06
    4d5a:	9a 83       	std	Y+2, r25	; 0x02
    4d5c:	89 83       	std	Y+1, r24	; 0x01
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	9a 81       	ldd	r25, Y+2	; 0x02
    4d62:	01 97       	sbiw	r24, 0x01	; 1
    4d64:	f1 f7       	brne	.-4      	; 0x4d62 <LCD_sendData_4bit+0x22a>
    4d66:	9a 83       	std	Y+2, r25	; 0x02
    4d68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_errorSignal = DIO_setPinValue(LCD_CONTROL_PORT,LCD_ENABLE_PIN,LOW);
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	67 e0       	ldi	r22, 0x07	; 7
    4d6e:	40 e0       	ldi	r20, 0x00	; 0
    4d70:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    4d74:	8d 8f       	std	Y+29, r24	; 0x1d
	return local_errorSignal;
    4d76:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    4d78:	6e 96       	adiw	r28, 0x1e	; 30
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61
    4d84:	cf 91       	pop	r28
    4d86:	df 91       	pop	r29
    4d88:	08 95       	ret

00004d8a <LCD_init_4bit>:

uint8 LCD_init_4bit(void)
{
    4d8a:	df 93       	push	r29
    4d8c:	cf 93       	push	r28
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    4d92:	2f 97       	sbiw	r28, 0x0f	; 15
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	cd bf       	out	0x3d, r28	; 61
	uint8 local_errorSignal = OK_STAT;
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN0,OUTPUT);
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	60 e0       	ldi	r22, 0x00	; 0
    4da6:	41 e0       	ldi	r20, 0x01	; 1
    4da8:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4dac:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN1,OUTPUT);
    4dae:	81 e0       	ldi	r24, 0x01	; 1
    4db0:	61 e0       	ldi	r22, 0x01	; 1
    4db2:	41 e0       	ldi	r20, 0x01	; 1
    4db4:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4db8:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN2,OUTPUT);
    4dba:	81 e0       	ldi	r24, 0x01	; 1
    4dbc:	62 e0       	ldi	r22, 0x02	; 2
    4dbe:	41 e0       	ldi	r20, 0x01	; 1
    4dc0:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4dc4:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_DATA_PORT,LCD_DATA_4BIT_PIN3,OUTPUT);
    4dc6:	81 e0       	ldi	r24, 0x01	; 1
    4dc8:	63 e0       	ldi	r22, 0x03	; 3
    4dca:	41 e0       	ldi	r20, 0x01	; 1
    4dcc:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4dd0:	8f 87       	std	Y+15, r24	; 0x0f

	local_errorSignal = DIO_setPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,OUTPUT);
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	65 e0       	ldi	r22, 0x05	; 5
    4dd6:	41 e0       	ldi	r20, 0x01	; 1
    4dd8:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4ddc:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,OUTPUT);
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	66 e0       	ldi	r22, 0x06	; 6
    4de2:	41 e0       	ldi	r20, 0x01	; 1
    4de4:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4de8:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = DIO_setPinDirection(LCD_CONTROL_PORT,LCD_ENABLE_PIN,OUTPUT);
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	67 e0       	ldi	r22, 0x07	; 7
    4dee:	41 e0       	ldi	r20, 0x01	; 1
    4df0:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
    4df4:	8f 87       	std	Y+15, r24	; 0x0f
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	ac e0       	ldi	r26, 0x0C	; 12
    4dfc:	b2 e4       	ldi	r27, 0x42	; 66
    4dfe:	8b 87       	std	Y+11, r24	; 0x0b
    4e00:	9c 87       	std	Y+12, r25	; 0x0c
    4e02:	ad 87       	std	Y+13, r26	; 0x0d
    4e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	4a e7       	ldi	r20, 0x7A	; 122
    4e14:	55 e4       	ldi	r21, 0x45	; 69
    4e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	8f 83       	std	Y+7, r24	; 0x07
    4e20:	98 87       	std	Y+8, r25	; 0x08
    4e22:	a9 87       	std	Y+9, r26	; 0x09
    4e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e26:	6f 81       	ldd	r22, Y+7	; 0x07
    4e28:	78 85       	ldd	r23, Y+8	; 0x08
    4e2a:	89 85       	ldd	r24, Y+9	; 0x09
    4e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	40 e8       	ldi	r20, 0x80	; 128
    4e34:	5f e3       	ldi	r21, 0x3F	; 63
    4e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e3a:	88 23       	and	r24, r24
    4e3c:	2c f4       	brge	.+10     	; 0x4e48 <LCD_init_4bit+0xbe>
		__ticks = 1;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	9e 83       	std	Y+6, r25	; 0x06
    4e44:	8d 83       	std	Y+5, r24	; 0x05
    4e46:	3f c0       	rjmp	.+126    	; 0x4ec6 <LCD_init_4bit+0x13c>
	else if (__tmp > 65535)
    4e48:	6f 81       	ldd	r22, Y+7	; 0x07
    4e4a:	78 85       	ldd	r23, Y+8	; 0x08
    4e4c:	89 85       	ldd	r24, Y+9	; 0x09
    4e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	3f ef       	ldi	r19, 0xFF	; 255
    4e54:	4f e7       	ldi	r20, 0x7F	; 127
    4e56:	57 e4       	ldi	r21, 0x47	; 71
    4e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e5c:	18 16       	cp	r1, r24
    4e5e:	4c f5       	brge	.+82     	; 0x4eb2 <LCD_init_4bit+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e2       	ldi	r20, 0x20	; 32
    4e6e:	51 e4       	ldi	r21, 0x41	; 65
    4e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	0f c0       	rjmp	.+30     	; 0x4ea8 <LCD_init_4bit+0x11e>
    4e8a:	80 e9       	ldi	r24, 0x90	; 144
    4e8c:	91 e0       	ldi	r25, 0x01	; 1
    4e8e:	9c 83       	std	Y+4, r25	; 0x04
    4e90:	8b 83       	std	Y+3, r24	; 0x03
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	f1 f7       	brne	.-4      	; 0x4e96 <LCD_init_4bit+0x10c>
    4e9a:	9c 83       	std	Y+4, r25	; 0x04
    4e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	01 97       	sbiw	r24, 0x01	; 1
    4ea4:	9e 83       	std	Y+6, r25	; 0x06
    4ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	69 f7       	brne	.-38     	; 0x4e8a <LCD_init_4bit+0x100>
    4eb0:	14 c0       	rjmp	.+40     	; 0x4eda <LCD_init_4bit+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb4:	78 85       	ldd	r23, Y+8	; 0x08
    4eb6:	89 85       	ldd	r24, Y+9	; 0x09
    4eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	9e 83       	std	Y+6, r25	; 0x06
    4ec4:	8d 83       	std	Y+5, r24	; 0x05
    4ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	f1 f7       	brne	.-4      	; 0x4ed2 <LCD_init_4bit+0x148>
    4ed6:	9a 83       	std	Y+2, r25	; 0x02
    4ed8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	local_errorSignal = LCD_sendCommand_4bit((FUNCTION_SET_4BIT >> 4));
    4eda:	82 e0       	ldi	r24, 0x02	; 2
    4edc:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4ee0:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_4bit(FUNCTION_SET_4BIT);
    4ee2:	88 e2       	ldi	r24, 0x28	; 40
    4ee4:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4ee8:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING);
    4eea:	8c e0       	ldi	r24, 0x0C	; 12
    4eec:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4ef0:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_4bit(DISPLAY_CLEAR);
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4ef8:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_4bit(ENTRY_MODE);
    4efa:	86 e0       	ldi	r24, 0x06	; 6
    4efc:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4f00:	8f 87       	std	Y+15, r24	; 0x0f
	local_errorSignal = LCD_sendCommand_4bit(PORT_LOW);
    4f02:	80 e0       	ldi	r24, 0x00	; 0
    4f04:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4f08:	8f 87       	std	Y+15, r24	; 0x0f

	return local_errorSignal;
    4f0a:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    4f0c:	2f 96       	adiw	r28, 0x0f	; 15
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	cf 91       	pop	r28
    4f1a:	df 91       	pop	r29
    4f1c:	08 95       	ret

00004f1e <LCD_sendDataAtAddress_4bit>:

uint8 LCD_sendDataAtAddress_4bit(uint8 copy_LCD_row, uint8 copy_LCD_column,uint8 copy_LCD_data)
{
    4f1e:	df 93       	push	r29
    4f20:	cf 93       	push	r28
    4f22:	00 d0       	rcall	.+0      	; 0x4f24 <LCD_sendDataAtAddress_4bit+0x6>
    4f24:	00 d0       	rcall	.+0      	; 0x4f26 <LCD_sendDataAtAddress_4bit+0x8>
    4f26:	00 d0       	rcall	.+0      	; 0x4f28 <LCD_sendDataAtAddress_4bit+0xa>
    4f28:	cd b7       	in	r28, 0x3d	; 61
    4f2a:	de b7       	in	r29, 0x3e	; 62
    4f2c:	8a 83       	std	Y+2, r24	; 0x02
    4f2e:	6b 83       	std	Y+3, r22	; 0x03
    4f30:	4c 83       	std	Y+4, r20	; 0x04
		uint8 local_errorSignal = OK_STAT;
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	89 83       	std	Y+1, r24	; 0x01

		if (copy_LCD_column <= 16)
    4f36:	8b 81       	ldd	r24, Y+3	; 0x03
    4f38:	81 31       	cpi	r24, 0x11	; 17
    4f3a:	28 f5       	brcc	.+74     	; 0x4f86 <LCD_sendDataAtAddress_4bit+0x68>
		{
			copy_LCD_column--;
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	81 50       	subi	r24, 0x01	; 1
    4f40:	8b 83       	std	Y+3, r24	; 0x03
			switch (copy_LCD_row)
    4f42:	8a 81       	ldd	r24, Y+2	; 0x02
    4f44:	28 2f       	mov	r18, r24
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	3e 83       	std	Y+6, r19	; 0x06
    4f4a:	2d 83       	std	Y+5, r18	; 0x05
    4f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f50:	81 30       	cpi	r24, 0x01	; 1
    4f52:	91 05       	cpc	r25, r1
    4f54:	31 f0       	breq	.+12     	; 0x4f62 <LCD_sendDataAtAddress_4bit+0x44>
    4f56:	2d 81       	ldd	r18, Y+5	; 0x05
    4f58:	3e 81       	ldd	r19, Y+6	; 0x06
    4f5a:	22 30       	cpi	r18, 0x02	; 2
    4f5c:	31 05       	cpc	r19, r1
    4f5e:	39 f0       	breq	.+14     	; 0x4f6e <LCD_sendDataAtAddress_4bit+0x50>
    4f60:	0c c0       	rjmp	.+24     	; 0x4f7a <LCD_sendDataAtAddress_4bit+0x5c>
			{
				case 1:
					local_errorSignal = LCD_sendCommand_4bit((LCD_DDRAM_ROW1 + copy_LCD_column));
    4f62:	8b 81       	ldd	r24, Y+3	; 0x03
    4f64:	80 58       	subi	r24, 0x80	; 128
    4f66:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4f6a:	89 83       	std	Y+1, r24	; 0x01
    4f6c:	07 c0       	rjmp	.+14     	; 0x4f7c <LCD_sendDataAtAddress_4bit+0x5e>
					break;
				case 2:
					local_errorSignal = LCD_sendCommand_4bit((LCD_DDRAM_ROW2 + copy_LCD_column));
    4f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f70:	80 54       	subi	r24, 0x40	; 64
    4f72:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    4f76:	89 83       	std	Y+1, r24	; 0x01
    4f78:	01 c0       	rjmp	.+2      	; 0x4f7c <LCD_sendDataAtAddress_4bit+0x5e>
					break;
				default:
					local_errorSignal = NOT_OK_STAT;
    4f7a:	19 82       	std	Y+1, r1	; 0x01
					break;
			}
			local_errorSignal = LCD_sendData_4bit(copy_LCD_data);
    4f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f7e:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <LCD_sendData_4bit>
    4f82:	89 83       	std	Y+1, r24	; 0x01
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <LCD_sendDataAtAddress_4bit+0x6a>
		}
		else
		{
			local_errorSignal = NOT_OK_STAT;
    4f86:	19 82       	std	Y+1, r1	; 0x01
		}

		return local_errorSignal;
    4f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f8a:	26 96       	adiw	r28, 0x06	; 6
    4f8c:	0f b6       	in	r0, 0x3f	; 63
    4f8e:	f8 94       	cli
    4f90:	de bf       	out	0x3e, r29	; 62
    4f92:	0f be       	out	0x3f, r0	; 63
    4f94:	cd bf       	out	0x3d, r28	; 61
    4f96:	cf 91       	pop	r28
    4f98:	df 91       	pop	r29
    4f9a:	08 95       	ret

00004f9c <LCD_sendString_4bit>:

uint8 LCD_sendString_4bit(const char *copy_LCD_str)
{
    4f9c:	df 93       	push	r29
    4f9e:	cf 93       	push	r28
    4fa0:	00 d0       	rcall	.+0      	; 0x4fa2 <LCD_sendString_4bit+0x6>
    4fa2:	0f 92       	push	r0
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
    4fa8:	9b 83       	std	Y+3, r25	; 0x03
    4faa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_errorString = OK_STAT;
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	89 83       	std	Y+1, r24	; 0x01
    4fb0:	0b c0       	rjmp	.+22     	; 0x4fc8 <LCD_sendString_4bit+0x2c>
	for (;*copy_LCD_str;copy_LCD_str++)
	{
		local_errorString = LCD_sendData_4bit(*copy_LCD_str);
    4fb2:	ea 81       	ldd	r30, Y+2	; 0x02
    4fb4:	fb 81       	ldd	r31, Y+3	; 0x03
    4fb6:	80 81       	ld	r24, Z
    4fb8:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <LCD_sendData_4bit>
    4fbc:	89 83       	std	Y+1, r24	; 0x01
}

uint8 LCD_sendString_4bit(const char *copy_LCD_str)
{
	uint8 local_errorString = OK_STAT;
	for (;*copy_LCD_str;copy_LCD_str++)
    4fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    4fc2:	01 96       	adiw	r24, 0x01	; 1
    4fc4:	9b 83       	std	Y+3, r25	; 0x03
    4fc6:	8a 83       	std	Y+2, r24	; 0x02
    4fc8:	ea 81       	ldd	r30, Y+2	; 0x02
    4fca:	fb 81       	ldd	r31, Y+3	; 0x03
    4fcc:	80 81       	ld	r24, Z
    4fce:	88 23       	and	r24, r24
    4fd0:	81 f7       	brne	.-32     	; 0x4fb2 <LCD_sendString_4bit+0x16>
	{
		local_errorString = LCD_sendData_4bit(*copy_LCD_str);
	}
	return local_errorString;
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fd4:	0f 90       	pop	r0
    4fd6:	0f 90       	pop	r0
    4fd8:	0f 90       	pop	r0
    4fda:	cf 91       	pop	r28
    4fdc:	df 91       	pop	r29
    4fde:	08 95       	ret

00004fe0 <LCD_sendStringAtAddress_4bit>:

uint8 LCD_sendStringAtAddress_4bit(uint8 copy_LCD_row, uint8 copy_LCD_column,const char *copy_LCD_string)
{
    4fe0:	df 93       	push	r29
    4fe2:	cf 93       	push	r28
    4fe4:	cd b7       	in	r28, 0x3d	; 61
    4fe6:	de b7       	in	r29, 0x3e	; 62
    4fe8:	27 97       	sbiw	r28, 0x07	; 7
    4fea:	0f b6       	in	r0, 0x3f	; 63
    4fec:	f8 94       	cli
    4fee:	de bf       	out	0x3e, r29	; 62
    4ff0:	0f be       	out	0x3f, r0	; 63
    4ff2:	cd bf       	out	0x3d, r28	; 61
    4ff4:	8a 83       	std	Y+2, r24	; 0x02
    4ff6:	6b 83       	std	Y+3, r22	; 0x03
    4ff8:	5d 83       	std	Y+5, r21	; 0x05
    4ffa:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorSignal = OK_STAT;
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	89 83       	std	Y+1, r24	; 0x01

	if (copy_LCD_column <= 16)
    5000:	8b 81       	ldd	r24, Y+3	; 0x03
    5002:	81 31       	cpi	r24, 0x11	; 17
    5004:	30 f5       	brcc	.+76     	; 0x5052 <LCD_sendStringAtAddress_4bit+0x72>
	{
		copy_LCD_column--;
    5006:	8b 81       	ldd	r24, Y+3	; 0x03
    5008:	81 50       	subi	r24, 0x01	; 1
    500a:	8b 83       	std	Y+3, r24	; 0x03
		switch (copy_LCD_row)
    500c:	8a 81       	ldd	r24, Y+2	; 0x02
    500e:	28 2f       	mov	r18, r24
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	3f 83       	std	Y+7, r19	; 0x07
    5014:	2e 83       	std	Y+6, r18	; 0x06
    5016:	8e 81       	ldd	r24, Y+6	; 0x06
    5018:	9f 81       	ldd	r25, Y+7	; 0x07
    501a:	81 30       	cpi	r24, 0x01	; 1
    501c:	91 05       	cpc	r25, r1
    501e:	31 f0       	breq	.+12     	; 0x502c <LCD_sendStringAtAddress_4bit+0x4c>
    5020:	2e 81       	ldd	r18, Y+6	; 0x06
    5022:	3f 81       	ldd	r19, Y+7	; 0x07
    5024:	22 30       	cpi	r18, 0x02	; 2
    5026:	31 05       	cpc	r19, r1
    5028:	39 f0       	breq	.+14     	; 0x5038 <LCD_sendStringAtAddress_4bit+0x58>
    502a:	0c c0       	rjmp	.+24     	; 0x5044 <LCD_sendStringAtAddress_4bit+0x64>
		{
		case 1:
			local_errorSignal = LCD_sendCommand_4bit((LCD_DDRAM_ROW1 + copy_LCD_column));
    502c:	8b 81       	ldd	r24, Y+3	; 0x03
    502e:	80 58       	subi	r24, 0x80	; 128
    5030:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    5034:	89 83       	std	Y+1, r24	; 0x01
    5036:	07 c0       	rjmp	.+14     	; 0x5046 <LCD_sendStringAtAddress_4bit+0x66>
			break;
		case 2:
			local_errorSignal = LCD_sendCommand_4bit((LCD_DDRAM_ROW2 + copy_LCD_column));
    5038:	8b 81       	ldd	r24, Y+3	; 0x03
    503a:	80 54       	subi	r24, 0x40	; 64
    503c:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    5040:	89 83       	std	Y+1, r24	; 0x01
    5042:	01 c0       	rjmp	.+2      	; 0x5046 <LCD_sendStringAtAddress_4bit+0x66>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
    5044:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		local_errorSignal = LCD_sendString_4bit(copy_LCD_string);
    5046:	8c 81       	ldd	r24, Y+4	; 0x04
    5048:	9d 81       	ldd	r25, Y+5	; 0x05
    504a:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
    504e:	89 83       	std	Y+1, r24	; 0x01
    5050:	01 c0       	rjmp	.+2      	; 0x5054 <LCD_sendStringAtAddress_4bit+0x74>
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    5052:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_errorSignal;
    5054:	89 81       	ldd	r24, Y+1	; 0x01
}
    5056:	27 96       	adiw	r28, 0x07	; 7
    5058:	0f b6       	in	r0, 0x3f	; 63
    505a:	f8 94       	cli
    505c:	de bf       	out	0x3e, r29	; 62
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	cd bf       	out	0x3d, r28	; 61
    5062:	cf 91       	pop	r28
    5064:	df 91       	pop	r29
    5066:	08 95       	ret

00005068 <LCD_sendNumber_4Bit>:

StdReturnType LCD_sendNumber_4Bit(uint8 copy_LCD_num)
{
    5068:	df 93       	push	r29
    506a:	cf 93       	push	r28
    506c:	00 d0       	rcall	.+0      	; 0x506e <LCD_sendNumber_4Bit+0x6>
    506e:	cd b7       	in	r28, 0x3d	; 61
    5070:	de b7       	in	r29, 0x3e	; 62
    5072:	89 83       	std	Y+1, r24	; 0x01
	convertNumToString(copy_LCD_num);
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	0e 94 e6 28 	call	0x51cc	; 0x51cc <convertNumToString>
	LCD_sendString_4bit(string);
    507a:	82 ee       	ldi	r24, 0xE2	; 226
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
}
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	cf 91       	pop	r28
    5088:	df 91       	pop	r29
    508a:	08 95       	ret

0000508c <LCD_sendNumberAtAddress_4Bit>:

StdReturnType LCD_sendNumberAtAddress_4Bit(uint8 copy_LCD_row, uint8 copy_LCD_column, uint8 copy_LCD_num)
{
    508c:	df 93       	push	r29
    508e:	cf 93       	push	r28
    5090:	00 d0       	rcall	.+0      	; 0x5092 <LCD_sendNumberAtAddress_4Bit+0x6>
    5092:	00 d0       	rcall	.+0      	; 0x5094 <LCD_sendNumberAtAddress_4Bit+0x8>
    5094:	cd b7       	in	r28, 0x3d	; 61
    5096:	de b7       	in	r29, 0x3e	; 62
    5098:	89 83       	std	Y+1, r24	; 0x01
    509a:	6a 83       	std	Y+2, r22	; 0x02
    509c:	4b 83       	std	Y+3, r20	; 0x03
	convertNumToString(copy_LCD_num);
    509e:	8b 81       	ldd	r24, Y+3	; 0x03
    50a0:	0e 94 e6 28 	call	0x51cc	; 0x51cc <convertNumToString>
	LCD_sendStringAtAddress_4bit(copy_LCD_row, copy_LCD_column,string);
    50a4:	22 ee       	ldi	r18, 0xE2	; 226
    50a6:	30 e0       	ldi	r19, 0x00	; 0
    50a8:	89 81       	ldd	r24, Y+1	; 0x01
    50aa:	6a 81       	ldd	r22, Y+2	; 0x02
    50ac:	a9 01       	movw	r20, r18
    50ae:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <LCD_sendStringAtAddress_4bit>
}
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
    50b6:	0f 90       	pop	r0
    50b8:	0f 90       	pop	r0
    50ba:	cf 91       	pop	r28
    50bc:	df 91       	pop	r29
    50be:	08 95       	ret

000050c0 <LCD_clearDisplay_4bit>:

StdReturnType LCD_clearDisplay_4bit(void)
{
    50c0:	df 93       	push	r29
    50c2:	cf 93       	push	r28
    50c4:	0f 92       	push	r0
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
	StdReturnType local_errorSignal = OK_STAT;
    50ca:	81 e0       	ldi	r24, 0x01	; 1
    50cc:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = LCD_sendCommand_4bit(DISPLAY_CLEAR);
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    50d4:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING);
    50d6:	8c e0       	ldi	r24, 0x0C	; 12
    50d8:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    50dc:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand_4bit(LCD_DDRAM_ROW1);
    50de:	80 e8       	ldi	r24, 0x80	; 128
    50e0:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>

	return local_errorSignal;
    50e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    50e6:	0f 90       	pop	r0
    50e8:	cf 91       	pop	r28
    50ea:	df 91       	pop	r29
    50ec:	08 95       	ret

000050ee <LCD_setCursorAt_4bit>:

StdReturnType LCD_setCursorAt_4bit(uint8 copy_LCD_row, uint8 copy_LCD_col)
{
    50ee:	df 93       	push	r29
    50f0:	cf 93       	push	r28
    50f2:	00 d0       	rcall	.+0      	; 0x50f4 <LCD_setCursorAt_4bit+0x6>
    50f4:	00 d0       	rcall	.+0      	; 0x50f6 <LCD_setCursorAt_4bit+0x8>
    50f6:	0f 92       	push	r0
    50f8:	cd b7       	in	r28, 0x3d	; 61
    50fa:	de b7       	in	r29, 0x3e	; 62
    50fc:	8a 83       	std	Y+2, r24	; 0x02
    50fe:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	89 83       	std	Y+1, r24	; 0x01

	if (copy_LCD_col <= 16)
    5104:	8b 81       	ldd	r24, Y+3	; 0x03
    5106:	81 31       	cpi	r24, 0x11	; 17
    5108:	f8 f4       	brcc	.+62     	; 0x5148 <LCD_setCursorAt_4bit+0x5a>
	{
		copy_LCD_col--;
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	81 50       	subi	r24, 0x01	; 1
    510e:	8b 83       	std	Y+3, r24	; 0x03
		switch (copy_LCD_row)
    5110:	8a 81       	ldd	r24, Y+2	; 0x02
    5112:	28 2f       	mov	r18, r24
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	3d 83       	std	Y+5, r19	; 0x05
    5118:	2c 83       	std	Y+4, r18	; 0x04
    511a:	8c 81       	ldd	r24, Y+4	; 0x04
    511c:	9d 81       	ldd	r25, Y+5	; 0x05
    511e:	81 30       	cpi	r24, 0x01	; 1
    5120:	91 05       	cpc	r25, r1
    5122:	31 f0       	breq	.+12     	; 0x5130 <LCD_setCursorAt_4bit+0x42>
    5124:	2c 81       	ldd	r18, Y+4	; 0x04
    5126:	3d 81       	ldd	r19, Y+5	; 0x05
    5128:	22 30       	cpi	r18, 0x02	; 2
    512a:	31 05       	cpc	r19, r1
    512c:	31 f0       	breq	.+12     	; 0x513a <LCD_setCursorAt_4bit+0x4c>
    512e:	0a c0       	rjmp	.+20     	; 0x5144 <LCD_setCursorAt_4bit+0x56>
		{
		case LCD_ROW1:
			LCD_sendCommand_4bit((LCD_DDRAM_ROW1 + copy_LCD_col));
    5130:	8b 81       	ldd	r24, Y+3	; 0x03
    5132:	80 58       	subi	r24, 0x80	; 128
    5134:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    5138:	08 c0       	rjmp	.+16     	; 0x514a <LCD_setCursorAt_4bit+0x5c>
			break;
		case LCD_ROW2:
			LCD_sendCommand_4bit((LCD_DDRAM_ROW2 + copy_LCD_col));
    513a:	8b 81       	ldd	r24, Y+3	; 0x03
    513c:	80 54       	subi	r24, 0x40	; 64
    513e:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    5142:	03 c0       	rjmp	.+6      	; 0x514a <LCD_setCursorAt_4bit+0x5c>
			break;
		default:
			local_errorSignal = NOT_OK_STAT;
    5144:	19 82       	std	Y+1, r1	; 0x01
    5146:	01 c0       	rjmp	.+2      	; 0x514a <LCD_setCursorAt_4bit+0x5c>
		}
	}
	else
	{
		local_errorSignal = NOT_OK_STAT;
    5148:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_errorSignal;
    514a:	89 81       	ldd	r24, Y+1	; 0x01
}
    514c:	0f 90       	pop	r0
    514e:	0f 90       	pop	r0
    5150:	0f 90       	pop	r0
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	cf 91       	pop	r28
    5158:	df 91       	pop	r29
    515a:	08 95       	ret

0000515c <DIO_set4bitsValue>:

static uint8 DIO_set4bitsValue(uint8 copy_DIO_value)
{
    515c:	df 93       	push	r29
    515e:	cf 93       	push	r28
    5160:	00 d0       	rcall	.+0      	; 0x5162 <DIO_set4bitsValue+0x6>
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
    5166:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_errorSignal = OK_STAT;
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(LCD_DATA_PORT,LCD_DATA_4BIT_PIN0,GET_BIT(copy_DIO_value,0));
    516c:	8a 81       	ldd	r24, Y+2	; 0x02
    516e:	98 2f       	mov	r25, r24
    5170:	91 70       	andi	r25, 0x01	; 1
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	60 e0       	ldi	r22, 0x00	; 0
    5176:	49 2f       	mov	r20, r25
    5178:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    517c:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(LCD_DATA_PORT,LCD_DATA_4BIT_PIN1,GET_BIT(copy_DIO_value,1));
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	86 95       	lsr	r24
    5182:	98 2f       	mov	r25, r24
    5184:	91 70       	andi	r25, 0x01	; 1
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	61 e0       	ldi	r22, 0x01	; 1
    518a:	49 2f       	mov	r20, r25
    518c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    5190:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(LCD_DATA_PORT,LCD_DATA_4BIT_PIN2,GET_BIT(copy_DIO_value,2));
    5192:	8a 81       	ldd	r24, Y+2	; 0x02
    5194:	86 95       	lsr	r24
    5196:	86 95       	lsr	r24
    5198:	98 2f       	mov	r25, r24
    519a:	91 70       	andi	r25, 0x01	; 1
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	62 e0       	ldi	r22, 0x02	; 2
    51a0:	49 2f       	mov	r20, r25
    51a2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    51a6:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(LCD_DATA_PORT,LCD_DATA_4BIT_PIN3,GET_BIT(copy_DIO_value,3));
    51a8:	8a 81       	ldd	r24, Y+2	; 0x02
    51aa:	86 95       	lsr	r24
    51ac:	86 95       	lsr	r24
    51ae:	86 95       	lsr	r24
    51b0:	98 2f       	mov	r25, r24
    51b2:	91 70       	andi	r25, 0x01	; 1
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	63 e0       	ldi	r22, 0x03	; 3
    51b8:	49 2f       	mov	r20, r25
    51ba:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    51be:	89 83       	std	Y+1, r24	; 0x01
	return local_errorSignal;
    51c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    51c2:	0f 90       	pop	r0
    51c4:	0f 90       	pop	r0
    51c6:	cf 91       	pop	r28
    51c8:	df 91       	pop	r29
    51ca:	08 95       	ret

000051cc <convertNumToString>:

static void convertNumToString(uint8 copy_num)
{
    51cc:	df 93       	push	r29
    51ce:	cf 93       	push	r28
    51d0:	00 d0       	rcall	.+0      	; 0x51d2 <convertNumToString+0x6>
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 counter = 2; copy_num != 0; copy_num /= 10 , counter--)
    51d8:	82 e0       	ldi	r24, 0x02	; 2
    51da:	89 83       	std	Y+1, r24	; 0x01
    51dc:	17 c0       	rjmp	.+46     	; 0x520c <convertNumToString+0x40>
	{
		string[counter] = (copy_num % 10) + '0';
    51de:	89 81       	ldd	r24, Y+1	; 0x01
    51e0:	28 2f       	mov	r18, r24
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	8a 81       	ldd	r24, Y+2	; 0x02
    51e6:	9a e0       	ldi	r25, 0x0A	; 10
    51e8:	69 2f       	mov	r22, r25
    51ea:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodqi4>
    51ee:	89 2f       	mov	r24, r25
    51f0:	80 5d       	subi	r24, 0xD0	; 208
    51f2:	f9 01       	movw	r30, r18
    51f4:	ee 51       	subi	r30, 0x1E	; 30
    51f6:	ff 4f       	sbci	r31, 0xFF	; 255
    51f8:	80 83       	st	Z, r24
	return local_errorSignal;
}

static void convertNumToString(uint8 copy_num)
{
	for(uint8 counter = 2; copy_num != 0; copy_num /= 10 , counter--)
    51fa:	8a 81       	ldd	r24, Y+2	; 0x02
    51fc:	9a e0       	ldi	r25, 0x0A	; 10
    51fe:	69 2f       	mov	r22, r25
    5200:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodqi4>
    5204:	8a 83       	std	Y+2, r24	; 0x02
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	81 50       	subi	r24, 0x01	; 1
    520a:	89 83       	std	Y+1, r24	; 0x01
    520c:	8a 81       	ldd	r24, Y+2	; 0x02
    520e:	88 23       	and	r24, r24
    5210:	31 f7       	brne	.-52     	; 0x51de <convertNumToString+0x12>
	{
		string[counter] = (copy_num % 10) + '0';
	}
}
    5212:	0f 90       	pop	r0
    5214:	0f 90       	pop	r0
    5216:	cf 91       	pop	r28
    5218:	df 91       	pop	r29
    521a:	08 95       	ret

0000521c <KEYPAD_init>:
static uint8 buttonsArray[KEYPAD_ROW_NUM][KEYPAD_COL_NUM] = KEYPAD_BUTTONS;
static uint8 rowPins[KEYPAD_ROW_NUM] = KEYPAD_ROW_PINS;
static uint8 colPins[KEYPAD_COL_NUM] = KEYPAD_COL_PINS;

void KEYPAD_init(void)
{
    521c:	df 93       	push	r29
    521e:	cf 93       	push	r28
    5220:	cd b7       	in	r28, 0x3d	; 61
    5222:	de b7       	in	r29, 0x3e	; 62
	/* OUTPUT PART*/

	DIO_setPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN0,OUTPUT);
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	62 e0       	ldi	r22, 0x02	; 2
    5228:	41 e0       	ldi	r20, 0x01	; 1
    522a:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN1,OUTPUT);
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	63 e0       	ldi	r22, 0x03	; 3
    5232:	41 e0       	ldi	r20, 0x01	; 1
    5234:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(KEYPAD_COL_PORT,KEYPAD_COL_PIN2,OUTPUT);
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	64 e0       	ldi	r22, 0x04	; 4
    523c:	41 e0       	ldi	r20, 0x01	; 1
    523e:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	/*INOUT PART*/

	DIO_setPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN0,INPUT);
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	64 e0       	ldi	r22, 0x04	; 4
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN1,INPUT);
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	65 e0       	ldi	r22, 0x05	; 5
    5250:	40 e0       	ldi	r20, 0x00	; 0
    5252:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN2,INPUT);
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	66 e0       	ldi	r22, 0x06	; 6
    525a:	40 e0       	ldi	r20, 0x00	; 0
    525c:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>
	DIO_setPinDirection(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN3,INPUT);
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	67 e0       	ldi	r22, 0x07	; 7
    5264:	40 e0       	ldi	r20, 0x00	; 0
    5266:	0e 94 18 1c 	call	0x3830	; 0x3830 <DIO_setPinDirection>

	DIO_setIntPullUpRes(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN0);
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	64 e0       	ldi	r22, 0x04	; 4
    526e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_setIntPullUpRes>
	DIO_setIntPullUpRes(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN1);
    5272:	81 e0       	ldi	r24, 0x01	; 1
    5274:	65 e0       	ldi	r22, 0x05	; 5
    5276:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_setIntPullUpRes>
	DIO_setIntPullUpRes(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN2);
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	66 e0       	ldi	r22, 0x06	; 6
    527e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_setIntPullUpRes>
	DIO_setIntPullUpRes(KEYPAD_ROW_PORT,KEYPAD_ROW_PIN3);
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	67 e0       	ldi	r22, 0x07	; 7
    5286:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <DIO_setIntPullUpRes>
}
    528a:	cf 91       	pop	r28
    528c:	df 91       	pop	r29
    528e:	08 95       	ret

00005290 <KEYPAD_getValue>:

uint8 KEYPAD_getValue(void)
{
    5290:	df 93       	push	r29
    5292:	cf 93       	push	r28
    5294:	00 d0       	rcall	.+0      	; 0x5296 <KEYPAD_getValue+0x6>
    5296:	00 d0       	rcall	.+0      	; 0x5298 <KEYPAD_getValue+0x8>
    5298:	cd b7       	in	r28, 0x3d	; 61
    529a:	de b7       	in	r29, 0x3e	; 62
	uint8 local_pressed_button = BUTTON_NOT_PRESSED;
    529c:	8f ef       	ldi	r24, 0xFF	; 255
    529e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 local_row_counter = 0;
    52a0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_col_counter = 0;
    52a2:	19 82       	std	Y+1, r1	; 0x01

	for (local_col_counter = 0; local_col_counter < KEYPAD_COL_NUM; local_col_counter++)
    52a4:	19 82       	std	Y+1, r1	; 0x01
    52a6:	5e c0       	rjmp	.+188    	; 0x5364 <KEYPAD_getValue+0xd4>
	{
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],LOW);
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
    52aa:	88 2f       	mov	r24, r24
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	fc 01       	movw	r30, r24
    52b0:	e7 50       	subi	r30, 0x07	; 7
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	90 81       	ld	r25, Z
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	69 2f       	mov	r22, r25
    52ba:	40 e0       	ldi	r20, 0x00	; 0
    52bc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
		for (local_row_counter = 0; local_row_counter < KEYPAD_ROW_NUM; local_row_counter++)
    52c0:	1a 82       	std	Y+2, r1	; 0x02
    52c2:	3d c0       	rjmp	.+122    	; 0x533e <KEYPAD_getValue+0xae>
		{
			DIO_readPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
    52c4:	8a 81       	ldd	r24, Y+2	; 0x02
    52c6:	88 2f       	mov	r24, r24
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	fc 01       	movw	r30, r24
    52cc:	eb 50       	subi	r30, 0x0B	; 11
    52ce:	ff 4f       	sbci	r31, 0xFF	; 255
    52d0:	90 81       	ld	r25, Z
    52d2:	9e 01       	movw	r18, r28
    52d4:	2d 5f       	subi	r18, 0xFD	; 253
    52d6:	3f 4f       	sbci	r19, 0xFF	; 255
    52d8:	81 e0       	ldi	r24, 0x01	; 1
    52da:	69 2f       	mov	r22, r25
    52dc:	a9 01       	movw	r20, r18
    52de:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <DIO_readPinValue>
			if (local_pressed_button == LOW)
    52e2:	8b 81       	ldd	r24, Y+3	; 0x03
    52e4:	88 23       	and	r24, r24
    52e6:	41 f5       	brne	.+80     	; 0x5338 <KEYPAD_getValue+0xa8>
    52e8:	0f c0       	rjmp	.+30     	; 0x5308 <KEYPAD_getValue+0x78>
			{
				while (local_pressed_button == LOW)
				{
					DIO_readPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
    52ea:	8a 81       	ldd	r24, Y+2	; 0x02
    52ec:	88 2f       	mov	r24, r24
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	fc 01       	movw	r30, r24
    52f2:	eb 50       	subi	r30, 0x0B	; 11
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	90 81       	ld	r25, Z
    52f8:	9e 01       	movw	r18, r28
    52fa:	2d 5f       	subi	r18, 0xFD	; 253
    52fc:	3f 4f       	sbci	r19, 0xFF	; 255
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	69 2f       	mov	r22, r25
    5302:	a9 01       	movw	r20, r18
    5304:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <DIO_readPinValue>
		for (local_row_counter = 0; local_row_counter < KEYPAD_ROW_NUM; local_row_counter++)
		{
			DIO_readPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
			if (local_pressed_button == LOW)
			{
				while (local_pressed_button == LOW)
    5308:	8b 81       	ldd	r24, Y+3	; 0x03
    530a:	88 23       	and	r24, r24
    530c:	71 f3       	breq	.-36     	; 0x52ea <KEYPAD_getValue+0x5a>
				{
					DIO_readPinValue(KEYPAD_ROW_PORT,rowPins[local_row_counter],&local_pressed_button);
				}
				local_pressed_button = buttonsArray[local_row_counter][local_col_counter];
    530e:	8a 81       	ldd	r24, Y+2	; 0x02
    5310:	48 2f       	mov	r20, r24
    5312:	50 e0       	ldi	r21, 0x00	; 0
    5314:	89 81       	ldd	r24, Y+1	; 0x01
    5316:	28 2f       	mov	r18, r24
    5318:	30 e0       	ldi	r19, 0x00	; 0
    531a:	ca 01       	movw	r24, r20
    531c:	88 0f       	add	r24, r24
    531e:	99 1f       	adc	r25, r25
    5320:	88 0f       	add	r24, r24
    5322:	99 1f       	adc	r25, r25
    5324:	82 0f       	add	r24, r18
    5326:	93 1f       	adc	r25, r19
    5328:	fc 01       	movw	r30, r24
    532a:	eb 51       	subi	r30, 0x1B	; 27
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	80 81       	ld	r24, Z
    5330:	8b 83       	std	Y+3, r24	; 0x03
				return local_pressed_button;
    5332:	8b 81       	ldd	r24, Y+3	; 0x03
    5334:	8c 83       	std	Y+4, r24	; 0x04
    5336:	1e c0       	rjmp	.+60     	; 0x5374 <KEYPAD_getValue+0xe4>
	uint8 local_col_counter = 0;

	for (local_col_counter = 0; local_col_counter < KEYPAD_COL_NUM; local_col_counter++)
	{
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],LOW);
		for (local_row_counter = 0; local_row_counter < KEYPAD_ROW_NUM; local_row_counter++)
    5338:	8a 81       	ldd	r24, Y+2	; 0x02
    533a:	8f 5f       	subi	r24, 0xFF	; 255
    533c:	8a 83       	std	Y+2, r24	; 0x02
    533e:	8a 81       	ldd	r24, Y+2	; 0x02
    5340:	84 30       	cpi	r24, 0x04	; 4
    5342:	08 f4       	brcc	.+2      	; 0x5346 <KEYPAD_getValue+0xb6>
    5344:	bf cf       	rjmp	.-130    	; 0x52c4 <KEYPAD_getValue+0x34>
				}
				local_pressed_button = buttonsArray[local_row_counter][local_col_counter];
				return local_pressed_button;
			}
		}
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],HIGH);
    5346:	89 81       	ldd	r24, Y+1	; 0x01
    5348:	88 2f       	mov	r24, r24
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	fc 01       	movw	r30, r24
    534e:	e7 50       	subi	r30, 0x07	; 7
    5350:	ff 4f       	sbci	r31, 0xFF	; 255
    5352:	90 81       	ld	r25, Z
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	69 2f       	mov	r22, r25
    5358:	41 e0       	ldi	r20, 0x01	; 1
    535a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
{
	uint8 local_pressed_button = BUTTON_NOT_PRESSED;
	uint8 local_row_counter = 0;
	uint8 local_col_counter = 0;

	for (local_col_counter = 0; local_col_counter < KEYPAD_COL_NUM; local_col_counter++)
    535e:	89 81       	ldd	r24, Y+1	; 0x01
    5360:	8f 5f       	subi	r24, 0xFF	; 255
    5362:	89 83       	std	Y+1, r24	; 0x01
    5364:	89 81       	ldd	r24, Y+1	; 0x01
    5366:	84 30       	cpi	r24, 0x04	; 4
    5368:	08 f4       	brcc	.+2      	; 0x536c <KEYPAD_getValue+0xdc>
    536a:	9e cf       	rjmp	.-196    	; 0x52a8 <KEYPAD_getValue+0x18>
				return local_pressed_button;
			}
		}
		DIO_setPinValue(KEYPAD_COL_PORT,colPins[local_col_counter],HIGH);
	}
	local_pressed_button = BUTTON_NOT_PRESSED;
    536c:	8f ef       	ldi	r24, 0xFF	; 255
    536e:	8b 83       	std	Y+3, r24	; 0x03
	return local_pressed_button;
    5370:	8b 81       	ldd	r24, Y+3	; 0x03
    5372:	8c 83       	std	Y+4, r24	; 0x04
    5374:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	cf 91       	pop	r28
    5380:	df 91       	pop	r29
    5382:	08 95       	ret

00005384 <KEYPAD_getString>:

void KEYPAD_getString(char *copy_KEYPAD_ptr, uint8 copy_KEYPAD_max)
{
    5384:	0f 93       	push	r16
    5386:	1f 93       	push	r17
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	00 d0       	rcall	.+0      	; 0x538e <KEYPAD_getString+0xa>
    538e:	00 d0       	rcall	.+0      	; 0x5390 <KEYPAD_getString+0xc>
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	9b 83       	std	Y+3, r25	; 0x03
    5396:	8a 83       	std	Y+2, r24	; 0x02
    5398:	6c 83       	std	Y+4, r22	; 0x04
	uint8 local_counter = 0;
    539a:	19 82       	std	Y+1, r1	; 0x01
    539c:	0f c0       	rjmp	.+30     	; 0x53bc <KEYPAD_getString+0x38>
	for (; local_counter < copy_KEYPAD_max; local_counter++)
	{
		copy_KEYPAD_ptr[local_counter] = KEYPAD_getValue();
    539e:	89 81       	ldd	r24, Y+1	; 0x01
    53a0:	28 2f       	mov	r18, r24
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	8a 81       	ldd	r24, Y+2	; 0x02
    53a6:	9b 81       	ldd	r25, Y+3	; 0x03
    53a8:	8c 01       	movw	r16, r24
    53aa:	02 0f       	add	r16, r18
    53ac:	13 1f       	adc	r17, r19
    53ae:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    53b2:	f8 01       	movw	r30, r16
    53b4:	80 83       	st	Z, r24
}

void KEYPAD_getString(char *copy_KEYPAD_ptr, uint8 copy_KEYPAD_max)
{
	uint8 local_counter = 0;
	for (; local_counter < copy_KEYPAD_max; local_counter++)
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	8f 5f       	subi	r24, 0xFF	; 255
    53ba:	89 83       	std	Y+1, r24	; 0x01
    53bc:	99 81       	ldd	r25, Y+1	; 0x01
    53be:	8c 81       	ldd	r24, Y+4	; 0x04
    53c0:	98 17       	cp	r25, r24
    53c2:	68 f3       	brcs	.-38     	; 0x539e <KEYPAD_getString+0x1a>
	{
		copy_KEYPAD_ptr[local_counter] = KEYPAD_getValue();
	}
}
    53c4:	0f 90       	pop	r0
    53c6:	0f 90       	pop	r0
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    53cc:	cf 91       	pop	r28
    53ce:	df 91       	pop	r29
    53d0:	1f 91       	pop	r17
    53d2:	0f 91       	pop	r16
    53d4:	08 95       	ret

000053d6 <EEPROM_INIT>:
#include "EEPROM_Config.h"
#include "EEPROM_Private.h"
#include "EEPROM_Interface.h"

void EEPROM_INIT(void)
{
    53d6:	df 93       	push	r29
    53d8:	cf 93       	push	r28
    53da:	cd b7       	in	r28, 0x3d	; 61
    53dc:	de b7       	in	r29, 0x3e	; 62
	TWI_InitMaster(0);
    53de:	80 e0       	ldi	r24, 0x00	; 0
    53e0:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <TWI_InitMaster>
}
    53e4:	cf 91       	pop	r28
    53e6:	df 91       	pop	r29
    53e8:	08 95       	ret

000053ea <EEPROM_voidSendDataByte>:
void EEPROM_voidSendDataByte(uint16 Copy_uint16LocationAddress, uint8 Copy_uint8DataByte)
{
    53ea:	df 93       	push	r29
    53ec:	cf 93       	push	r28
    53ee:	cd b7       	in	r28, 0x3d	; 61
    53f0:	de b7       	in	r29, 0x3e	; 62
    53f2:	62 97       	sbiw	r28, 0x12	; 18
    53f4:	0f b6       	in	r0, 0x3f	; 63
    53f6:	f8 94       	cli
    53f8:	de bf       	out	0x3e, r29	; 62
    53fa:	0f be       	out	0x3f, r0	; 63
    53fc:	cd bf       	out	0x3d, r28	; 61
    53fe:	99 8b       	std	Y+17, r25	; 0x11
    5400:	88 8b       	std	Y+16, r24	; 0x10
    5402:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 Local_uint8AddressPacket;

	Local_uint8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (uint8)(Copy_uint16LocationAddress >>8);
    5404:	88 89       	ldd	r24, Y+16	; 0x10
    5406:	99 89       	ldd	r25, Y+17	; 0x11
    5408:	89 2f       	mov	r24, r25
    540a:	99 27       	eor	r25, r25
    540c:	80 65       	ori	r24, 0x50	; 80
    540e:	8f 87       	std	Y+15, r24	; 0x0f

	/*2k EEPROM*/
//  Local_uint8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;

	/*Send start condition*/
	TWI_SendStartCondition();
    5410:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_uint8AddressPacket);
    5414:	8f 85       	ldd	r24, Y+15	; 0x0f
    5416:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((uint8)Copy_uint16LocationAddress);
    541a:	88 89       	ldd	r24, Y+16	; 0x10
    541c:	0e 94 65 1b 	call	0x36ca	; 0x36ca <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_uint8DataByte);
    5420:	8a 89       	ldd	r24, Y+18	; 0x12
    5422:	0e 94 65 1b 	call	0x36ca	; 0x36ca <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    5426:	0e 94 bd 1b 	call	0x377a	; 0x377a <TWI_SendStopCondition>
    542a:	80 e0       	ldi	r24, 0x00	; 0
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	a0 e2       	ldi	r26, 0x20	; 32
    5430:	b1 e4       	ldi	r27, 0x41	; 65
    5432:	8b 87       	std	Y+11, r24	; 0x0b
    5434:	9c 87       	std	Y+12, r25	; 0x0c
    5436:	ad 87       	std	Y+13, r26	; 0x0d
    5438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    543a:	6b 85       	ldd	r22, Y+11	; 0x0b
    543c:	7c 85       	ldd	r23, Y+12	; 0x0c
    543e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5440:	9e 85       	ldd	r25, Y+14	; 0x0e
    5442:	20 e0       	ldi	r18, 0x00	; 0
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	4a e7       	ldi	r20, 0x7A	; 122
    5448:	55 e4       	ldi	r21, 0x45	; 69
    544a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544e:	dc 01       	movw	r26, r24
    5450:	cb 01       	movw	r24, r22
    5452:	8f 83       	std	Y+7, r24	; 0x07
    5454:	98 87       	std	Y+8, r25	; 0x08
    5456:	a9 87       	std	Y+9, r26	; 0x09
    5458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    545a:	6f 81       	ldd	r22, Y+7	; 0x07
    545c:	78 85       	ldd	r23, Y+8	; 0x08
    545e:	89 85       	ldd	r24, Y+9	; 0x09
    5460:	9a 85       	ldd	r25, Y+10	; 0x0a
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	40 e8       	ldi	r20, 0x80	; 128
    5468:	5f e3       	ldi	r21, 0x3F	; 63
    546a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    546e:	88 23       	and	r24, r24
    5470:	2c f4       	brge	.+10     	; 0x547c <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	9e 83       	std	Y+6, r25	; 0x06
    5478:	8d 83       	std	Y+5, r24	; 0x05
    547a:	3f c0       	rjmp	.+126    	; 0x54fa <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    547c:	6f 81       	ldd	r22, Y+7	; 0x07
    547e:	78 85       	ldd	r23, Y+8	; 0x08
    5480:	89 85       	ldd	r24, Y+9	; 0x09
    5482:	9a 85       	ldd	r25, Y+10	; 0x0a
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	3f ef       	ldi	r19, 0xFF	; 255
    5488:	4f e7       	ldi	r20, 0x7F	; 127
    548a:	57 e4       	ldi	r21, 0x47	; 71
    548c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5490:	18 16       	cp	r1, r24
    5492:	4c f5       	brge	.+82     	; 0x54e6 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5494:	6b 85       	ldd	r22, Y+11	; 0x0b
    5496:	7c 85       	ldd	r23, Y+12	; 0x0c
    5498:	8d 85       	ldd	r24, Y+13	; 0x0d
    549a:	9e 85       	ldd	r25, Y+14	; 0x0e
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	40 e2       	ldi	r20, 0x20	; 32
    54a2:	51 e4       	ldi	r21, 0x41	; 65
    54a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a8:	dc 01       	movw	r26, r24
    54aa:	cb 01       	movw	r24, r22
    54ac:	bc 01       	movw	r22, r24
    54ae:	cd 01       	movw	r24, r26
    54b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b4:	dc 01       	movw	r26, r24
    54b6:	cb 01       	movw	r24, r22
    54b8:	9e 83       	std	Y+6, r25	; 0x06
    54ba:	8d 83       	std	Y+5, r24	; 0x05
    54bc:	0f c0       	rjmp	.+30     	; 0x54dc <EEPROM_voidSendDataByte+0xf2>
    54be:	80 e9       	ldi	r24, 0x90	; 144
    54c0:	91 e0       	ldi	r25, 0x01	; 1
    54c2:	9c 83       	std	Y+4, r25	; 0x04
    54c4:	8b 83       	std	Y+3, r24	; 0x03
    54c6:	8b 81       	ldd	r24, Y+3	; 0x03
    54c8:	9c 81       	ldd	r25, Y+4	; 0x04
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	f1 f7       	brne	.-4      	; 0x54ca <EEPROM_voidSendDataByte+0xe0>
    54ce:	9c 83       	std	Y+4, r25	; 0x04
    54d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54d2:	8d 81       	ldd	r24, Y+5	; 0x05
    54d4:	9e 81       	ldd	r25, Y+6	; 0x06
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	9e 83       	std	Y+6, r25	; 0x06
    54da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54dc:	8d 81       	ldd	r24, Y+5	; 0x05
    54de:	9e 81       	ldd	r25, Y+6	; 0x06
    54e0:	00 97       	sbiw	r24, 0x00	; 0
    54e2:	69 f7       	brne	.-38     	; 0x54be <EEPROM_voidSendDataByte+0xd4>
    54e4:	14 c0       	rjmp	.+40     	; 0x550e <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54e6:	6f 81       	ldd	r22, Y+7	; 0x07
    54e8:	78 85       	ldd	r23, Y+8	; 0x08
    54ea:	89 85       	ldd	r24, Y+9	; 0x09
    54ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    54ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f2:	dc 01       	movw	r26, r24
    54f4:	cb 01       	movw	r24, r22
    54f6:	9e 83       	std	Y+6, r25	; 0x06
    54f8:	8d 83       	std	Y+5, r24	; 0x05
    54fa:	8d 81       	ldd	r24, Y+5	; 0x05
    54fc:	9e 81       	ldd	r25, Y+6	; 0x06
    54fe:	9a 83       	std	Y+2, r25	; 0x02
    5500:	89 83       	std	Y+1, r24	; 0x01
    5502:	89 81       	ldd	r24, Y+1	; 0x01
    5504:	9a 81       	ldd	r25, Y+2	; 0x02
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	f1 f7       	brne	.-4      	; 0x5506 <EEPROM_voidSendDataByte+0x11c>
    550a:	9a 83       	std	Y+2, r25	; 0x02
    550c:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    550e:	62 96       	adiw	r28, 0x12	; 18
    5510:	0f b6       	in	r0, 0x3f	; 63
    5512:	f8 94       	cli
    5514:	de bf       	out	0x3e, r29	; 62
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	cd bf       	out	0x3d, r28	; 61
    551a:	cf 91       	pop	r28
    551c:	df 91       	pop	r29
    551e:	08 95       	ret

00005520 <EEPROM_uint8ReadDataByte>:

uint8 EEPROM_uint8ReadDataByte(uint16 Copy_uint16LocationAddress)
{
    5520:	df 93       	push	r29
    5522:	cf 93       	push	r28
    5524:	00 d0       	rcall	.+0      	; 0x5526 <EEPROM_uint8ReadDataByte+0x6>
    5526:	00 d0       	rcall	.+0      	; 0x5528 <EEPROM_uint8ReadDataByte+0x8>
    5528:	cd b7       	in	r28, 0x3d	; 61
    552a:	de b7       	in	r29, 0x3e	; 62
    552c:	9c 83       	std	Y+4, r25	; 0x04
    552e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_uint8AddressPacket, Local_uint8Data;

	Local_uint8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (uint8)(Copy_uint16LocationAddress >>8);
    5530:	8b 81       	ldd	r24, Y+3	; 0x03
    5532:	9c 81       	ldd	r25, Y+4	; 0x04
    5534:	89 2f       	mov	r24, r25
    5536:	99 27       	eor	r25, r25
    5538:	80 65       	ori	r24, 0x50	; 80
    553a:	89 83       	std	Y+1, r24	; 0x01

	/*2k EEPROM*/
//	Local_uint8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;

	/*Send start condition*/
	TWI_SendStartCondition();
    553c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_uint8AddressPacket);
    5540:	89 81       	ldd	r24, Y+1	; 0x01
    5542:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((uint8)Copy_uint16LocationAddress);
    5546:	8b 81       	ldd	r24, Y+3	; 0x03
    5548:	0e 94 65 1b 	call	0x36ca	; 0x36ca <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    554c:	0e 94 cb 1a 	call	0x3596	; 0x3596 <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_uint8AddressPacket);
    5550:	89 81       	ldd	r24, Y+1	; 0x01
    5552:	0e 94 2d 1b 	call	0x365a	; 0x365a <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_uint8Data);
    5556:	ce 01       	movw	r24, r28
    5558:	02 96       	adiw	r24, 0x02	; 2
    555a:	0e 94 8e 1b 	call	0x371c	; 0x371c <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_SendStopCondition();
    555e:	0e 94 bd 1b 	call	0x377a	; 0x377a <TWI_SendStopCondition>

	return Local_uint8Data;
    5562:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5564:	0f 90       	pop	r0
    5566:	0f 90       	pop	r0
    5568:	0f 90       	pop	r0
    556a:	0f 90       	pop	r0
    556c:	cf 91       	pop	r28
    556e:	df 91       	pop	r29
    5570:	08 95       	ret

00005572 <EEPROM_voidSend4Numbers>:

void EEPROM_voidSend4Numbers(uint16 Copy_uint16LocationAddress, uint8* Array_Recieve_Str, uint8 cop_EEPROM_maxNum)
{
    5572:	df 93       	push	r29
    5574:	cf 93       	push	r28
    5576:	cd b7       	in	r28, 0x3d	; 61
    5578:	de b7       	in	r29, 0x3e	; 62
    557a:	29 97       	sbiw	r28, 0x09	; 9
    557c:	0f b6       	in	r0, 0x3f	; 63
    557e:	f8 94       	cli
    5580:	de bf       	out	0x3e, r29	; 62
    5582:	0f be       	out	0x3f, r0	; 63
    5584:	cd bf       	out	0x3d, r28	; 61
    5586:	9e 83       	std	Y+6, r25	; 0x06
    5588:	8d 83       	std	Y+5, r24	; 0x05
    558a:	78 87       	std	Y+8, r23	; 0x08
    558c:	6f 83       	std	Y+7, r22	; 0x07
    558e:	49 87       	std	Y+9, r20	; 0x09
	uint8 *local_ptrArr= Array_Recieve_Str;
    5590:	8f 81       	ldd	r24, Y+7	; 0x07
    5592:	98 85       	ldd	r25, Y+8	; 0x08
    5594:	9c 83       	std	Y+4, r25	; 0x04
    5596:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    5598:	1a 82       	std	Y+2, r1	; 0x02
    559a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0; i < cop_EEPROM_maxNum; i++)
    559c:	1a 82       	std	Y+2, r1	; 0x02
    559e:	19 82       	std	Y+1, r1	; 0x01
    55a0:	17 c0       	rjmp	.+46     	; 0x55d0 <EEPROM_voidSend4Numbers+0x5e>
	{
		EEPROM_voidSendDataByte(Copy_uint16LocationAddress,*local_ptrArr);
    55a2:	eb 81       	ldd	r30, Y+3	; 0x03
    55a4:	fc 81       	ldd	r31, Y+4	; 0x04
    55a6:	20 81       	ld	r18, Z
    55a8:	8d 81       	ldd	r24, Y+5	; 0x05
    55aa:	9e 81       	ldd	r25, Y+6	; 0x06
    55ac:	62 2f       	mov	r22, r18
    55ae:	0e 94 f5 29 	call	0x53ea	; 0x53ea <EEPROM_voidSendDataByte>
		Copy_uint16LocationAddress++;
    55b2:	8d 81       	ldd	r24, Y+5	; 0x05
    55b4:	9e 81       	ldd	r25, Y+6	; 0x06
    55b6:	01 96       	adiw	r24, 0x01	; 1
    55b8:	9e 83       	std	Y+6, r25	; 0x06
    55ba:	8d 83       	std	Y+5, r24	; 0x05
		local_ptrArr += 1;
    55bc:	8b 81       	ldd	r24, Y+3	; 0x03
    55be:	9c 81       	ldd	r25, Y+4	; 0x04
    55c0:	01 96       	adiw	r24, 0x01	; 1
    55c2:	9c 83       	std	Y+4, r25	; 0x04
    55c4:	8b 83       	std	Y+3, r24	; 0x03

void EEPROM_voidSend4Numbers(uint16 Copy_uint16LocationAddress, uint8* Array_Recieve_Str, uint8 cop_EEPROM_maxNum)
{
	uint8 *local_ptrArr= Array_Recieve_Str;
	int i=0;
	for(i=0; i < cop_EEPROM_maxNum; i++)
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	9a 81       	ldd	r25, Y+2	; 0x02
    55ca:	01 96       	adiw	r24, 0x01	; 1
    55cc:	9a 83       	std	Y+2, r25	; 0x02
    55ce:	89 83       	std	Y+1, r24	; 0x01
    55d0:	89 85       	ldd	r24, Y+9	; 0x09
    55d2:	28 2f       	mov	r18, r24
    55d4:	30 e0       	ldi	r19, 0x00	; 0
    55d6:	89 81       	ldd	r24, Y+1	; 0x01
    55d8:	9a 81       	ldd	r25, Y+2	; 0x02
    55da:	82 17       	cp	r24, r18
    55dc:	93 07       	cpc	r25, r19
    55de:	0c f3       	brlt	.-62     	; 0x55a2 <EEPROM_voidSend4Numbers+0x30>
	{
		EEPROM_voidSendDataByte(Copy_uint16LocationAddress,*local_ptrArr);
		Copy_uint16LocationAddress++;
		local_ptrArr += 1;
	}
}
    55e0:	29 96       	adiw	r28, 0x09	; 9
    55e2:	0f b6       	in	r0, 0x3f	; 63
    55e4:	f8 94       	cli
    55e6:	de bf       	out	0x3e, r29	; 62
    55e8:	0f be       	out	0x3f, r0	; 63
    55ea:	cd bf       	out	0x3d, r28	; 61
    55ec:	cf 91       	pop	r28
    55ee:	df 91       	pop	r29
    55f0:	08 95       	ret

000055f2 <EEPROM_voidRead4Numbers>:

void EEPROM_voidRead4Numbers(uint16 Copy_uint16LocationAddress, uint8* Array_Recieve_Str, uint8 cop_EEPROM_maxNum)
{
    55f2:	0f 93       	push	r16
    55f4:	1f 93       	push	r17
    55f6:	df 93       	push	r29
    55f8:	cf 93       	push	r28
    55fa:	cd b7       	in	r28, 0x3d	; 61
    55fc:	de b7       	in	r29, 0x3e	; 62
    55fe:	29 97       	sbiw	r28, 0x09	; 9
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	f8 94       	cli
    5604:	de bf       	out	0x3e, r29	; 62
    5606:	0f be       	out	0x3f, r0	; 63
    5608:	cd bf       	out	0x3d, r28	; 61
    560a:	9e 83       	std	Y+6, r25	; 0x06
    560c:	8d 83       	std	Y+5, r24	; 0x05
    560e:	78 87       	std	Y+8, r23	; 0x08
    5610:	6f 83       	std	Y+7, r22	; 0x07
    5612:	49 87       	std	Y+9, r20	; 0x09
	uint8 *local_ptrArr= Array_Recieve_Str;
    5614:	8f 81       	ldd	r24, Y+7	; 0x07
    5616:	98 85       	ldd	r25, Y+8	; 0x08
    5618:	9c 83       	std	Y+4, r25	; 0x04
    561a:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    561c:	1a 82       	std	Y+2, r1	; 0x02
    561e:	19 82       	std	Y+1, r1	; 0x01
	for(i=0; i < cop_EEPROM_maxNum; i++)
    5620:	1a 82       	std	Y+2, r1	; 0x02
    5622:	19 82       	std	Y+1, r1	; 0x01
    5624:	17 c0       	rjmp	.+46     	; 0x5654 <EEPROM_voidRead4Numbers+0x62>
	{
		local_ptrArr[i] = EEPROM_uint8ReadDataByte(Copy_uint16LocationAddress);
    5626:	29 81       	ldd	r18, Y+1	; 0x01
    5628:	3a 81       	ldd	r19, Y+2	; 0x02
    562a:	8b 81       	ldd	r24, Y+3	; 0x03
    562c:	9c 81       	ldd	r25, Y+4	; 0x04
    562e:	8c 01       	movw	r16, r24
    5630:	02 0f       	add	r16, r18
    5632:	13 1f       	adc	r17, r19
    5634:	8d 81       	ldd	r24, Y+5	; 0x05
    5636:	9e 81       	ldd	r25, Y+6	; 0x06
    5638:	0e 94 90 2a 	call	0x5520	; 0x5520 <EEPROM_uint8ReadDataByte>
    563c:	f8 01       	movw	r30, r16
    563e:	80 83       	st	Z, r24
		Copy_uint16LocationAddress++;
    5640:	8d 81       	ldd	r24, Y+5	; 0x05
    5642:	9e 81       	ldd	r25, Y+6	; 0x06
    5644:	01 96       	adiw	r24, 0x01	; 1
    5646:	9e 83       	std	Y+6, r25	; 0x06
    5648:	8d 83       	std	Y+5, r24	; 0x05

void EEPROM_voidRead4Numbers(uint16 Copy_uint16LocationAddress, uint8* Array_Recieve_Str, uint8 cop_EEPROM_maxNum)
{
	uint8 *local_ptrArr= Array_Recieve_Str;
	int i=0;
	for(i=0; i < cop_EEPROM_maxNum; i++)
    564a:	89 81       	ldd	r24, Y+1	; 0x01
    564c:	9a 81       	ldd	r25, Y+2	; 0x02
    564e:	01 96       	adiw	r24, 0x01	; 1
    5650:	9a 83       	std	Y+2, r25	; 0x02
    5652:	89 83       	std	Y+1, r24	; 0x01
    5654:	89 85       	ldd	r24, Y+9	; 0x09
    5656:	28 2f       	mov	r18, r24
    5658:	30 e0       	ldi	r19, 0x00	; 0
    565a:	89 81       	ldd	r24, Y+1	; 0x01
    565c:	9a 81       	ldd	r25, Y+2	; 0x02
    565e:	82 17       	cp	r24, r18
    5660:	93 07       	cpc	r25, r19
    5662:	0c f3       	brlt	.-62     	; 0x5626 <EEPROM_voidRead4Numbers+0x34>
	{
		local_ptrArr[i] = EEPROM_uint8ReadDataByte(Copy_uint16LocationAddress);
		Copy_uint16LocationAddress++;
	}
}
    5664:	29 96       	adiw	r28, 0x09	; 9
    5666:	0f b6       	in	r0, 0x3f	; 63
    5668:	f8 94       	cli
    566a:	de bf       	out	0x3e, r29	; 62
    566c:	0f be       	out	0x3f, r0	; 63
    566e:	cd bf       	out	0x3d, r28	; 61
    5670:	cf 91       	pop	r28
    5672:	df 91       	pop	r29
    5674:	1f 91       	pop	r17
    5676:	0f 91       	pop	r16
    5678:	08 95       	ret

0000567a <EEPROM_voidRemoveUser>:
void EEPROM_voidRemoveUser(uint16 Copy_uint16LocationAddress)
{
    567a:	df 93       	push	r29
    567c:	cf 93       	push	r28
    567e:	00 d0       	rcall	.+0      	; 0x5680 <EEPROM_voidRemoveUser+0x6>
    5680:	00 d0       	rcall	.+0      	; 0x5682 <EEPROM_voidRemoveUser+0x8>
    5682:	cd b7       	in	r28, 0x3d	; 61
    5684:	de b7       	in	r29, 0x3e	; 62
    5686:	9c 83       	std	Y+4, r25	; 0x04
    5688:	8b 83       	std	Y+3, r24	; 0x03
	/*this function deletes the user id and password*/
	int i=0;
    568a:	1a 82       	std	Y+2, r1	; 0x02
    568c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<8;i++)
    568e:	1a 82       	std	Y+2, r1	; 0x02
    5690:	19 82       	std	Y+1, r1	; 0x01
    5692:	0f c0       	rjmp	.+30     	; 0x56b2 <EEPROM_voidRemoveUser+0x38>
	{
		EEPROM_voidSendDataByte(Copy_uint16LocationAddress, 0xff);
    5694:	8b 81       	ldd	r24, Y+3	; 0x03
    5696:	9c 81       	ldd	r25, Y+4	; 0x04
    5698:	6f ef       	ldi	r22, 0xFF	; 255
    569a:	0e 94 f5 29 	call	0x53ea	; 0x53ea <EEPROM_voidSendDataByte>
		Copy_uint16LocationAddress++;
    569e:	8b 81       	ldd	r24, Y+3	; 0x03
    56a0:	9c 81       	ldd	r25, Y+4	; 0x04
    56a2:	01 96       	adiw	r24, 0x01	; 1
    56a4:	9c 83       	std	Y+4, r25	; 0x04
    56a6:	8b 83       	std	Y+3, r24	; 0x03
}
void EEPROM_voidRemoveUser(uint16 Copy_uint16LocationAddress)
{
	/*this function deletes the user id and password*/
	int i=0;
	for(i=0;i<8;i++)
    56a8:	89 81       	ldd	r24, Y+1	; 0x01
    56aa:	9a 81       	ldd	r25, Y+2	; 0x02
    56ac:	01 96       	adiw	r24, 0x01	; 1
    56ae:	9a 83       	std	Y+2, r25	; 0x02
    56b0:	89 83       	std	Y+1, r24	; 0x01
    56b2:	89 81       	ldd	r24, Y+1	; 0x01
    56b4:	9a 81       	ldd	r25, Y+2	; 0x02
    56b6:	88 30       	cpi	r24, 0x08	; 8
    56b8:	91 05       	cpc	r25, r1
    56ba:	64 f3       	brlt	.-40     	; 0x5694 <EEPROM_voidRemoveUser+0x1a>
	{
		EEPROM_voidSendDataByte(Copy_uint16LocationAddress, 0xff);
		Copy_uint16LocationAddress++;
	}
}
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	0f 90       	pop	r0
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <EEPROM_voidSendString>:

void EEPROM_voidSendString(uint16 Copy_uint16LocationAddress, uint8* str)
{
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	00 d0       	rcall	.+0      	; 0x56d0 <EEPROM_voidSendString+0x6>
    56d0:	00 d0       	rcall	.+0      	; 0x56d2 <EEPROM_voidSendString+0x8>
    56d2:	cd b7       	in	r28, 0x3d	; 61
    56d4:	de b7       	in	r29, 0x3e	; 62
    56d6:	9a 83       	std	Y+2, r25	; 0x02
    56d8:	89 83       	std	Y+1, r24	; 0x01
    56da:	7c 83       	std	Y+4, r23	; 0x04
    56dc:	6b 83       	std	Y+3, r22	; 0x03
    56de:	13 c0       	rjmp	.+38     	; 0x5706 <EEPROM_voidSendString+0x3c>
	while(*str!= '\0')
	{
		EEPROM_voidSendDataByte(Copy_uint16LocationAddress++,*str);
    56e0:	49 81       	ldd	r20, Y+1	; 0x01
    56e2:	5a 81       	ldd	r21, Y+2	; 0x02
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	9a 81       	ldd	r25, Y+2	; 0x02
    56e8:	01 96       	adiw	r24, 0x01	; 1
    56ea:	9a 83       	std	Y+2, r25	; 0x02
    56ec:	89 83       	std	Y+1, r24	; 0x01
    56ee:	eb 81       	ldd	r30, Y+3	; 0x03
    56f0:	fc 81       	ldd	r31, Y+4	; 0x04
    56f2:	20 81       	ld	r18, Z
    56f4:	ca 01       	movw	r24, r20
    56f6:	62 2f       	mov	r22, r18
    56f8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <EEPROM_voidSendDataByte>
		str +=1;
    56fc:	8b 81       	ldd	r24, Y+3	; 0x03
    56fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5700:	01 96       	adiw	r24, 0x01	; 1
    5702:	9c 83       	std	Y+4, r25	; 0x04
    5704:	8b 83       	std	Y+3, r24	; 0x03
	}
}

void EEPROM_voidSendString(uint16 Copy_uint16LocationAddress, uint8* str)
{
	while(*str!= '\0')
    5706:	eb 81       	ldd	r30, Y+3	; 0x03
    5708:	fc 81       	ldd	r31, Y+4	; 0x04
    570a:	80 81       	ld	r24, Z
    570c:	88 23       	and	r24, r24
    570e:	41 f7       	brne	.-48     	; 0x56e0 <EEPROM_voidSendString+0x16>
	{
		EEPROM_voidSendDataByte(Copy_uint16LocationAddress++,*str);
		str +=1;
	}
}
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
    5718:	cf 91       	pop	r28
    571a:	df 91       	pop	r29
    571c:	08 95       	ret

0000571e <DCM_turnOn>:
#include "DCM_Config.h"
#include "DCM_Private.h"
#include "DCM_Interface.h"

StdReturnType DCM_turnOn(uint8 copy_DCM_port, uint8 copy_DCM_pin)
{
    571e:	df 93       	push	r29
    5720:	cf 93       	push	r28
    5722:	00 d0       	rcall	.+0      	; 0x5724 <DCM_turnOn+0x6>
    5724:	0f 92       	push	r0
    5726:	cd b7       	in	r28, 0x3d	; 61
    5728:	de b7       	in	r29, 0x3e	; 62
    572a:	8a 83       	std	Y+2, r24	; 0x02
    572c:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(copy_DCM_port,copy_DCM_pin,HIGH);
    5732:	8a 81       	ldd	r24, Y+2	; 0x02
    5734:	6b 81       	ldd	r22, Y+3	; 0x03
    5736:	41 e0       	ldi	r20, 0x01	; 1
    5738:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    573c:	89 83       	std	Y+1, r24	; 0x01
	return local_errorSignal;
    573e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	0f 90       	pop	r0
    5746:	cf 91       	pop	r28
    5748:	df 91       	pop	r29
    574a:	08 95       	ret

0000574c <DCM_turnOff>:

StdReturnType DCM_turnOff(uint8 copy_DCM_port, uint8 copy_DCM_pin)
{
    574c:	df 93       	push	r29
    574e:	cf 93       	push	r28
    5750:	00 d0       	rcall	.+0      	; 0x5752 <DCM_turnOff+0x6>
    5752:	0f 92       	push	r0
    5754:	cd b7       	in	r28, 0x3d	; 61
    5756:	de b7       	in	r29, 0x3e	; 62
    5758:	8a 83       	std	Y+2, r24	; 0x02
    575a:	6b 83       	std	Y+3, r22	; 0x03
	StdReturnType local_errorSignal = OK_STAT;
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	89 83       	std	Y+1, r24	; 0x01
	local_errorSignal = DIO_setPinValue(copy_DCM_port,copy_DCM_pin,LOW);
    5760:	8a 81       	ldd	r24, Y+2	; 0x02
    5762:	6b 81       	ldd	r22, Y+3	; 0x03
    5764:	40 e0       	ldi	r20, 0x00	; 0
    5766:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <DIO_setPinValue>
    576a:	89 83       	std	Y+1, r24	; 0x01
	return local_errorSignal;
    576c:	89 81       	ldd	r24, Y+1	; 0x01
}
    576e:	0f 90       	pop	r0
    5770:	0f 90       	pop	r0
    5772:	0f 90       	pop	r0
    5774:	cf 91       	pop	r28
    5776:	df 91       	pop	r29
    5778:	08 95       	ret

0000577a <main>:
static uint8 passwordCompare(void);
static uint8 checkUserID(void);
static void checkUserPassword(void);

int main(void)
{
    577a:	df 93       	push	r29
    577c:	cf 93       	push	r28
    577e:	cd b7       	in	r28, 0x3d	; 61
    5780:	de b7       	in	r29, 0x3e	; 62
	systemInit();
    5782:	0e 94 c6 2b 	call	0x578c	; 0x578c <systemInit>
	//EEPROM_clearMemory();
	//EEPROM_writeString(ADMIN_PASSWORD,"ZOOBRY YA KOSOMAK");
	//savedPassword[0] = EEPROM_uint8ReadDataByte(ADMIN_PASSWORD);
	//EEPROM_voidRead4Numbers(ADMIN_PASSWORD, savedPassword, MAX_SIZE_PASSWORD);

	loginToSystem();
    5786:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <loginToSystem>
    578a:	ff cf       	rjmp	.-2      	; 0x578a <main+0x10>

0000578c <systemInit>:

	}
}

void systemInit(void)
{
    578c:	df 93       	push	r29
    578e:	cf 93       	push	r28
    5790:	cd b7       	in	r28, 0x3d	; 61
    5792:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_init();
    5794:	0e 94 0e 29 	call	0x521c	; 0x521c <KEYPAD_init>
	LCD_init_4bit();
    5798:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <LCD_init_4bit>
	EEPROM_INIT();
    579c:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <EEPROM_INIT>
}
    57a0:	cf 91       	pop	r28
    57a2:	df 91       	pop	r29
    57a4:	08 95       	ret

000057a6 <loginToSystem>:

void loginToSystem(void)
{
    57a6:	df 93       	push	r29
    57a8:	cf 93       	push	r28
    57aa:	cd b7       	in	r28, 0x3d	; 61
    57ac:	de b7       	in	r29, 0x3e	; 62
    57ae:	60 97       	sbiw	r28, 0x10	; 16
    57b0:	0f b6       	in	r0, 0x3f	; 63
    57b2:	f8 94       	cli
    57b4:	de bf       	out	0x3e, r29	; 62
    57b6:	0f be       	out	0x3f, r0	; 63
    57b8:	cd bf       	out	0x3d, r28	; 61
	static uint8 selector = 0;

	/* Choose who will sign => User or Admin*/
	LCD_clearDisplay_4bit();
    57ba:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
	LCD_sendStringAtAddress_4bit(LCD_ROW1,3,"WELCOME !!");
    57be:	20 e6       	ldi	r18, 0x60	; 96
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	63 e0       	ldi	r22, 0x03	; 3
    57c6:	a9 01       	movw	r20, r18
    57c8:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <LCD_sendStringAtAddress_4bit>
    57cc:	80 e0       	ldi	r24, 0x00	; 0
    57ce:	90 e8       	ldi	r25, 0x80	; 128
    57d0:	ab eb       	ldi	r26, 0xBB	; 187
    57d2:	b4 e4       	ldi	r27, 0x44	; 68
    57d4:	8b 87       	std	Y+11, r24	; 0x0b
    57d6:	9c 87       	std	Y+12, r25	; 0x0c
    57d8:	ad 87       	std	Y+13, r26	; 0x0d
    57da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    57de:	7c 85       	ldd	r23, Y+12	; 0x0c
    57e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    57e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	4a e7       	ldi	r20, 0x7A	; 122
    57ea:	55 e4       	ldi	r21, 0x45	; 69
    57ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f0:	dc 01       	movw	r26, r24
    57f2:	cb 01       	movw	r24, r22
    57f4:	8f 83       	std	Y+7, r24	; 0x07
    57f6:	98 87       	std	Y+8, r25	; 0x08
    57f8:	a9 87       	std	Y+9, r26	; 0x09
    57fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57fc:	6f 81       	ldd	r22, Y+7	; 0x07
    57fe:	78 85       	ldd	r23, Y+8	; 0x08
    5800:	89 85       	ldd	r24, Y+9	; 0x09
    5802:	9a 85       	ldd	r25, Y+10	; 0x0a
    5804:	20 e0       	ldi	r18, 0x00	; 0
    5806:	30 e0       	ldi	r19, 0x00	; 0
    5808:	40 e8       	ldi	r20, 0x80	; 128
    580a:	5f e3       	ldi	r21, 0x3F	; 63
    580c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5810:	88 23       	and	r24, r24
    5812:	2c f4       	brge	.+10     	; 0x581e <loginToSystem+0x78>
		__ticks = 1;
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	9e 83       	std	Y+6, r25	; 0x06
    581a:	8d 83       	std	Y+5, r24	; 0x05
    581c:	3f c0       	rjmp	.+126    	; 0x589c <loginToSystem+0xf6>
	else if (__tmp > 65535)
    581e:	6f 81       	ldd	r22, Y+7	; 0x07
    5820:	78 85       	ldd	r23, Y+8	; 0x08
    5822:	89 85       	ldd	r24, Y+9	; 0x09
    5824:	9a 85       	ldd	r25, Y+10	; 0x0a
    5826:	20 e0       	ldi	r18, 0x00	; 0
    5828:	3f ef       	ldi	r19, 0xFF	; 255
    582a:	4f e7       	ldi	r20, 0x7F	; 127
    582c:	57 e4       	ldi	r21, 0x47	; 71
    582e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5832:	18 16       	cp	r1, r24
    5834:	4c f5       	brge	.+82     	; 0x5888 <loginToSystem+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5836:	6b 85       	ldd	r22, Y+11	; 0x0b
    5838:	7c 85       	ldd	r23, Y+12	; 0x0c
    583a:	8d 85       	ldd	r24, Y+13	; 0x0d
    583c:	9e 85       	ldd	r25, Y+14	; 0x0e
    583e:	20 e0       	ldi	r18, 0x00	; 0
    5840:	30 e0       	ldi	r19, 0x00	; 0
    5842:	40 e2       	ldi	r20, 0x20	; 32
    5844:	51 e4       	ldi	r21, 0x41	; 65
    5846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    584a:	dc 01       	movw	r26, r24
    584c:	cb 01       	movw	r24, r22
    584e:	bc 01       	movw	r22, r24
    5850:	cd 01       	movw	r24, r26
    5852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5856:	dc 01       	movw	r26, r24
    5858:	cb 01       	movw	r24, r22
    585a:	9e 83       	std	Y+6, r25	; 0x06
    585c:	8d 83       	std	Y+5, r24	; 0x05
    585e:	0f c0       	rjmp	.+30     	; 0x587e <loginToSystem+0xd8>
    5860:	80 e9       	ldi	r24, 0x90	; 144
    5862:	91 e0       	ldi	r25, 0x01	; 1
    5864:	9c 83       	std	Y+4, r25	; 0x04
    5866:	8b 83       	std	Y+3, r24	; 0x03
    5868:	8b 81       	ldd	r24, Y+3	; 0x03
    586a:	9c 81       	ldd	r25, Y+4	; 0x04
    586c:	01 97       	sbiw	r24, 0x01	; 1
    586e:	f1 f7       	brne	.-4      	; 0x586c <loginToSystem+0xc6>
    5870:	9c 83       	std	Y+4, r25	; 0x04
    5872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5874:	8d 81       	ldd	r24, Y+5	; 0x05
    5876:	9e 81       	ldd	r25, Y+6	; 0x06
    5878:	01 97       	sbiw	r24, 0x01	; 1
    587a:	9e 83       	std	Y+6, r25	; 0x06
    587c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    587e:	8d 81       	ldd	r24, Y+5	; 0x05
    5880:	9e 81       	ldd	r25, Y+6	; 0x06
    5882:	00 97       	sbiw	r24, 0x00	; 0
    5884:	69 f7       	brne	.-38     	; 0x5860 <loginToSystem+0xba>
    5886:	14 c0       	rjmp	.+40     	; 0x58b0 <loginToSystem+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5888:	6f 81       	ldd	r22, Y+7	; 0x07
    588a:	78 85       	ldd	r23, Y+8	; 0x08
    588c:	89 85       	ldd	r24, Y+9	; 0x09
    588e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5894:	dc 01       	movw	r26, r24
    5896:	cb 01       	movw	r24, r22
    5898:	9e 83       	std	Y+6, r25	; 0x06
    589a:	8d 83       	std	Y+5, r24	; 0x05
    589c:	8d 81       	ldd	r24, Y+5	; 0x05
    589e:	9e 81       	ldd	r25, Y+6	; 0x06
    58a0:	9a 83       	std	Y+2, r25	; 0x02
    58a2:	89 83       	std	Y+1, r24	; 0x01
    58a4:	89 81       	ldd	r24, Y+1	; 0x01
    58a6:	9a 81       	ldd	r25, Y+2	; 0x02
    58a8:	01 97       	sbiw	r24, 0x01	; 1
    58aa:	f1 f7       	brne	.-4      	; 0x58a8 <loginToSystem+0x102>
    58ac:	9a 83       	std	Y+2, r25	; 0x02
    58ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_clearDisplay_4bit();
    58b0:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
	LCD_sendStringAtAddress_4bit(LCD_ROW1,1,"1 => ADMIN LOG");
    58b4:	2b e6       	ldi	r18, 0x6B	; 107
    58b6:	30 e0       	ldi	r19, 0x00	; 0
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	61 e0       	ldi	r22, 0x01	; 1
    58bc:	a9 01       	movw	r20, r18
    58be:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <LCD_sendStringAtAddress_4bit>
	LCD_sendStringAtAddress_4bit(LCD_ROW2,1,"2 => USER LOG");
    58c2:	2a e7       	ldi	r18, 0x7A	; 122
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	82 e0       	ldi	r24, 0x02	; 2
    58c8:	61 e0       	ldi	r22, 0x01	; 1
    58ca:	a9 01       	movw	r20, r18
    58cc:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <LCD_sendStringAtAddress_4bit>
	selector = KEYPAD_getValue();
    58d0:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    58d4:	80 93 0d 01 	sts	0x010D, r24
    58d8:	04 c0       	rjmp	.+8      	; 0x58e2 <loginToSystem+0x13c>
	while (!((selector == ADMIN_SELECTED) || (selector == USER_SELECTED)))
	{
		selector = KEYPAD_getValue();
    58da:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    58de:	80 93 0d 01 	sts	0x010D, r24
	_delay_ms(1500);
	LCD_clearDisplay_4bit();
	LCD_sendStringAtAddress_4bit(LCD_ROW1,1,"1 => ADMIN LOG");
	LCD_sendStringAtAddress_4bit(LCD_ROW2,1,"2 => USER LOG");
	selector = KEYPAD_getValue();
	while (!((selector == ADMIN_SELECTED) || (selector == USER_SELECTED)))
    58e2:	80 91 0d 01 	lds	r24, 0x010D
    58e6:	81 33       	cpi	r24, 0x31	; 49
    58e8:	21 f0       	breq	.+8      	; 0x58f2 <loginToSystem+0x14c>
    58ea:	80 91 0d 01 	lds	r24, 0x010D
    58ee:	82 33       	cpi	r24, 0x32	; 50
    58f0:	a1 f7       	brne	.-24     	; 0x58da <loginToSystem+0x134>
	{
		selector = KEYPAD_getValue();
	}
	switch (selector)
    58f2:	80 91 0d 01 	lds	r24, 0x010D
    58f6:	28 2f       	mov	r18, r24
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	38 8b       	std	Y+16, r19	; 0x10
    58fc:	2f 87       	std	Y+15, r18	; 0x0f
    58fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5900:	98 89       	ldd	r25, Y+16	; 0x10
    5902:	81 33       	cpi	r24, 0x31	; 49
    5904:	91 05       	cpc	r25, r1
    5906:	31 f0       	breq	.+12     	; 0x5914 <loginToSystem+0x16e>
    5908:	2f 85       	ldd	r18, Y+15	; 0x0f
    590a:	38 89       	ldd	r19, Y+16	; 0x10
    590c:	22 33       	cpi	r18, 0x32	; 50
    590e:	31 05       	cpc	r19, r1
    5910:	21 f0       	breq	.+8      	; 0x591a <loginToSystem+0x174>
    5912:	05 c0       	rjmp	.+10     	; 0x591e <loginToSystem+0x178>
	{
	case ADMIN_SELECTED:
		adminLogIn();
    5914:	0e 94 98 2c 	call	0x5930	; 0x5930 <adminLogIn>
    5918:	02 c0       	rjmp	.+4      	; 0x591e <loginToSystem+0x178>
		break;
	case USER_SELECTED:
		userLogIn();
    591a:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <userLogIn>
		break;
	default:
		break;
	}
}
    591e:	60 96       	adiw	r28, 0x10	; 16
    5920:	0f b6       	in	r0, 0x3f	; 63
    5922:	f8 94       	cli
    5924:	de bf       	out	0x3e, r29	; 62
    5926:	0f be       	out	0x3f, r0	; 63
    5928:	cd bf       	out	0x3d, r28	; 61
    592a:	cf 91       	pop	r28
    592c:	df 91       	pop	r29
    592e:	08 95       	ret

00005930 <adminLogIn>:

static void adminLogIn(void)
{
    5930:	df 93       	push	r29
    5932:	cf 93       	push	r28
    5934:	cd b7       	in	r28, 0x3d	; 61
    5936:	de b7       	in	r29, 0x3e	; 62
    5938:	2f 97       	sbiw	r28, 0x0f	; 15
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	f8 94       	cli
    593e:	de bf       	out	0x3e, r29	; 62
    5940:	0f be       	out	0x3f, r0	; 63
    5942:	cd bf       	out	0x3d, r28	; 61
	uint8 local_checkVal = 0;
    5944:	1f 86       	std	Y+15, r1	; 0x0f
	EEPROM_voidRead4Numbers(ADMIN_PASSWORD,(uint8 *)savedPassword, MAX_SIZE_PASSWORD);
    5946:	28 e0       	ldi	r18, 0x08	; 8
    5948:	31 e0       	ldi	r19, 0x01	; 1
    594a:	80 e0       	ldi	r24, 0x00	; 0
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	b9 01       	movw	r22, r18
    5950:	44 e0       	ldi	r20, 0x04	; 4
    5952:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <EEPROM_voidRead4Numbers>
	if (*savedPassword == '\0')
    5956:	80 91 08 01 	lds	r24, 0x0108
    595a:	88 23       	and	r24, r24
    595c:	09 f0       	breq	.+2      	; 0x5960 <adminLogIn+0x30>
    595e:	8d c0       	rjmp	.+282    	; 0x5a7a <adminLogIn+0x14a>
	{
		LCD_clearDisplay_4bit();
    5960:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
		LCD_sendStringAtAddress_4bit(LCD_ROW1,2,"FIRST TIME !");
    5964:	28 e8       	ldi	r18, 0x88	; 136
    5966:	30 e0       	ldi	r19, 0x00	; 0
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	62 e0       	ldi	r22, 0x02	; 2
    596c:	a9 01       	movw	r20, r18
    596e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <LCD_sendStringAtAddress_4bit>
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	90 e8       	ldi	r25, 0x80	; 128
    5976:	ab eb       	ldi	r26, 0xBB	; 187
    5978:	b4 e4       	ldi	r27, 0x44	; 68
    597a:	8b 87       	std	Y+11, r24	; 0x0b
    597c:	9c 87       	std	Y+12, r25	; 0x0c
    597e:	ad 87       	std	Y+13, r26	; 0x0d
    5980:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5982:	6b 85       	ldd	r22, Y+11	; 0x0b
    5984:	7c 85       	ldd	r23, Y+12	; 0x0c
    5986:	8d 85       	ldd	r24, Y+13	; 0x0d
    5988:	9e 85       	ldd	r25, Y+14	; 0x0e
    598a:	20 e0       	ldi	r18, 0x00	; 0
    598c:	30 e0       	ldi	r19, 0x00	; 0
    598e:	4a e7       	ldi	r20, 0x7A	; 122
    5990:	55 e4       	ldi	r21, 0x45	; 69
    5992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5996:	dc 01       	movw	r26, r24
    5998:	cb 01       	movw	r24, r22
    599a:	8f 83       	std	Y+7, r24	; 0x07
    599c:	98 87       	std	Y+8, r25	; 0x08
    599e:	a9 87       	std	Y+9, r26	; 0x09
    59a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59a2:	6f 81       	ldd	r22, Y+7	; 0x07
    59a4:	78 85       	ldd	r23, Y+8	; 0x08
    59a6:	89 85       	ldd	r24, Y+9	; 0x09
    59a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    59aa:	20 e0       	ldi	r18, 0x00	; 0
    59ac:	30 e0       	ldi	r19, 0x00	; 0
    59ae:	40 e8       	ldi	r20, 0x80	; 128
    59b0:	5f e3       	ldi	r21, 0x3F	; 63
    59b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    59b6:	88 23       	and	r24, r24
    59b8:	2c f4       	brge	.+10     	; 0x59c4 <adminLogIn+0x94>
		__ticks = 1;
    59ba:	81 e0       	ldi	r24, 0x01	; 1
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	9e 83       	std	Y+6, r25	; 0x06
    59c0:	8d 83       	std	Y+5, r24	; 0x05
    59c2:	3f c0       	rjmp	.+126    	; 0x5a42 <adminLogIn+0x112>
	else if (__tmp > 65535)
    59c4:	6f 81       	ldd	r22, Y+7	; 0x07
    59c6:	78 85       	ldd	r23, Y+8	; 0x08
    59c8:	89 85       	ldd	r24, Y+9	; 0x09
    59ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	3f ef       	ldi	r19, 0xFF	; 255
    59d0:	4f e7       	ldi	r20, 0x7F	; 127
    59d2:	57 e4       	ldi	r21, 0x47	; 71
    59d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59d8:	18 16       	cp	r1, r24
    59da:	4c f5       	brge	.+82     	; 0x5a2e <adminLogIn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    59de:	7c 85       	ldd	r23, Y+12	; 0x0c
    59e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    59e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    59e4:	20 e0       	ldi	r18, 0x00	; 0
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	40 e2       	ldi	r20, 0x20	; 32
    59ea:	51 e4       	ldi	r21, 0x41	; 65
    59ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59f0:	dc 01       	movw	r26, r24
    59f2:	cb 01       	movw	r24, r22
    59f4:	bc 01       	movw	r22, r24
    59f6:	cd 01       	movw	r24, r26
    59f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59fc:	dc 01       	movw	r26, r24
    59fe:	cb 01       	movw	r24, r22
    5a00:	9e 83       	std	Y+6, r25	; 0x06
    5a02:	8d 83       	std	Y+5, r24	; 0x05
    5a04:	0f c0       	rjmp	.+30     	; 0x5a24 <adminLogIn+0xf4>
    5a06:	80 e9       	ldi	r24, 0x90	; 144
    5a08:	91 e0       	ldi	r25, 0x01	; 1
    5a0a:	9c 83       	std	Y+4, r25	; 0x04
    5a0c:	8b 83       	std	Y+3, r24	; 0x03
    5a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a10:	9c 81       	ldd	r25, Y+4	; 0x04
    5a12:	01 97       	sbiw	r24, 0x01	; 1
    5a14:	f1 f7       	brne	.-4      	; 0x5a12 <adminLogIn+0xe2>
    5a16:	9c 83       	std	Y+4, r25	; 0x04
    5a18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a1e:	01 97       	sbiw	r24, 0x01	; 1
    5a20:	9e 83       	std	Y+6, r25	; 0x06
    5a22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a24:	8d 81       	ldd	r24, Y+5	; 0x05
    5a26:	9e 81       	ldd	r25, Y+6	; 0x06
    5a28:	00 97       	sbiw	r24, 0x00	; 0
    5a2a:	69 f7       	brne	.-38     	; 0x5a06 <adminLogIn+0xd6>
    5a2c:	14 c0       	rjmp	.+40     	; 0x5a56 <adminLogIn+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5a30:	78 85       	ldd	r23, Y+8	; 0x08
    5a32:	89 85       	ldd	r24, Y+9	; 0x09
    5a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a3a:	dc 01       	movw	r26, r24
    5a3c:	cb 01       	movw	r24, r22
    5a3e:	9e 83       	std	Y+6, r25	; 0x06
    5a40:	8d 83       	std	Y+5, r24	; 0x05
    5a42:	8d 81       	ldd	r24, Y+5	; 0x05
    5a44:	9e 81       	ldd	r25, Y+6	; 0x06
    5a46:	9a 83       	std	Y+2, r25	; 0x02
    5a48:	89 83       	std	Y+1, r24	; 0x01
    5a4a:	89 81       	ldd	r24, Y+1	; 0x01
    5a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a4e:	01 97       	sbiw	r24, 0x01	; 1
    5a50:	f1 f7       	brne	.-4      	; 0x5a4e <adminLogIn+0x11e>
    5a52:	9a 83       	std	Y+2, r25	; 0x02
    5a54:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		registerPassWord();
    5a56:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <registerPassWord>
		local_checkVal = checkPassword();
    5a5a:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <checkPassword>
    5a5e:	8f 87       	std	Y+15, r24	; 0x0f
		if (local_checkVal == INCORRECT_PASSWORD)
    5a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a62:	81 30       	cpi	r24, 0x01	; 1
    5a64:	c9 f0       	breq	.+50     	; 0x5a98 <adminLogIn+0x168>
		{

		}
		else if (local_checkVal == CORRECT_PASSWORD)
    5a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a68:	82 30       	cpi	r24, 0x02	; 2
    5a6a:	b1 f4       	brne	.+44     	; 0x5a98 <adminLogIn+0x168>
		{
			LCD_clearDisplay_4bit();
    5a6c:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
			LCD_sendString_4bit("WELCOME ADMIN !!");
    5a70:	85 e9       	ldi	r24, 0x95	; 149
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
    5a78:	0f c0       	rjmp	.+30     	; 0x5a98 <adminLogIn+0x168>
		}
	}
	else
	{
		local_checkVal = checkPassword();
    5a7a:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <checkPassword>
    5a7e:	8f 87       	std	Y+15, r24	; 0x0f
		if (local_checkVal == INCORRECT_PASSWORD)
    5a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a82:	81 30       	cpi	r24, 0x01	; 1
    5a84:	49 f0       	breq	.+18     	; 0x5a98 <adminLogIn+0x168>
		{

		}
		else if (local_checkVal == CORRECT_PASSWORD)
    5a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a88:	82 30       	cpi	r24, 0x02	; 2
    5a8a:	31 f4       	brne	.+12     	; 0x5a98 <adminLogIn+0x168>
		{
			LCD_clearDisplay_4bit();
    5a8c:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
			LCD_sendString_4bit("WELCOME ADMIN !!");
    5a90:	85 e9       	ldi	r24, 0x95	; 149
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
		}
	}
}
    5a98:	2f 96       	adiw	r28, 0x0f	; 15
    5a9a:	0f b6       	in	r0, 0x3f	; 63
    5a9c:	f8 94       	cli
    5a9e:	de bf       	out	0x3e, r29	; 62
    5aa0:	0f be       	out	0x3f, r0	; 63
    5aa2:	cd bf       	out	0x3d, r28	; 61
    5aa4:	cf 91       	pop	r28
    5aa6:	df 91       	pop	r29
    5aa8:	08 95       	ret

00005aaa <userLogIn>:

static void userLogIn(void)
{
    5aaa:	df 93       	push	r29
    5aac:	cf 93       	push	r28
    5aae:	00 d0       	rcall	.+0      	; 0x5ab0 <userLogIn+0x6>
    5ab0:	0f 92       	push	r0
    5ab2:	cd b7       	in	r28, 0x3d	; 61
    5ab4:	de b7       	in	r29, 0x3e	; 62
	uint8 localCheck = 0;
    5ab6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 local_counter = 0;
    5ab8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_buttonVal = 0;
    5aba:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearDisplay_4bit();
    5abc:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
	LCD_sendString_4bit("ID : ");
    5ac0:	86 ea       	ldi	r24, 0xA6	; 166
    5ac2:	90 e0       	ldi	r25, 0x00	; 0
    5ac4:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
	LCD_setCursorAt_4bit(LCD_ROW1,6);
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	66 e0       	ldi	r22, 0x06	; 6
    5acc:	0e 94 77 28 	call	0x50ee	; 0x50ee <LCD_setCursorAt_4bit>
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
    5ad0:	8d e0       	ldi	r24, 0x0D	; 13
    5ad2:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    5ad6:	1e c0       	rjmp	.+60     	; 0x5b14 <userLogIn+0x6a>
	for (; local_counter < MAX_NUM_ID; local_counter++)
	{
		local_buttonVal = KEYPAD_getValue();
    5ad8:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5adc:	89 83       	std	Y+1, r24	; 0x01
    5ade:	03 c0       	rjmp	.+6      	; 0x5ae6 <userLogIn+0x3c>
		while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
		{
			local_buttonVal = KEYPAD_getValue();
    5ae0:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5ae4:	89 83       	std	Y+1, r24	; 0x01
	LCD_setCursorAt_4bit(LCD_ROW1,6);
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
	for (; local_counter < MAX_NUM_ID; local_counter++)
	{
		local_buttonVal = KEYPAD_getValue();
		while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
    5ae6:	89 81       	ldd	r24, Y+1	; 0x01
    5ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    5aea:	d1 f3       	breq	.-12     	; 0x5ae0 <userLogIn+0x36>
    5aec:	89 81       	ldd	r24, Y+1	; 0x01
    5aee:	8a 32       	cpi	r24, 0x2A	; 42
    5af0:	b9 f3       	breq	.-18     	; 0x5ae0 <userLogIn+0x36>
    5af2:	89 81       	ldd	r24, Y+1	; 0x01
    5af4:	83 32       	cpi	r24, 0x23	; 35
    5af6:	a1 f3       	breq	.-24     	; 0x5ae0 <userLogIn+0x36>
		{
			local_buttonVal = KEYPAD_getValue();
		}
		ID[local_counter] = local_buttonVal;
    5af8:	8a 81       	ldd	r24, Y+2	; 0x02
    5afa:	88 2f       	mov	r24, r24
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	fc 01       	movw	r30, r24
    5b00:	e2 50       	subi	r30, 0x02	; 2
    5b02:	ff 4f       	sbci	r31, 0xFF	; 255
    5b04:	89 81       	ldd	r24, Y+1	; 0x01
    5b06:	80 83       	st	Z, r24
		LCD_sendData_4bit(local_buttonVal);
    5b08:	89 81       	ldd	r24, Y+1	; 0x01
    5b0a:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <LCD_sendData_4bit>
	uint8 local_buttonVal = 0;
	LCD_clearDisplay_4bit();
	LCD_sendString_4bit("ID : ");
	LCD_setCursorAt_4bit(LCD_ROW1,6);
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
	for (; local_counter < MAX_NUM_ID; local_counter++)
    5b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b10:	8f 5f       	subi	r24, 0xFF	; 255
    5b12:	8a 83       	std	Y+2, r24	; 0x02
    5b14:	8a 81       	ldd	r24, Y+2	; 0x02
    5b16:	83 30       	cpi	r24, 0x03	; 3
    5b18:	f8 f2       	brcs	.-66     	; 0x5ad8 <userLogIn+0x2e>
			local_buttonVal = KEYPAD_getValue();
		}
		ID[local_counter] = local_buttonVal;
		LCD_sendData_4bit(local_buttonVal);
	}
	localCheck = checkUserID();
    5b1a:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <checkUserID>
    5b1e:	8b 83       	std	Y+3, r24	; 0x03
	if (localCheck == 0)
    5b20:	8b 81       	ldd	r24, Y+3	; 0x03
    5b22:	88 23       	and	r24, r24
    5b24:	39 f4       	brne	.+14     	; 0x5b34 <userLogIn+0x8a>
	{
		LCD_clearDisplay_4bit();
    5b26:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
		LCD_sendString_4bit("NOT FOUND !!!");
    5b2a:	8c ea       	ldi	r24, 0xAC	; 172
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
    5b32:	02 c0       	rjmp	.+4      	; 0x5b38 <userLogIn+0x8e>
	}
	else
	{
		checkUserPassword();
    5b34:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <checkUserPassword>
	}
}
    5b38:	0f 90       	pop	r0
    5b3a:	0f 90       	pop	r0
    5b3c:	0f 90       	pop	r0
    5b3e:	cf 91       	pop	r28
    5b40:	df 91       	pop	r29
    5b42:	08 95       	ret

00005b44 <registerPassWord>:

static void registerPassWord(void)
{
    5b44:	df 93       	push	r29
    5b46:	cf 93       	push	r28
    5b48:	00 d0       	rcall	.+0      	; 0x5b4a <registerPassWord+0x6>
    5b4a:	cd b7       	in	r28, 0x3d	; 61
    5b4c:	de b7       	in	r29, 0x3e	; 62
	//char local_password[MAX_NUM_PASSWORD] = {};
	uint8 local_counter = 0;
    5b4e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_buttonVal = 0;
    5b50:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearDisplay_4bit();
    5b52:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
	LCD_sendString_4bit("ENTER A PASSWORD");
    5b56:	8a eb       	ldi	r24, 0xBA	; 186
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
	LCD_setCursorAt_4bit(LCD_ROW2,6);
    5b5e:	82 e0       	ldi	r24, 0x02	; 2
    5b60:	66 e0       	ldi	r22, 0x06	; 6
    5b62:	0e 94 77 28 	call	0x50ee	; 0x50ee <LCD_setCursorAt_4bit>
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
    5b66:	8d e0       	ldi	r24, 0x0D	; 13
    5b68:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
    5b6c:	1e c0       	rjmp	.+60     	; 0x5baa <registerPassWord+0x66>
	for (; local_counter < MAX_NUM_PASSWORD; local_counter++)
	{
		local_buttonVal = KEYPAD_getValue();
    5b6e:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5b72:	89 83       	std	Y+1, r24	; 0x01
    5b74:	03 c0       	rjmp	.+6      	; 0x5b7c <registerPassWord+0x38>
		while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
		{
			local_buttonVal = KEYPAD_getValue();
    5b76:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5b7a:	89 83       	std	Y+1, r24	; 0x01
	LCD_setCursorAt_4bit(LCD_ROW2,6);
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
	for (; local_counter < MAX_NUM_PASSWORD; local_counter++)
	{
		local_buttonVal = KEYPAD_getValue();
		while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
    5b7c:	89 81       	ldd	r24, Y+1	; 0x01
    5b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    5b80:	d1 f3       	breq	.-12     	; 0x5b76 <registerPassWord+0x32>
    5b82:	89 81       	ldd	r24, Y+1	; 0x01
    5b84:	8a 32       	cpi	r24, 0x2A	; 42
    5b86:	b9 f3       	breq	.-18     	; 0x5b76 <registerPassWord+0x32>
    5b88:	89 81       	ldd	r24, Y+1	; 0x01
    5b8a:	83 32       	cpi	r24, 0x23	; 35
    5b8c:	a1 f3       	breq	.-24     	; 0x5b76 <registerPassWord+0x32>
		{
			local_buttonVal = KEYPAD_getValue();
		}
		password[local_counter] = local_buttonVal;
    5b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b90:	88 2f       	mov	r24, r24
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	fc 01       	movw	r30, r24
    5b96:	ec 5f       	subi	r30, 0xFC	; 252
    5b98:	fe 4f       	sbci	r31, 0xFE	; 254
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
    5b9c:	80 83       	st	Z, r24
		LCD_sendData_4bit('*');
    5b9e:	8a e2       	ldi	r24, 0x2A	; 42
    5ba0:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <LCD_sendData_4bit>

	LCD_clearDisplay_4bit();
	LCD_sendString_4bit("ENTER A PASSWORD");
	LCD_setCursorAt_4bit(LCD_ROW2,6);
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
	for (; local_counter < MAX_NUM_PASSWORD; local_counter++)
    5ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba6:	8f 5f       	subi	r24, 0xFF	; 255
    5ba8:	8a 83       	std	Y+2, r24	; 0x02
    5baa:	8a 81       	ldd	r24, Y+2	; 0x02
    5bac:	84 30       	cpi	r24, 0x04	; 4
    5bae:	f8 f2       	brcs	.-66     	; 0x5b6e <registerPassWord+0x2a>
			local_buttonVal = KEYPAD_getValue();
		}
		password[local_counter] = local_buttonVal;
		LCD_sendData_4bit('*');
	}
	EEPROM_voidSend4Numbers(ADMIN_PASSWORD,(uint8 *)password,MAX_SIZE_PASSWORD);
    5bb0:	24 e0       	ldi	r18, 0x04	; 4
    5bb2:	31 e0       	ldi	r19, 0x01	; 1
    5bb4:	80 e0       	ldi	r24, 0x00	; 0
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	b9 01       	movw	r22, r18
    5bba:	44 e0       	ldi	r20, 0x04	; 4
    5bbc:	0e 94 b9 2a 	call	0x5572	; 0x5572 <EEPROM_voidSend4Numbers>
}
    5bc0:	0f 90       	pop	r0
    5bc2:	0f 90       	pop	r0
    5bc4:	cf 91       	pop	r28
    5bc6:	df 91       	pop	r29
    5bc8:	08 95       	ret

00005bca <checkPassword>:

static uint8 checkPassword(void)
{
    5bca:	df 93       	push	r29
    5bcc:	cf 93       	push	r28
    5bce:	00 d0       	rcall	.+0      	; 0x5bd0 <checkPassword+0x6>
    5bd0:	00 d0       	rcall	.+0      	; 0x5bd2 <checkPassword+0x8>
    5bd2:	0f 92       	push	r0
    5bd4:	cd b7       	in	r28, 0x3d	; 61
    5bd6:	de b7       	in	r29, 0x3e	; 62
	uint8 local_counter = 0;
    5bd8:	1c 82       	std	Y+4, r1	; 0x04
	uint8 local_buttonVal = 0;
    5bda:	1b 82       	std	Y+3, r1	; 0x03
	uint8 local_counterCheck = 2;
    5bdc:	82 e0       	ldi	r24, 0x02	; 2
    5bde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 local_check = 0;
    5be0:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearDisplay_4bit();
    5be2:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
	LCD_sendString_4bit("ENTER PASSWORD");
    5be6:	8b ec       	ldi	r24, 0xCB	; 203
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
	LCD_setCursorAt_4bit(LCD_ROW2,6);
    5bee:	82 e0       	ldi	r24, 0x02	; 2
    5bf0:	66 e0       	ldi	r22, 0x06	; 6
    5bf2:	0e 94 77 28 	call	0x50ee	; 0x50ee <LCD_setCursorAt_4bit>
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
    5bf6:	8d e0       	ldi	r24, 0x0D	; 13
    5bf8:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
	EEPROM_voidRead4Numbers(ADMIN_PASSWORD,(uint8 *)savedPassword,MAX_SIZE_PASSWORD);
    5bfc:	28 e0       	ldi	r18, 0x08	; 8
    5bfe:	31 e0       	ldi	r19, 0x01	; 1
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	b9 01       	movw	r22, r18
    5c06:	44 e0       	ldi	r20, 0x04	; 4
    5c08:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <EEPROM_voidRead4Numbers>
    5c0c:	1e c0       	rjmp	.+60     	; 0x5c4a <checkPassword+0x80>
	for (; local_counter < MAX_NUM_PASSWORD; local_counter++)
	{
		local_buttonVal = KEYPAD_getValue();
    5c0e:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5c12:	8b 83       	std	Y+3, r24	; 0x03
    5c14:	03 c0       	rjmp	.+6      	; 0x5c1c <checkPassword+0x52>
		while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
		{
			local_buttonVal = KEYPAD_getValue();
    5c16:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5c1a:	8b 83       	std	Y+3, r24	; 0x03
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
	EEPROM_voidRead4Numbers(ADMIN_PASSWORD,(uint8 *)savedPassword,MAX_SIZE_PASSWORD);
	for (; local_counter < MAX_NUM_PASSWORD; local_counter++)
	{
		local_buttonVal = KEYPAD_getValue();
		while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
    5c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    5c20:	d1 f3       	breq	.-12     	; 0x5c16 <checkPassword+0x4c>
    5c22:	8b 81       	ldd	r24, Y+3	; 0x03
    5c24:	8a 32       	cpi	r24, 0x2A	; 42
    5c26:	b9 f3       	breq	.-18     	; 0x5c16 <checkPassword+0x4c>
    5c28:	8b 81       	ldd	r24, Y+3	; 0x03
    5c2a:	83 32       	cpi	r24, 0x23	; 35
    5c2c:	a1 f3       	breq	.-24     	; 0x5c16 <checkPassword+0x4c>
		{
			local_buttonVal = KEYPAD_getValue();
		}
		password[local_counter] = local_buttonVal;
    5c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    5c30:	88 2f       	mov	r24, r24
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	fc 01       	movw	r30, r24
    5c36:	ec 5f       	subi	r30, 0xFC	; 252
    5c38:	fe 4f       	sbci	r31, 0xFE	; 254
    5c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c3c:	80 83       	st	Z, r24
		LCD_sendData_4bit('*');
    5c3e:	8a e2       	ldi	r24, 0x2A	; 42
    5c40:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <LCD_sendData_4bit>
	LCD_clearDisplay_4bit();
	LCD_sendString_4bit("ENTER PASSWORD");
	LCD_setCursorAt_4bit(LCD_ROW2,6);
	LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
	EEPROM_voidRead4Numbers(ADMIN_PASSWORD,(uint8 *)savedPassword,MAX_SIZE_PASSWORD);
	for (; local_counter < MAX_NUM_PASSWORD; local_counter++)
    5c44:	8c 81       	ldd	r24, Y+4	; 0x04
    5c46:	8f 5f       	subi	r24, 0xFF	; 255
    5c48:	8c 83       	std	Y+4, r24	; 0x04
    5c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    5c4c:	84 30       	cpi	r24, 0x04	; 4
    5c4e:	f8 f2       	brcs	.-66     	; 0x5c0e <checkPassword+0x44>
			local_buttonVal = KEYPAD_getValue();
		}
		password[local_counter] = local_buttonVal;
		LCD_sendData_4bit('*');
	}
	local_check = strncmp(password, savedPassword, MAX_SIZE_PASSWORD);
    5c50:	84 e0       	ldi	r24, 0x04	; 4
    5c52:	91 e0       	ldi	r25, 0x01	; 1
    5c54:	28 e0       	ldi	r18, 0x08	; 8
    5c56:	31 e0       	ldi	r19, 0x01	; 1
    5c58:	b9 01       	movw	r22, r18
    5c5a:	44 e0       	ldi	r20, 0x04	; 4
    5c5c:	50 e0       	ldi	r21, 0x00	; 0
    5c5e:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <strncmp>
    5c62:	89 83       	std	Y+1, r24	; 0x01
    5c64:	33 c0       	rjmp	.+102    	; 0x5ccc <checkPassword+0x102>
	while ((local_check != 0) && (local_counterCheck))
	{
		LCD_clearDisplay_4bit();
    5c66:	0e 94 60 28 	call	0x50c0	; 0x50c0 <LCD_clearDisplay_4bit>
		LCD_sendString_4bit("ENTER PASSWORD");
    5c6a:	8b ec       	ldi	r24, 0xCB	; 203
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <LCD_sendString_4bit>
		LCD_setCursorAt_4bit(LCD_ROW2,6);
    5c72:	82 e0       	ldi	r24, 0x02	; 2
    5c74:	66 e0       	ldi	r22, 0x06	; 6
    5c76:	0e 94 77 28 	call	0x50ee	; 0x50ee <LCD_setCursorAt_4bit>
		LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
    5c7a:	8d e0       	ldi	r24, 0x0D	; 13
    5c7c:	0e 94 73 24 	call	0x48e6	; 0x48e6 <LCD_sendCommand_4bit>
		for (local_counter = 0; local_counter < MAX_NUM_PASSWORD; local_counter++)
    5c80:	1c 82       	std	Y+4, r1	; 0x04
    5c82:	1e c0       	rjmp	.+60     	; 0x5cc0 <checkPassword+0xf6>
		{
			local_buttonVal = KEYPAD_getValue();
    5c84:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5c88:	8b 83       	std	Y+3, r24	; 0x03
    5c8a:	03 c0       	rjmp	.+6      	; 0x5c92 <checkPassword+0xc8>
			while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
			{
				local_buttonVal = KEYPAD_getValue();
    5c8c:	0e 94 48 29 	call	0x5290	; 0x5290 <KEYPAD_getValue>
    5c90:	8b 83       	std	Y+3, r24	; 0x03
		LCD_setCursorAt_4bit(LCD_ROW2,6);
		LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
		for (local_counter = 0; local_counter < MAX_NUM_PASSWORD; local_counter++)
		{
			local_buttonVal = KEYPAD_getValue();
			while ((local_buttonVal == NOT_PRESSED) || (local_buttonVal == '*') || (local_buttonVal == '#'))
    5c92:	8b 81       	ldd	r24, Y+3	; 0x03
    5c94:	8f 3f       	cpi	r24, 0xFF	; 255
    5c96:	d1 f3       	breq	.-12     	; 0x5c8c <checkPassword+0xc2>
    5c98:	8b 81       	ldd	r24, Y+3	; 0x03
    5c9a:	8a 32       	cpi	r24, 0x2A	; 42
    5c9c:	b9 f3       	breq	.-18     	; 0x5c8c <checkPassword+0xc2>
    5c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca0:	83 32       	cpi	r24, 0x23	; 35
    5ca2:	a1 f3       	breq	.-24     	; 0x5c8c <checkPassword+0xc2>
			{
				local_buttonVal = KEYPAD_getValue();
			}
			password[local_counter] = local_buttonVal;
    5ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    5ca6:	88 2f       	mov	r24, r24
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	fc 01       	movw	r30, r24
    5cac:	ec 5f       	subi	r30, 0xFC	; 252
    5cae:	fe 4f       	sbci	r31, 0xFE	; 254
    5cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb2:	80 83       	st	Z, r24
			LCD_sendData_4bit('*');
    5cb4:	8a e2       	ldi	r24, 0x2A	; 42
    5cb6:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <LCD_sendData_4bit>
	{
		LCD_clearDisplay_4bit();
		LCD_sendString_4bit("ENTER PASSWORD");
		LCD_setCursorAt_4bit(LCD_ROW2,6);
		LCD_sendCommand_4bit(DISPLAY_CURSOR_BLINKING_ON);
		for (local_counter = 0; local_counter < MAX_NUM_PASSWORD; local_counter++)
    5cba:	8c 81       	ldd	r24, Y+4	; 0x04
    5cbc:	8f 5f       	subi	r24, 0xFF	; 255
    5cbe:	8c 83       	std	Y+4, r24	; 0x04
    5cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    5cc2:	84 30       	cpi	r24, 0x04	; 4
    5cc4:	f8 f2       	brcs	.-66     	; 0x5c84 <checkPassword+0xba>
				local_buttonVal = KEYPAD_getValue();
			}
			password[local_counter] = local_buttonVal;
			LCD_sendData_4bit('*');
		}
		local_counterCheck--;
    5cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc8:	81 50       	subi	r24, 0x01	; 1
    5cca:	8a 83       	std	Y+2, r24	; 0x02
		}
		password[local_counter] = local_buttonVal;
		LCD_sendData_4bit('*');
	}
	local_check = strncmp(password, savedPassword, MAX_SIZE_PASSWORD);
	while ((local_check != 0) && (local_counterCheck))
    5ccc:	89 81       	ldd	r24, Y+1	; 0x01
    5cce:	88 23       	and	r24, r24
    5cd0:	19 f0       	breq	.+6      	; 0x5cd8 <checkPassword+0x10e>
    5cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    5cd4:	88 23       	and	r24, r24
    5cd6:	39 f6       	brne	.-114    	; 0x5c66 <checkPassword+0x9c>
			password[local_counter] = local_buttonVal;
			LCD_sendData_4bit('*');
		}
		local_counterCheck--;
	}
	if (strncmp(password, savedPassword, MAX_SIZE_PASSWORD))
    5cd8:	84 e0       	ldi	r24, 0x04	; 4
    5cda:	91 e0       	ldi	r25, 0x01	; 1
    5cdc:	28 e0       	ldi	r18, 0x08	; 8
    5cde:	31 e0       	ldi	r19, 0x01	; 1
    5ce0:	b9 01       	movw	r22, r18
    5ce2:	44 e0       	ldi	r20, 0x04	; 4
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <strncmp>
    5cea:	00 97       	sbiw	r24, 0x00	; 0
    5cec:	19 f0       	breq	.+6      	; 0x5cf4 <checkPassword+0x12a>
	{
		return INCORRECT_PASSWORD;
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	8d 83       	std	Y+5, r24	; 0x05
    5cf2:	02 c0       	rjmp	.+4      	; 0x5cf8 <checkPassword+0x12e>
	}
	else
	{
		return CORRECT_PASSWORD;
    5cf4:	82 e0       	ldi	r24, 0x02	; 2
    5cf6:	8d 83       	std	Y+5, r24	; 0x05
    5cf8:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    5cfa:	0f 90       	pop	r0
    5cfc:	0f 90       	pop	r0
    5cfe:	0f 90       	pop	r0
    5d00:	0f 90       	pop	r0
    5d02:	0f 90       	pop	r0
    5d04:	cf 91       	pop	r28
    5d06:	df 91       	pop	r29
    5d08:	08 95       	ret

00005d0a <checkUserID>:

static uint8 checkUserID(void)
{
    5d0a:	df 93       	push	r29
    5d0c:	cf 93       	push	r28
    5d0e:	00 d0       	rcall	.+0      	; 0x5d10 <checkUserID+0x6>
    5d10:	0f 92       	push	r0
    5d12:	cd b7       	in	r28, 0x3d	; 61
    5d14:	de b7       	in	r29, 0x3e	; 62
	uint8 local_counter = 0;
    5d16:	1a 82       	std	Y+2, r1	; 0x02
	uint8 localCheck = 0;
    5d18:	19 82       	std	Y+1, r1	; 0x01
	if (usersNum == 0)
    5d1a:	80 91 0c 01 	lds	r24, 0x010C
    5d1e:	88 23       	and	r24, r24
    5d20:	39 f5       	brne	.+78     	; 0x5d70 <checkUserID+0x66>
	{
		return 0;
    5d22:	1b 82       	std	Y+3, r1	; 0x03
    5d24:	2b c0       	rjmp	.+86     	; 0x5d7c <checkUserID+0x72>
	}
	else
	{
		for (; local_counter < usersNum; local_counter++)
		{
			EEPROM_voidRead4Numbers((USER1_ID + (0x10 * local_counter)),savedID, MAX_SIZE_ID);
    5d26:	8a 81       	ldd	r24, Y+2	; 0x02
    5d28:	88 2f       	mov	r24, r24
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	03 96       	adiw	r24, 0x03	; 3
    5d2e:	82 95       	swap	r24
    5d30:	92 95       	swap	r25
    5d32:	90 7f       	andi	r25, 0xF0	; 240
    5d34:	98 27       	eor	r25, r24
    5d36:	80 7f       	andi	r24, 0xF0	; 240
    5d38:	98 27       	eor	r25, r24
    5d3a:	21 e0       	ldi	r18, 0x01	; 1
    5d3c:	31 e0       	ldi	r19, 0x01	; 1
    5d3e:	b9 01       	movw	r22, r18
    5d40:	43 e0       	ldi	r20, 0x03	; 3
    5d42:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <EEPROM_voidRead4Numbers>
			localCheck = strncmp(ID,savedID,MAX_SIZE_ID);
    5d46:	8e ef       	ldi	r24, 0xFE	; 254
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	21 e0       	ldi	r18, 0x01	; 1
    5d4c:	31 e0       	ldi	r19, 0x01	; 1
    5d4e:	b9 01       	movw	r22, r18
    5d50:	43 e0       	ldi	r20, 0x03	; 3
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <strncmp>
    5d58:	89 83       	std	Y+1, r24	; 0x01
			if (localCheck != 0)
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	88 23       	and	r24, r24
    5d5e:	29 f4       	brne	.+10     	; 0x5d6a <checkUserID+0x60>
			{
				continue;
			}
			else
			{
				return (local_counter + 1);
    5d60:	8a 81       	ldd	r24, Y+2	; 0x02
    5d62:	98 2f       	mov	r25, r24
    5d64:	9f 5f       	subi	r25, 0xFF	; 255
    5d66:	9b 83       	std	Y+3, r25	; 0x03
    5d68:	09 c0       	rjmp	.+18     	; 0x5d7c <checkUserID+0x72>
	{
		return 0;
	}
	else
	{
		for (; local_counter < usersNum; local_counter++)
    5d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d6c:	8f 5f       	subi	r24, 0xFF	; 255
    5d6e:	8a 83       	std	Y+2, r24	; 0x02
    5d70:	90 91 0c 01 	lds	r25, 0x010C
    5d74:	8a 81       	ldd	r24, Y+2	; 0x02
    5d76:	89 17       	cp	r24, r25
    5d78:	b0 f2       	brcs	.-84     	; 0x5d26 <checkUserID+0x1c>
			else
			{
				return (local_counter + 1);
			}
		}
		return 0;
    5d7a:	1b 82       	std	Y+3, r1	; 0x03
    5d7c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    5d7e:	0f 90       	pop	r0
    5d80:	0f 90       	pop	r0
    5d82:	0f 90       	pop	r0
    5d84:	cf 91       	pop	r28
    5d86:	df 91       	pop	r29
    5d88:	08 95       	ret

00005d8a <checkUserPassword>:

static void checkUserPassword(void)
{
    5d8a:	df 93       	push	r29
    5d8c:	cf 93       	push	r28
    5d8e:	0f 92       	push	r0
    5d90:	cd b7       	in	r28, 0x3d	; 61
    5d92:	de b7       	in	r29, 0x3e	; 62
	uint8 localCheck = 0;
    5d94:	19 82       	std	Y+1, r1	; 0x01

	localCheck = checkPassword();
    5d96:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <checkPassword>
    5d9a:	89 83       	std	Y+1, r24	; 0x01
	}
	else if (localCheck == CORRECT_PASSWORD)
	{

	}
}
    5d9c:	0f 90       	pop	r0
    5d9e:	cf 91       	pop	r28
    5da0:	df 91       	pop	r29
    5da2:	08 95       	ret

00005da4 <__udivmodqi4>:
    5da4:	99 1b       	sub	r25, r25
    5da6:	79 e0       	ldi	r23, 0x09	; 9
    5da8:	04 c0       	rjmp	.+8      	; 0x5db2 <__udivmodqi4_ep>

00005daa <__udivmodqi4_loop>:
    5daa:	99 1f       	adc	r25, r25
    5dac:	96 17       	cp	r25, r22
    5dae:	08 f0       	brcs	.+2      	; 0x5db2 <__udivmodqi4_ep>
    5db0:	96 1b       	sub	r25, r22

00005db2 <__udivmodqi4_ep>:
    5db2:	88 1f       	adc	r24, r24
    5db4:	7a 95       	dec	r23
    5db6:	c9 f7       	brne	.-14     	; 0x5daa <__udivmodqi4_loop>
    5db8:	80 95       	com	r24
    5dba:	08 95       	ret

00005dbc <__udivmodhi4>:
    5dbc:	aa 1b       	sub	r26, r26
    5dbe:	bb 1b       	sub	r27, r27
    5dc0:	51 e1       	ldi	r21, 0x11	; 17
    5dc2:	07 c0       	rjmp	.+14     	; 0x5dd2 <__udivmodhi4_ep>

00005dc4 <__udivmodhi4_loop>:
    5dc4:	aa 1f       	adc	r26, r26
    5dc6:	bb 1f       	adc	r27, r27
    5dc8:	a6 17       	cp	r26, r22
    5dca:	b7 07       	cpc	r27, r23
    5dcc:	10 f0       	brcs	.+4      	; 0x5dd2 <__udivmodhi4_ep>
    5dce:	a6 1b       	sub	r26, r22
    5dd0:	b7 0b       	sbc	r27, r23

00005dd2 <__udivmodhi4_ep>:
    5dd2:	88 1f       	adc	r24, r24
    5dd4:	99 1f       	adc	r25, r25
    5dd6:	5a 95       	dec	r21
    5dd8:	a9 f7       	brne	.-22     	; 0x5dc4 <__udivmodhi4_loop>
    5dda:	80 95       	com	r24
    5ddc:	90 95       	com	r25
    5dde:	bc 01       	movw	r22, r24
    5de0:	cd 01       	movw	r24, r26
    5de2:	08 95       	ret

00005de4 <__prologue_saves__>:
    5de4:	2f 92       	push	r2
    5de6:	3f 92       	push	r3
    5de8:	4f 92       	push	r4
    5dea:	5f 92       	push	r5
    5dec:	6f 92       	push	r6
    5dee:	7f 92       	push	r7
    5df0:	8f 92       	push	r8
    5df2:	9f 92       	push	r9
    5df4:	af 92       	push	r10
    5df6:	bf 92       	push	r11
    5df8:	cf 92       	push	r12
    5dfa:	df 92       	push	r13
    5dfc:	ef 92       	push	r14
    5dfe:	ff 92       	push	r15
    5e00:	0f 93       	push	r16
    5e02:	1f 93       	push	r17
    5e04:	cf 93       	push	r28
    5e06:	df 93       	push	r29
    5e08:	cd b7       	in	r28, 0x3d	; 61
    5e0a:	de b7       	in	r29, 0x3e	; 62
    5e0c:	ca 1b       	sub	r28, r26
    5e0e:	db 0b       	sbc	r29, r27
    5e10:	0f b6       	in	r0, 0x3f	; 63
    5e12:	f8 94       	cli
    5e14:	de bf       	out	0x3e, r29	; 62
    5e16:	0f be       	out	0x3f, r0	; 63
    5e18:	cd bf       	out	0x3d, r28	; 61
    5e1a:	09 94       	ijmp

00005e1c <__epilogue_restores__>:
    5e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    5e1e:	39 88       	ldd	r3, Y+17	; 0x11
    5e20:	48 88       	ldd	r4, Y+16	; 0x10
    5e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    5e30:	c8 84       	ldd	r12, Y+8	; 0x08
    5e32:	df 80       	ldd	r13, Y+7	; 0x07
    5e34:	ee 80       	ldd	r14, Y+6	; 0x06
    5e36:	fd 80       	ldd	r15, Y+5	; 0x05
    5e38:	0c 81       	ldd	r16, Y+4	; 0x04
    5e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    5e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    5e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    5e40:	ce 0f       	add	r28, r30
    5e42:	d1 1d       	adc	r29, r1
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	f8 94       	cli
    5e48:	de bf       	out	0x3e, r29	; 62
    5e4a:	0f be       	out	0x3f, r0	; 63
    5e4c:	cd bf       	out	0x3d, r28	; 61
    5e4e:	ed 01       	movw	r28, r26
    5e50:	08 95       	ret

00005e52 <strncmp>:
    5e52:	fb 01       	movw	r30, r22
    5e54:	dc 01       	movw	r26, r24
    5e56:	41 50       	subi	r20, 0x01	; 1
    5e58:	50 40       	sbci	r21, 0x00	; 0
    5e5a:	30 f0       	brcs	.+12     	; 0x5e68 <strncmp+0x16>
    5e5c:	8d 91       	ld	r24, X+
    5e5e:	01 90       	ld	r0, Z+
    5e60:	80 19       	sub	r24, r0
    5e62:	19 f4       	brne	.+6      	; 0x5e6a <strncmp+0x18>
    5e64:	00 20       	and	r0, r0
    5e66:	b9 f7       	brne	.-18     	; 0x5e56 <strncmp+0x4>
    5e68:	88 1b       	sub	r24, r24
    5e6a:	99 0b       	sbc	r25, r25
    5e6c:	08 95       	ret

00005e6e <_exit>:
    5e6e:	f8 94       	cli

00005e70 <__stop_program>:
    5e70:	ff cf       	rjmp	.-2      	; 0x5e70 <__stop_program>
